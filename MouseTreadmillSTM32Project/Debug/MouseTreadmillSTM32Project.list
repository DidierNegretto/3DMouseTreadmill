
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e078  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800e200  0800e200  0001e200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4bc  0800e4bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4bc  0800e4bc  0001e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4c4  0800e4c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4c4  0800e4c4  0001e4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4c8  0800e4c8  0001e4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800e4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016cb8  2000000c  0800e4d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016cc4  0800e4d8  00026cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002195e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000323b  00000000  00000000  0004199a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00021008  00000000  00000000  00044bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e00  00000000  00000000  00065be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000050c8  00000000  00000000  000669e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00029082  00000000  00000000  0006baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014137  00000000  00000000  00094b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f8077  00000000  00000000  000a8c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001a0cd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030d8  00000000  00000000  001a0d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e1e8 	.word	0x0800e1e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800e1e8 	.word	0x0800e1e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80004c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 80004cc:	6804      	ldr	r4, [r0, #0]
{
 80004ce:	b0df      	sub	sp, #380	; 0x17c
    uint32_t offset;

    m->sz[0] += len * 8;
 80004d0:	00d3      	lsls	r3, r2, #3
 80004d2:	191b      	adds	r3, r3, r4
{
 80004d4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80004d8:	9104      	str	r1, [sp, #16]
    m->sz[0] += len * 8;
 80004da:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
 80004dc:	d302      	bcc.n	80004e4 <mavlink_sha256_update+0x1c>
	++m->sz[1];
 80004de:	6843      	ldr	r3, [r0, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	6043      	str	r3, [r0, #4]
    offset = (old_sz / 8) % 64;
    while(len > 0){
 80004e4:	9b03      	ldr	r3, [sp, #12]
    offset = (old_sz / 8) % 64;
 80004e6:	f3c4 04c5 	ubfx	r4, r4, #3, #6
    while(len > 0){
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f000 8227 	beq.w	800093e <mavlink_sha256_update+0x476>
 80004f0:	9b02      	ldr	r3, [sp, #8]
 80004f2:	3328      	adds	r3, #40	; 0x28
 80004f4:	9305      	str	r3, [sp, #20]
	data[i] = in[i];
 80004f6:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
 80004fa:	e003      	b.n	8000504 <mavlink_sha256_update+0x3c>
    while(len > 0){
 80004fc:	9b03      	ldr	r3, [sp, #12]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f000 821d 	beq.w	800093e <mavlink_sha256_update+0x476>
 8000504:	9d03      	ldr	r5, [sp, #12]
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000506:	9e04      	ldr	r6, [sp, #16]
 8000508:	9805      	ldr	r0, [sp, #20]
	uint32_t l = 64 - offset;
 800050a:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800050e:	42ab      	cmp	r3, r5
 8000510:	bf28      	it	cs
 8000512:	462b      	movcs	r3, r5
	offset += l;
	p += l;
	len -= l;
 8000514:	1aed      	subs	r5, r5, r3
 8000516:	9503      	str	r5, [sp, #12]
	p += l;
 8000518:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800051a:	4420      	add	r0, r4
	p += l;
 800051c:	441d      	add	r5, r3
	offset += l;
 800051e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8000520:	461a      	mov	r2, r3
 8000522:	4631      	mov	r1, r6
	p += l;
 8000524:	9504      	str	r5, [sp, #16]
	memcpy(m->u.save_bytes + offset, p, l);
 8000526:	f00d fe4c 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800052a:	2c40      	cmp	r4, #64	; 0x40
 800052c:	d1e6      	bne.n	80004fc <mavlink_sha256_update+0x34>
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 800052e:	9902      	ldr	r1, [sp, #8]
 8000530:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
                p2[1] = p1[2];
 8000534:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
                p2[0] = p1[3];
 8000538:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
                p2[2] = p1[1];
 800053c:	f891 702d 	ldrb.w	r7, [r1, #45]	; 0x2d
                p2[0] = p1[3];
 8000540:	9001      	str	r0, [sp, #4]
 8000542:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
                p2[1] = p1[2];
 8000546:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
                p2[2] = p1[1];
 800054a:	9a02      	ldr	r2, [sp, #8]
                p2[3] = p1[0];
 800054c:	9b02      	ldr	r3, [sp, #8]
                p2[2] = p1[1];
 800054e:	f891 9029 	ldrb.w	r9, [r1, #41]	; 0x29
                p2[3] = p1[0];
 8000552:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
                p2[0] = p1[3];
 8000556:	f891 e02f 	ldrb.w	lr, [r1, #47]	; 0x2f
                p2[1] = p1[2];
 800055a:	f891 c02e 	ldrb.w	ip, [r1, #46]	; 0x2e
                p2[3] = p1[0];
 800055e:	f891 b02c 	ldrb.w	fp, [r1, #44]	; 0x2c
                p2[1] = p1[2];
 8000562:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
                p2[2] = p1[1];
 8000566:	f891 5031 	ldrb.w	r5, [r1, #49]	; 0x31
                p2[0] = p1[3];
 800056a:	f891 0037 	ldrb.w	r0, [r1, #55]	; 0x37
                p2[3] = p1[0];
 800056e:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
                p2[2] = p1[1];
 8000572:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
                p2[1] = p1[2];
 8000576:	f891 1036 	ldrb.w	r1, [r1, #54]	; 0x36
                p2[0] = p1[3];
 800057a:	9f01      	ldr	r7, [sp, #4]
                p2[2] = p1[1];
 800057c:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
                p2[3] = p1[0];
 8000580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
                p2[2] = p1[1];
 8000584:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
                p2[3] = p1[0];
 8000588:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
                p2[0] = p1[3];
 800058c:	f88d e03c 	strb.w	lr, [sp, #60]	; 0x3c
                p2[1] = p1[2];
 8000590:	f88d c03d 	strb.w	ip, [sp, #61]	; 0x3d
                p2[3] = p1[0];
 8000594:	f88d b03f 	strb.w	fp, [sp, #63]	; 0x3f
                p2[0] = p1[3];
 8000598:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
                p2[1] = p1[2];
 800059c:	f88d 6041 	strb.w	r6, [sp, #65]	; 0x41
                p2[2] = p1[1];
 80005a0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
                p2[3] = p1[0];
 80005a4:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
                p2[1] = p1[2];
 80005a8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
                p2[0] = p1[3];
 80005ac:	9902      	ldr	r1, [sp, #8]
                p2[2] = p1[1];
 80005ae:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
                p2[3] = p1[0];
 80005b2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                p2[0] = p1[3];
 80005b6:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
                p2[1] = p1[2];
 80005ba:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
                p2[0] = p1[3];
 80005be:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 80005c2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80005c6:	f891 0043 	ldrb.w	r0, [r1, #67]	; 0x43
                p2[2] = p1[1];
 80005ca:	9a02      	ldr	r2, [sp, #8]
                p2[1] = p1[2];
 80005cc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
                p2[3] = p1[0];
 80005d0:	9b02      	ldr	r3, [sp, #8]
                p2[2] = p1[1];
 80005d2:	f891 9039 	ldrb.w	r9, [r1, #57]	; 0x39
                p2[3] = p1[0];
 80005d6:	f891 8038 	ldrb.w	r8, [r1, #56]	; 0x38
                p2[0] = p1[3];
 80005da:	f891 e03f 	ldrb.w	lr, [r1, #63]	; 0x3f
                p2[1] = p1[2];
 80005de:	f891 c03e 	ldrb.w	ip, [r1, #62]	; 0x3e
                p2[3] = p1[0];
 80005e2:	f891 b03c 	ldrb.w	fp, [r1, #60]	; 0x3c
                p2[1] = p1[2];
 80005e6:	f891 6042 	ldrb.w	r6, [r1, #66]	; 0x42
                p2[2] = p1[1];
 80005ea:	f891 5041 	ldrb.w	r5, [r1, #65]	; 0x41
                p2[3] = p1[0];
 80005ee:	f891 4040 	ldrb.w	r4, [r1, #64]	; 0x40
                p2[2] = p1[1];
 80005f2:	f891 703d 	ldrb.w	r7, [r1, #61]	; 0x3d
                p2[0] = p1[3];
 80005f6:	9001      	str	r0, [sp, #4]
 80005f8:	f891 0047 	ldrb.w	r0, [r1, #71]	; 0x47
                p2[1] = p1[2];
 80005fc:	f891 1046 	ldrb.w	r1, [r1, #70]	; 0x46
                p2[2] = p1[1];
 8000600:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
                p2[3] = p1[0];
 8000604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
                p2[2] = p1[1];
 8000608:	f88d 904a 	strb.w	r9, [sp, #74]	; 0x4a
                p2[3] = p1[0];
 800060c:	f88d 804b 	strb.w	r8, [sp, #75]	; 0x4b
                p2[0] = p1[3];
 8000610:	f88d e04c 	strb.w	lr, [sp, #76]	; 0x4c
                p2[1] = p1[2];
 8000614:	f88d c04d 	strb.w	ip, [sp, #77]	; 0x4d
                p2[3] = p1[0];
 8000618:	f88d b04f 	strb.w	fp, [sp, #79]	; 0x4f
                p2[2] = p1[1];
 800061c:	f88d 704e 	strb.w	r7, [sp, #78]	; 0x4e
                p2[0] = p1[3];
 8000620:	9f01      	ldr	r7, [sp, #4]
                p2[1] = p1[2];
 8000622:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
                p2[0] = p1[3];
 8000626:	9902      	ldr	r1, [sp, #8]
                p2[2] = p1[1];
 8000628:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
                p2[3] = p1[0];
 800062c:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
                p2[0] = p1[3];
 8000630:	f891 204b 	ldrb.w	r2, [r1, #75]	; 0x4b
                p2[1] = p1[2];
 8000634:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
                p2[0] = p1[3];
 8000638:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
 800063c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
 8000640:	f891 0053 	ldrb.w	r0, [r1, #83]	; 0x53
                p2[2] = p1[1];
 8000644:	9a02      	ldr	r2, [sp, #8]
                p2[1] = p1[2];
 8000646:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
                p2[3] = p1[0];
 800064a:	9b02      	ldr	r3, [sp, #8]
                p2[2] = p1[1];
 800064c:	f891 9049 	ldrb.w	r9, [r1, #73]	; 0x49
                p2[0] = p1[3];
 8000650:	f891 e04f 	ldrb.w	lr, [r1, #79]	; 0x4f
                p2[1] = p1[2];
 8000654:	f891 c04e 	ldrb.w	ip, [r1, #78]	; 0x4e
                p2[3] = p1[0];
 8000658:	f891 b04c 	ldrb.w	fp, [r1, #76]	; 0x4c
 800065c:	f891 8048 	ldrb.w	r8, [r1, #72]	; 0x48
                p2[0] = p1[3];
 8000660:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
                p2[1] = p1[2];
 8000664:	f88d 6051 	strb.w	r6, [sp, #81]	; 0x51
                p2[2] = p1[1];
 8000668:	f891 704d 	ldrb.w	r7, [r1, #77]	; 0x4d
                p2[1] = p1[2];
 800066c:	f891 6052 	ldrb.w	r6, [r1, #82]	; 0x52
                p2[2] = p1[1];
 8000670:	f88d 5052 	strb.w	r5, [sp, #82]	; 0x52
                p2[3] = p1[0];
 8000674:	f88d 4053 	strb.w	r4, [sp, #83]	; 0x53
                p2[2] = p1[1];
 8000678:	f891 5051 	ldrb.w	r5, [r1, #81]	; 0x51
                p2[3] = p1[0];
 800067c:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
                p2[0] = p1[3];
 8000680:	9001      	str	r0, [sp, #4]
 8000682:	f891 0057 	ldrb.w	r0, [r1, #87]	; 0x57
                p2[1] = p1[2];
 8000686:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
                p2[2] = p1[1];
 800068a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
                p2[3] = p1[0];
 800068e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
                p2[2] = p1[1];
 8000692:	f88d 905a 	strb.w	r9, [sp, #90]	; 0x5a
                p2[3] = p1[0];
 8000696:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
                p2[1] = p1[2];
 800069a:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
                p2[0] = p1[3];
 800069e:	9902      	ldr	r1, [sp, #8]
                p2[2] = p1[1];
 80006a0:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
                p2[0] = p1[3];
 80006a4:	f891 205b 	ldrb.w	r2, [r1, #91]	; 0x5b
 80006a8:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
                p2[2] = p1[1];
 80006ac:	9a02      	ldr	r2, [sp, #8]
 80006ae:	f88d 705e 	strb.w	r7, [sp, #94]	; 0x5e
                p2[0] = p1[3];
 80006b2:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
 80006b6:	9f01      	ldr	r7, [sp, #4]
 80006b8:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
                p2[3] = p1[0];
 80006bc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                p2[1] = p1[2];
 80006c0:	f891 305a 	ldrb.w	r3, [r1, #90]	; 0x5a
                p2[2] = p1[1];
 80006c4:	f891 9059 	ldrb.w	r9, [r1, #89]	; 0x59
                p2[3] = p1[0];
 80006c8:	f891 8058 	ldrb.w	r8, [r1, #88]	; 0x58
                p2[2] = p1[1];
 80006cc:	f892 2065 	ldrb.w	r2, [r2, #101]	; 0x65
                p2[0] = p1[3];
 80006d0:	f88d e05c 	strb.w	lr, [sp, #92]	; 0x5c
                p2[1] = p1[2];
 80006d4:	f88d c05d 	strb.w	ip, [sp, #93]	; 0x5d
                p2[0] = p1[3];
 80006d8:	f891 e05f 	ldrb.w	lr, [r1, #95]	; 0x5f
                p2[1] = p1[2];
 80006dc:	f891 c05e 	ldrb.w	ip, [r1, #94]	; 0x5e
                p2[3] = p1[0];
 80006e0:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
                p2[0] = p1[3];
 80006e4:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
                p2[3] = p1[0];
 80006e8:	f891 b05c 	ldrb.w	fp, [r1, #92]	; 0x5c
                p2[2] = p1[1];
 80006ec:	f891 705d 	ldrb.w	r7, [r1, #93]	; 0x5d
                p2[1] = p1[2];
 80006f0:	f88d 6061 	strb.w	r6, [sp, #97]	; 0x61
                p2[2] = p1[1];
 80006f4:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
                p2[1] = p1[2];
 80006f8:	f891 6062 	ldrb.w	r6, [r1, #98]	; 0x62
                p2[2] = p1[1];
 80006fc:	f891 5061 	ldrb.w	r5, [r1, #97]	; 0x61
                p2[3] = p1[0];
 8000700:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
                p2[0] = p1[3];
 8000704:	9001      	str	r0, [sp, #4]
                p2[3] = p1[0];
 8000706:	f891 4060 	ldrb.w	r4, [r1, #96]	; 0x60
                p2[0] = p1[3];
 800070a:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
                p2[1] = p1[2];
 800070e:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
 8000712:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
                p2[3] = p1[0];
 8000716:	9b02      	ldr	r3, [sp, #8]
                p2[2] = p1[1];
 8000718:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
    AA = A;
 800071c:	9a02      	ldr	r2, [sp, #8]
                p2[3] = p1[0];
 800071e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
                p2[0] = p1[3];
 8000722:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
                p2[1] = p1[2];
 8000726:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
                p2[3] = p1[0];
 800072a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    AA = A;
 800072e:	6893      	ldr	r3, [r2, #8]
                p2[2] = p1[1];
 8000730:	f88d 706e 	strb.w	r7, [sp, #110]	; 0x6e
    AA = A;
 8000734:	9306      	str	r3, [sp, #24]
                p2[0] = p1[3];
 8000736:	9f01      	ldr	r7, [sp, #4]
	data[i] = in[i];
 8000738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
                p2[2] = p1[1];
 800073a:	f88d 906a 	strb.w	r9, [sp, #106]	; 0x6a
	data[i] = in[i];
 800073e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
                p2[3] = p1[0];
 8000742:	f88d 806b 	strb.w	r8, [sp, #107]	; 0x6b
                p2[0] = p1[3];
 8000746:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
                p2[1] = p1[2];
 800074a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
                p2[2] = p1[1];
 800074e:	f88d 5072 	strb.w	r5, [sp, #114]	; 0x72
	data[i] = in[i];
 8000752:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
                p2[3] = p1[0];
 8000756:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
	data[i] = in[i];
 800075a:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
 800075e:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8000762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000766:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
                p2[0] = p1[3];
 800076a:	f88d e06c 	strb.w	lr, [sp, #108]	; 0x6c
                p2[1] = p1[2];
 800076e:	f88d c06d 	strb.w	ip, [sp, #109]	; 0x6d
                p2[3] = p1[0];
 8000772:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
	data[i] = in[i];
 8000776:	e9dd bc1a 	ldrd	fp, ip, [sp, #104]	; 0x68
 800077a:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800077e:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8000782:	e9ca 6708 	strd	r6, r7, [sl, #32]
 8000786:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800078a:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
    BB = B;
 800078e:	9902      	ldr	r1, [sp, #8]
	data[i] = in[i];
 8000790:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    BB = B;
 8000792:	68cc      	ldr	r4, [r1, #12]
 8000794:	9407      	str	r4, [sp, #28]
    CC = C;
 8000796:	690c      	ldr	r4, [r1, #16]
	data[i] = in[i];
 8000798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    CC = C;
 800079a:	9408      	str	r4, [sp, #32]
    DD = D;
 800079c:	694c      	ldr	r4, [r1, #20]
 800079e:	9409      	str	r4, [sp, #36]	; 0x24
    EE = E;
 80007a0:	698c      	ldr	r4, [r1, #24]
 80007a2:	940a      	str	r4, [sp, #40]	; 0x28
	data[i] = in[i];
 80007a4:	e9ca 7200 	strd	r7, r2, [sl]
    FF = F;
 80007a8:	69cc      	ldr	r4, [r1, #28]
	data[i] = in[i];
 80007aa:	981c      	ldr	r0, [sp, #112]	; 0x70
    FF = F;
 80007ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80007ae:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    GG = G;
 80007b2:	6a0c      	ldr	r4, [r1, #32]
    HH = H;
 80007b4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    GG = G;
 80007b6:	940c      	str	r4, [sp, #48]	; 0x30
	data[i] = in[i];
 80007b8:	e9ca bc0c 	strd	fp, ip, [sl, #48]	; 0x30
    HH = H;
 80007bc:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 80007be:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80007c2:	4656      	mov	r6, sl
    for (i = 16; i < 64; ++i)
 80007c4:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80007c8:	ea4f 41f0 	mov.w	r1, r0, ror #19
 80007cc:	ea81 4170 	eor.w	r1, r1, r0, ror #17
 80007d0:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80007d4:	4438      	add	r0, r7
 80007d6:	e9d6 1409 	ldrd	r1, r4, [r6, #36]	; 0x24
 80007da:	e9d6 5701 	ldrd	r5, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80007de:	ea4f 4273 	mov.w	r2, r3, ror #17
 80007e2:	ea82 42f3 	eor.w	r2, r2, r3, ror #19
 80007e6:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80007ea:	4423      	add	r3, r4
 80007ec:	4401      	add	r1, r0
 80007ee:	ea4f 14f7 	mov.w	r4, r7, ror #7
 80007f2:	ea4f 40b5 	mov.w	r0, r5, ror #18
 80007f6:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 80007fa:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 80007fe:	195a      	adds	r2, r3, r5
 8000800:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 8000804:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 8000808:	f10c 0c02 	add.w	ip, ip, #2
 800080c:	4408      	add	r0, r1
 800080e:	4413      	add	r3, r2
 8000810:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000814:	e9c6 0310 	strd	r0, r3, [r6, #64]	; 0x40
 8000818:	f106 0608 	add.w	r6, r6, #8
 800081c:	d1d4      	bne.n	80007c8 <mavlink_sha256_update+0x300>
 800081e:	e9da 143c 	ldrd	r1, r4, [sl, #240]	; 0xf0
 8000822:	ea4f 4271 	mov.w	r2, r1, ror #17
 8000826:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800082a:	e9da 672f 	ldrd	r6, r7, [sl, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800082e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8000832:	f8da 00dc 	ldr.w	r0, [sl, #220]	; 0xdc
 8000836:	f8da 10b8 	ldr.w	r1, [sl, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800083a:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800083e:	4408      	add	r0, r1
 8000840:	f8da 10e0 	ldr.w	r1, [sl, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000844:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8000848:	ea4f 15f6 	mov.w	r5, r6, ror #7
 800084c:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8000850:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8000854:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000856:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800085a:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 800085e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8000862:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8000866:	4410      	add	r0, r2
 8000868:	440b      	add	r3, r1
 800086a:	4473      	add	r3, lr
 800086c:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800086e:	e9ca 033e 	strd	r0, r3, [sl, #248]	; 0xf8
    CC = C;
 8000872:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
    AA = A;
 8000876:	e9dd 5c06 	ldrd	r5, ip, [sp, #24]
    FF = F;
 800087a:	e9dd e80b 	ldrd	lr, r8, [sp, #44]	; 0x2c
    HH = H;
 800087e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    EE = E;
 8000880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 8000882:	2600      	movs	r6, #0
 8000884:	e005      	b.n	8000892 <mavlink_sha256_update+0x3ca>
 8000886:	4667      	mov	r7, ip
 8000888:	46f0      	mov	r8, lr
 800088a:	46ac      	mov	ip, r5
 800088c:	46a6      	mov	lr, r4
	AA = T1 + T2;
 800088e:	4615      	mov	r5, r2
	EE = DD + T1;
 8000890:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000892:	ea28 0204 	bic.w	r2, r8, r4
 8000896:	ea04 0b0e 	and.w	fp, r4, lr
 800089a:	4610      	mov	r0, r2
 800089c:	465a      	mov	r2, fp
 800089e:	4042      	eors	r2, r0
 80008a0:	4828      	ldr	r0, [pc, #160]	; (8000944 <mavlink_sha256_update+0x47c>)
 80008a2:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80008a6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80008aa:	9001      	str	r0, [sp, #4]
 80008ac:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80008b0:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80008b4:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80008b8:	440a      	add	r2, r1
 80008ba:	4402      	add	r2, r0
 80008bc:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008be:	ea4f 3175 	mov.w	r1, r5, ror #13
 80008c2:	ea8c 0b07 	eor.w	fp, ip, r7
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80008c6:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008c8:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80008cc:	ea0c 0007 	and.w	r0, ip, r7
 80008d0:	ea0b 0b05 	and.w	fp, fp, r5
 80008d4:	ea8b 0b00 	eor.w	fp, fp, r0
 80008d8:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80008dc:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80008de:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008e0:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80008e2:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80008e4:	eb02 0009 	add.w	r0, r2, r9
 80008e8:	4643      	mov	r3, r8
	AA = T1 + T2;
 80008ea:	440a      	add	r2, r1
 80008ec:	46b9      	mov	r9, r7
    for (i = 0; i < 64; i++) {
 80008ee:	d1ca      	bne.n	8000886 <mavlink_sha256_update+0x3be>
    A += AA;
 80008f0:	9b06      	ldr	r3, [sp, #24]
 80008f2:	4611      	mov	r1, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	4619      	mov	r1, r3
    B += BB;
 80008f8:	9b07      	ldr	r3, [sp, #28]
 80008fa:	442b      	add	r3, r5
 80008fc:	461d      	mov	r5, r3
    C += CC;
 80008fe:	9b08      	ldr	r3, [sp, #32]
 8000900:	4463      	add	r3, ip
 8000902:	469c      	mov	ip, r3
    D += DD;
 8000904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000906:	443b      	add	r3, r7
 8000908:	461f      	mov	r7, r3
    E += EE;
 800090a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800090c:	4403      	add	r3, r0
 800090e:	461a      	mov	r2, r3
    F += FF;
 8000910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000912:	4423      	add	r3, r4
 8000914:	461c      	mov	r4, r3
    G += GG;
 8000916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000918:	4473      	add	r3, lr
 800091a:	4618      	mov	r0, r3
    H += HH;
 800091c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800091e:	4443      	add	r3, r8
 8000920:	461e      	mov	r6, r3
    A += AA;
 8000922:	9b02      	ldr	r3, [sp, #8]
    G += GG;
 8000924:	e9c3 4007 	strd	r4, r0, [r3, #28]
    A += AA;
 8000928:	6099      	str	r1, [r3, #8]
    C += CC;
 800092a:	e9c3 5c03 	strd	r5, ip, [r3, #12]
    E += EE;
 800092e:	e9c3 7205 	strd	r7, r2, [r3, #20]
    H += HH;
 8000932:	625e      	str	r6, [r3, #36]	; 0x24
    while(len > 0){
 8000934:	9b03      	ldr	r3, [sp, #12]
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8000936:	2400      	movs	r4, #0
    while(len > 0){
 8000938:	2b00      	cmp	r3, #0
 800093a:	f47f ade3 	bne.w	8000504 <mavlink_sha256_update+0x3c>
	}
    }
}
 800093e:	b05f      	add	sp, #380	; 0x17c
 8000940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000944:	0800e200 	.word	0x0800e200

08000948 <mouseDriver_sendMsg.constprop.1>:
	actual_speed_setpoint = speed;
}


/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 8000948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800094c:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
 8000950:	e001      	b.n	8000956 <mouseDriver_sendMsg.constprop.1+0xe>
	static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
	static uint16_t msg_size = 0;

	while (main_get_huart_tx_state() == HAL_BUSY){
		/*Wait for other messages to be sent*/
		HAL_Delay(1);
 8000952:	f00a fd87 	bl	800b464 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 8000956:	f008 fccb 	bl	80092f0 <main_get_huart_tx_state>
 800095a:	2802      	cmp	r0, #2
		HAL_Delay(1);
 800095c:	f04f 0001 	mov.w	r0, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 8000960:	d0f7      	beq.n	8000952 <mouseDriver_sendMsg.constprop.1+0xa>
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8000962:	4bb8      	ldr	r3, [pc, #736]	; (8000c44 <mouseDriver_sendMsg.constprop.1+0x2fc>)
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000964:	4cb8      	ldr	r4, [pc, #736]	; (8000c48 <mouseDriver_sendMsg.constprop.1+0x300>)
 8000966:	685d      	ldr	r5, [r3, #4]
 8000968:	6899      	ldr	r1, [r3, #8]
    packet.time = time;
 800096a:	6818      	ldr	r0, [r3, #0]
    packet.motor_x = motor_x;
 800096c:	9516      	str	r5, [sp, #88]	; 0x58
    packet.time = time;
 800096e:	aa15      	add	r2, sp, #84	; 0x54
 8000970:	9015      	str	r0, [sp, #84]	; 0x54
    packet.motor_y = motor_y;
 8000972:	9117      	str	r1, [sp, #92]	; 0x5c
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	7b23      	ldrb	r3, [r4, #12]
 8000978:	ad98      	add	r5, sp, #608	; 0x260
 800097a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 800097e:	f04f 0804 	mov.w	r8, #4
 8000982:	2200      	movs	r2, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000984:	f013 0302 	ands.w	r3, r3, #2
 8000988:	f88d 825d 	strb.w	r8, [sp, #605]	; 0x25d
 800098c:	f88d 225e 	strb.w	r2, [sp, #606]	; 0x25e
 8000990:	f88d 225f 	strb.w	r2, [sp, #607]	; 0x25f
 8000994:	d156      	bne.n	8000a44 <mouseDriver_sendMsg.constprop.1+0xfc>
 8000996:	6922      	ldr	r2, [r4, #16]
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 83ea 	beq.w	8001172 <mouseDriver_sendMsg.constprop.1+0x82a>
 800099e:	7810      	ldrb	r0, [r2, #0]
 80009a0:	f000 0001 	and.w	r0, r0, #1
	while (length > 1 && payload[length-1] == 0) {
 80009a4:	f89d 226b 	ldrb.w	r2, [sp, #619]	; 0x26b
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 80009a8:	21fd      	movs	r1, #253	; 0xfd
 80009aa:	f88d 1256 	strb.w	r1, [sp, #598]	; 0x256
	while (length > 1 && payload[length-1] == 0) {
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	f041 84de 	bne.w	8002370 <mouseDriver_sendMsg.constprop.1+0x1a28>
 80009b4:	f89d 226a 	ldrb.w	r2, [sp, #618]	; 0x26a
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	f041 84e1 	bne.w	8002380 <mouseDriver_sendMsg.constprop.1+0x1a38>
 80009be:	f89d 2269 	ldrb.w	r2, [sp, #617]	; 0x269
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	f041 84e0 	bne.w	8002388 <mouseDriver_sendMsg.constprop.1+0x1a40>
 80009c8:	f89d 2268 	ldrb.w	r2, [sp, #616]	; 0x268
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f041 84df 	bne.w	8002390 <mouseDriver_sendMsg.constprop.1+0x1a48>
 80009d2:	f89d 2267 	ldrb.w	r2, [sp, #615]	; 0x267
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	f041 84de 	bne.w	8002398 <mouseDriver_sendMsg.constprop.1+0x1a50>
 80009dc:	f89d 2266 	ldrb.w	r2, [sp, #614]	; 0x266
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	f041 84dd 	bne.w	80023a0 <mouseDriver_sendMsg.constprop.1+0x1a58>
 80009e6:	f89d 2265 	ldrb.w	r2, [sp, #613]	; 0x265
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f041 84dc 	bne.w	80023a8 <mouseDriver_sendMsg.constprop.1+0x1a60>
 80009f0:	f89d 2264 	ldrb.w	r2, [sp, #612]	; 0x264
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	f041 84db 	bne.w	80023b0 <mouseDriver_sendMsg.constprop.1+0x1a68>
 80009fa:	f89d 2263 	ldrb.w	r2, [sp, #611]	; 0x263
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	f041 84da 	bne.w	80023b8 <mouseDriver_sendMsg.constprop.1+0x1a70>
 8000a04:	f89d 2262 	ldrb.w	r2, [sp, #610]	; 0x262
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	f041 84d9 	bne.w	80023c0 <mouseDriver_sendMsg.constprop.1+0x1a78>
 8000a0e:	f89d 6261 	ldrb.w	r6, [sp, #609]	; 0x261
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	f041 84d8 	bne.w	80023c8 <mouseDriver_sendMsg.constprop.1+0x1a80>
 8000a18:	2501      	movs	r5, #1
 8000a1a:	46ae      	mov	lr, r5
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
	msg->sysid = system_id;
 8000a1c:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000a1e:	f88d e257 	strb.w	lr, [sp, #599]	; 0x257
	msg->sysid = system_id;
 8000a22:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8000a26:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
	msg->incompat_flags = 0;
	if (signing) {
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	f001 84d0 	beq.w	80023d0 <mouseDriver_sendMsg.constprop.1+0x1a88>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000a30:	2101      	movs	r1, #1
 8000a32:	f88d 1258 	strb.w	r1, [sp, #600]	; 0x258
 8000a36:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 8000a3a:	f04f 0808 	mov.w	r8, #8
 8000a3e:	f04f 0c0a 	mov.w	ip, #10
 8000a42:	e013      	b.n	8000a6c <mouseDriver_sendMsg.constprop.1+0x124>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000a44:	f640 41fe 	movw	r1, #3326	; 0xcfe
	msg->compid = component_id;
 8000a48:	250c      	movs	r5, #12
	msg->sysid = system_id;
 8000a4a:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8000a4e:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000a52:	f8ad 1256 	strh.w	r1, [sp, #598]	; 0x256
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000a56:	46ae      	mov	lr, r5
	msg->compid = component_id;
 8000a58:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 8000a5c:	260b      	movs	r6, #11
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000a5e:	f04f 0c06 	mov.w	ip, #6
	msg->incompat_flags = 0;
 8000a62:	2200      	movs	r2, #0
 8000a64:	4610      	mov	r0, r2
 8000a66:	f88d 2258 	strb.w	r2, [sp, #600]	; 0x258
 8000a6a:	4611      	mov	r1, r2
	}
	msg->compat_flags = 0;
	msg->seq = status->current_tx_seq;
 8000a6c:	79a2      	ldrb	r2, [r4, #6]
 8000a6e:	f88d 225a 	strb.w	r2, [sp, #602]	; 0x25a
	status->current_tx_seq = status->current_tx_seq + 1;
 8000a72:	1c57      	adds	r7, r2, #1
 8000a74:	71a7      	strb	r7, [r4, #6]
	msg->compat_flags = 0;
 8000a76:	2700      	movs	r7, #0

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000a78:	f88d 9048 	strb.w	r9, [sp, #72]	; 0x48
	buf[1] = msg->len;
 8000a7c:	f88d e049 	strb.w	lr, [sp, #73]	; 0x49
	msg->compat_flags = 0;
 8000a80:	f88d 7259 	strb.w	r7, [sp, #601]	; 0x259
	if (mavlink1) {
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80b6 	beq.w	8000bf6 <mouseDriver_sendMsg.constprop.1+0x2ae>
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
 8000a8a:	2304      	movs	r3, #4
		buf[2] = msg->seq;
 8000a8c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		buf[3] = msg->sysid;
 8000a90:	f88d 704b 	strb.w	r7, [sp, #75]	; 0x4b
		buf[4] = msg->compid;
 8000a94:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
		buf[5] = msg->msgid & 0xFF;
 8000a98:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8000a9c:	f108 0802 	add.w	r8, r8, #2
 8000aa0:	ab12      	add	r3, sp, #72	; 0x48
 8000aa2:	4498      	add	r8, r3
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8000aa4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8000aa8:	f10d 0e49 	add.w	lr, sp, #73	; 0x49
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000aac:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8000ab0:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8000ab2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000ab6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ab8:	091a      	lsrs	r2, r3, #4
 8000aba:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8000abe:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 8000ac2:	45c6      	cmp	lr, r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ac4:	ea87 07c3 	eor.w	r7, r7, r3, lsl #3
	while (length--) {
 8000ac8:	d1f0      	bne.n	8000aac <mouseDriver_sendMsg.constprop.1+0x164>
 8000aca:	360d      	adds	r6, #13
 8000acc:	ab95      	add	r3, sp, #596	; 0x254
 8000ace:	441e      	add	r6, r3
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000ad0:	a998      	add	r1, sp, #608	; 0x260
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ad6:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8000ad8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000adc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ade:	091a      	lsrs	r2, r3, #4
 8000ae0:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8000ae4:	ea87 2703 	eor.w	r7, r7, r3, lsl #8
 8000ae8:	ea87 03c3 	eor.w	r3, r7, r3, lsl #3
 8000aec:	b21b      	sxth	r3, r3
	while (length--) {
 8000aee:	42b1      	cmp	r1, r6
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000af0:	b29f      	uxth	r7, r3
	while (length--) {
 8000af2:	d1ee      	bne.n	8000ad2 <mouseDriver_sendMsg.constprop.1+0x18a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000af4:	f083 0170 	eor.w	r1, r3, #112	; 0x70
        tmp ^= (tmp<<4);
 8000af8:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8000afc:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000afe:	0a3b      	lsrs	r3, r7, #8
 8000b00:	ea83 1311 	eor.w	r3, r3, r1, lsr #4
 8000b04:	ea83 2301 	eor.w	r3, r3, r1, lsl #8
 8000b08:	ea83 01c1 	eor.w	r1, r3, r1, lsl #3
 8000b0c:	b209      	sxth	r1, r1
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
	crc_accumulate(crc_extra, &checksum);
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000b0e:	aa98      	add	r2, sp, #608	; 0x260
 8000b10:	b2cb      	uxtb	r3, r1
 8000b12:	5553      	strb	r3, [r2, r5]
 8000b14:	b289      	uxth	r1, r1
 8000b16:	9304      	str	r3, [sp, #16]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000b18:	f20d 2261 	addw	r2, sp, #609	; 0x261
 8000b1c:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8000b20:	0a0d      	lsrs	r5, r1, #8
 8000b22:	54d5      	strb	r5, [r2, r3]
 8000b24:	9505      	str	r5, [sp, #20]

	msg->checksum = checksum;
 8000b26:	f8ad 1254 	strh.w	r1, [sp, #596]	; 0x254

	if (signing) {
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <mouseDriver_sendMsg.constprop.1+0x308>
 8000b30:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8000b34:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b38:	9b97      	ldr	r3, [sp, #604]	; 0x25c
{
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000b3a:	f89d 2256 	ldrb.w	r2, [sp, #598]	; 0x256
 8000b3e:	f89d e25a 	ldrb.w	lr, [sp, #602]	; 0x25a
 8000b42:	f89d c25b 	ldrb.w	ip, [sp, #603]	; 0x25b
 8000b46:	f89d 725c 	ldrb.w	r7, [sp, #604]	; 0x25c
 8000b4a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000b4e:	2afe      	cmp	r2, #254	; 0xfe
 8000b50:	b2de      	uxtb	r6, r3
 8000b52:	f000 82f5 	beq.w	8001140 <mouseDriver_sendMsg.constprop.1+0x7f8>
	while (length > 1 && payload[length-1] == 0) {
 8000b56:	9802      	ldr	r0, [sp, #8]
 8000b58:	2801      	cmp	r0, #1
 8000b5a:	d915      	bls.n	8000b88 <mouseDriver_sendMsg.constprop.1+0x240>
 8000b5c:	f20d 215f 	addw	r1, sp, #607	; 0x25f
 8000b60:	5c09      	ldrb	r1, [r1, r0]
 8000b62:	b989      	cbnz	r1, 8000b88 <mouseDriver_sendMsg.constprop.1+0x240>
 8000b64:	1e41      	subs	r1, r0, #1
 8000b66:	b2c8      	uxtb	r0, r1
 8000b68:	4601      	mov	r1, r0
 8000b6a:	310c      	adds	r1, #12
 8000b6c:	ac95      	add	r4, sp, #596	; 0x254
 8000b6e:	4421      	add	r1, r4
 8000b70:	e005      	b.n	8000b7e <mouseDriver_sendMsg.constprop.1+0x236>
 8000b72:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b7a:	b91d      	cbnz	r5, 8000b84 <mouseDriver_sendMsg.constprop.1+0x23c>
 8000b7c:	4640      	mov	r0, r8
		length--;
 8000b7e:	b2c4      	uxtb	r4, r0
	while (length > 1 && payload[length-1] == 0) {
 8000b80:	2c01      	cmp	r4, #1
 8000b82:	d1f6      	bne.n	8000b72 <mouseDriver_sendMsg.constprop.1+0x22a>
 8000b84:	e9cd 4002 	strd	r4, r0, [sp, #8]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
		buf[0] = msg->magic;
 8000b88:	4d30      	ldr	r5, [pc, #192]	; (8000c4c <mouseDriver_sendMsg.constprop.1+0x304>)
		buf[5] = msg->sysid;
		buf[6] = msg->compid;
		buf[7] = msg->msgid & 0xFF;
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000b8a:	f8dd a00c 	ldr.w	sl, [sp, #12]
		buf[2] = msg->incompat_flags;
 8000b8e:	f89d 4258 	ldrb.w	r4, [sp, #600]	; 0x258
		buf[3] = msg->compat_flags;
 8000b92:	f89d 8259 	ldrb.w	r8, [sp, #601]	; 0x259
		buf[0] = msg->magic;
 8000b96:	702a      	strb	r2, [r5, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000b98:	ea4f 2923 	mov.w	r9, r3, asr #8
		buf[1] = length;
 8000b9c:	9a02      	ldr	r2, [sp, #8]
 8000b9e:	706a      	strb	r2, [r5, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000ba0:	141b      	asrs	r3, r3, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000ba2:	a998      	add	r1, sp, #608	; 0x260
 8000ba4:	4652      	mov	r2, sl
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000ba6:	726b      	strb	r3, [r5, #9]
		buf[4] = msg->seq;
 8000ba8:	f885 e004 	strb.w	lr, [r5, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000bac:	f105 000a 	add.w	r0, r5, #10
		buf[5] = msg->sysid;
 8000bb0:	f885 c005 	strb.w	ip, [r5, #5]
		buf[6] = msg->compid;
 8000bb4:	71af      	strb	r7, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8000bb6:	71ee      	strb	r6, [r5, #7]
		buf[3] = msg->compat_flags;
 8000bb8:	f885 8003 	strb.w	r8, [r5, #3]
		buf[2] = msg->incompat_flags;
 8000bbc:	70ac      	strb	r4, [r5, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000bbe:	f885 9008 	strb.w	r9, [r5, #8]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000bc2:	f00d fafe 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	330a      	adds	r3, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8000bca:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 8000bce:	eb05 0203 	add.w	r2, r5, r3
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8000bd2:	d122      	bne.n	8000c1a <mouseDriver_sendMsg.constprop.1+0x2d2>
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8000bd4:	9804      	ldr	r0, [sp, #16]
 8000bd6:	54e8      	strb	r0, [r5, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8000bd8:	9b05      	ldr	r3, [sp, #20]
 8000bda:	7053      	strb	r3, [r2, #1]
 8000bdc:	2409      	movs	r4, #9
	if (signature_len > 0) {
		memcpy(&ck[2], msg->signature, signature_len);
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8000bde:	4421      	add	r1, r4
 8000be0:	9b02      	ldr	r3, [sp, #8]
			main_transmit_buffer(outBuffer, msg_size);
			break;
		case MAVLINK_MSG_ID_MOTOR_SETPOINT:
			mavlink_msg_motor_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_motor_signal);
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
			main_transmit_buffer(outBuffer, msg_size);
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <mouseDriver_sendMsg.constprop.1+0x304>)
 8000be4:	3103      	adds	r1, #3
 8000be6:	4419      	add	r1, r3
 8000be8:	b289      	uxth	r1, r1
			main_transmit_buffer(outBuffer, msg_size);
			break;
		default:
			break;
	}
}
 8000bea:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 8000bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			main_transmit_buffer(outBuffer, msg_size);
 8000bf2:	f008 bb85 	b.w	8009300 <main_transmit_buffer>
		buf[7] = msg->msgid & 0xFF;
 8000bf6:	2704      	movs	r7, #4
		buf[2] = msg->incompat_flags;
 8000bf8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
		buf[3] = msg->compat_flags;
 8000bfc:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		buf[4] = msg->seq;
 8000c00:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
		buf[5] = msg->sysid;
 8000c04:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
		buf[6] = msg->compid;
 8000c08:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000c0c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000c10:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
		buf[7] = msg->msgid & 0xFF;
 8000c14:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
 8000c18:	e740      	b.n	8000a9c <mouseDriver_sendMsg.constprop.1+0x154>
		memcpy(&ck[2], msg->signature, signature_len);
 8000c1a:	a9de      	add	r1, sp, #888	; 0x378
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8000c1c:	9804      	ldr	r0, [sp, #16]
		memcpy(&ck[2], msg->signature, signature_len);
 8000c1e:	f851 6d0e 	ldr.w	r6, [r1, #-14]!
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8000c22:	54e8      	strb	r0, [r5, r3]
		memcpy(&ck[2], msg->signature, signature_len);
 8000c24:	688c      	ldr	r4, [r1, #8]
 8000c26:	684d      	ldr	r5, [r1, #4]
 8000c28:	7b08      	ldrb	r0, [r1, #12]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8000c2a:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ck[2], msg->signature, signature_len);
 8000c2c:	f8c2 400a 	str.w	r4, [r2, #10]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8000c30:	7053      	strb	r3, [r2, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8000c32:	f8c2 6002 	str.w	r6, [r2, #2]
 8000c36:	210d      	movs	r1, #13
 8000c38:	f8c2 5006 	str.w	r5, [r2, #6]
 8000c3c:	7390      	strb	r0, [r2, #14]
 8000c3e:	2409      	movs	r4, #9
 8000c40:	e7cd      	b.n	8000bde <mouseDriver_sendMsg.constprop.1+0x296>
 8000c42:	bf00      	nop
 8000c44:	20000030 	.word	0x20000030
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	200000b8 	.word	0x200000b8
		mavlink_sign_packet(status->signing,
 8000c50:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8000c54:	6926      	ldr	r6, [r4, #16]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000c56:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f43f af6c 	beq.w	8000b38 <mouseDriver_sendMsg.constprop.1+0x1f0>
 8000c60:	7833      	ldrb	r3, [r6, #0]
 8000c62:	07db      	lsls	r3, r3, #31
 8000c64:	f57f af68 	bpl.w	8000b38 <mouseDriver_sendMsg.constprop.1+0x1f0>
	tstamp.t64 = signing->timestamp;
 8000c68:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
	signing->timestamp++;
 8000c6c:	1c62      	adds	r2, r4, #1
	tstamp.t64 = signing->timestamp;
 8000c6e:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	signing->timestamp++;
 8000c72:	f145 0300 	adc.w	r3, r5, #0
	memcpy(&signature[1], tstamp.t8, 6);
 8000c76:	f8cd 436b 	str.w	r4, [sp, #875]	; 0x36b
    D = 0xa54ff53a;
 8000c7a:	4d1e      	ldr	r5, [pc, #120]	; (8000cf4 <mouseDriver_sendMsg.constprop.1+0x3ac>)
 8000c7c:	4c1e      	ldr	r4, [pc, #120]	; (8000cf8 <mouseDriver_sendMsg.constprop.1+0x3b0>)
	mavlink_sha256_update(&ctx, header, header_len);
 8000c7e:	f8cd c018 	str.w	ip, [sp, #24]
 8000c82:	e9cd 543e 	strd	r5, r4, [sp, #248]	; 0xf8
    E = 0x510e527f;
 8000c86:	4c1d      	ldr	r4, [pc, #116]	; (8000cfc <mouseDriver_sendMsg.constprop.1+0x3b4>)
 8000c88:	9440      	str	r4, [sp, #256]	; 0x100
	signing->timestamp++;
 8000c8a:	e9c6 2302 	strd	r2, r3, [r6, #8]
    F = 0x9b05688c;
 8000c8e:	4c1c      	ldr	r4, [pc, #112]	; (8000d00 <mouseDriver_sendMsg.constprop.1+0x3b8>)
 8000c90:	9441      	str	r4, [sp, #260]	; 0x104
	memcpy(m->u.save_bytes + offset, p, l);
 8000c92:	4637      	mov	r7, r6
    G = 0x1f83d9ab;
 8000c94:	4c1b      	ldr	r4, [pc, #108]	; (8000d04 <mouseDriver_sendMsg.constprop.1+0x3bc>)
	memcpy(m->u.save_bytes + offset, p, l);
 8000c96:	f857 0f10 	ldr.w	r0, [r7, #16]!
    G = 0x1f83d9ab;
 8000c9a:	9442      	str	r4, [sp, #264]	; 0x108
    H = 0x5be0cd19;
 8000c9c:	f104 5474 	add.w	r4, r4, #1023410176	; 0x3d000000
    B = 0xbb67ae85;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <mouseDriver_sendMsg.constprop.1+0x3c0>)
	memcpy(m->u.save_bytes + offset, p, l);
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	68ba      	ldr	r2, [r7, #8]
    B = 0xbb67ae85;
 8000ca6:	933d      	str	r3, [sp, #244]	; 0xf4
    H = 0x5be0cd19;
 8000ca8:	f5a4 0423 	sub.w	r4, r4, #10682368	; 0xa30000
	memcpy(m->u.save_bytes + offset, p, l);
 8000cac:	68fb      	ldr	r3, [r7, #12]
	signature[0] = signing->link_id;
 8000cae:	7876      	ldrb	r6, [r6, #1]
	memcpy(&signature[1], tstamp.t8, 6);
 8000cb0:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8000cb4:	f8ad 536f 	strh.w	r5, [sp, #879]	; 0x36f
    H = 0x5be0cd19;
 8000cb8:	f6a4 4492 	subw	r4, r4, #3218	; 0xc92
 8000cbc:	9443      	str	r4, [sp, #268]	; 0x10c
	memcpy(m->u.save_bytes + offset, p, l);
 8000cbe:	ac44      	add	r4, sp, #272	; 0x110
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	signature[0] = signing->link_id;
 8000cc2:	f88d 636a 	strb.w	r6, [sp, #874]	; 0x36a
 8000cc6:	6938      	ldr	r0, [r7, #16]
 8000cc8:	6979      	ldr	r1, [r7, #20]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
    A = 0x6a09e667;
 8000cce:	4e0f      	ldr	r6, [pc, #60]	; (8000d0c <mouseDriver_sendMsg.constprop.1+0x3c4>)
    const unsigned char *p = (const unsigned char *)v;
 8000cd0:	af12      	add	r7, sp, #72	; 0x48
    m->sz[0] += len * 8;
 8000cd2:	f44f 7580 	mov.w	r5, #256	; 0x100
    const unsigned char *p = (const unsigned char *)v;
 8000cd6:	9707      	str	r7, [sp, #28]
    m->sz[0] += len * 8;
 8000cd8:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
    A = 0x6a09e667;
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9cd 763b 	strd	r7, r6, [sp, #236]	; 0xec
 8000ce2:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
	memcpy(m->u.save_bytes + offset, p, l);
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	data[i] = in[i];
 8000ce8:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    offset = (old_sz / 8) % 64;
 8000cec:	2420      	movs	r4, #32
    m->sz[0] += len * 8;
 8000cee:	953a      	str	r5, [sp, #232]	; 0xe8
 8000cf0:	e012      	b.n	8000d18 <mouseDriver_sendMsg.constprop.1+0x3d0>
 8000cf2:	bf00      	nop
 8000cf4:	3c6ef372 	.word	0x3c6ef372
 8000cf8:	a54ff53a 	.word	0xa54ff53a
 8000cfc:	510e527f 	.word	0x510e527f
 8000d00:	9b05688c 	.word	0x9b05688c
 8000d04:	1f83d9ab 	.word	0x1f83d9ab
 8000d08:	bb67ae85 	.word	0xbb67ae85
 8000d0c:	6a09e667 	.word	0x6a09e667
    while(len > 0){
 8000d10:	9b06      	ldr	r3, [sp, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 822f 	beq.w	8001176 <mouseDriver_sendMsg.constprop.1+0x82e>
 8000d18:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8000d1a:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8000d1c:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	bf28      	it	cs
 8000d24:	462b      	movcs	r3, r5
	len -= l;
 8000d26:	1aed      	subs	r5, r5, r3
 8000d28:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8000d2a:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8000d2c:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8000d2e:	4420      	add	r0, r4
	p += l;
 8000d30:	441d      	add	r5, r3
	offset += l;
 8000d32:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8000d34:	461a      	mov	r2, r3
 8000d36:	4631      	mov	r1, r6
	p += l;
 8000d38:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8000d3a:	f00d fa42 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8000d3e:	2c40      	cmp	r4, #64	; 0x40
 8000d40:	d1e6      	bne.n	8000d10 <mouseDriver_sendMsg.constprop.1+0x3c8>
                p2[2] = p1[1];
 8000d42:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8000d46:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8000d4a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8000d4c:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8000d50:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8000d52:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8000d56:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8000d58:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8000d5c:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8000d60:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8000d64:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8000d68:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8000d6c:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8000d70:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8000d74:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8000d78:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8000d7c:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8000d80:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8000d84:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8000d88:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8000d8a:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8000d8e:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8000d92:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8000d96:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8000d9a:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8000d9e:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8000da2:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8000da6:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8000daa:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8000dae:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8000db2:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8000db6:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8000dba:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8000dbe:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8000dc2:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8000dc6:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8000dca:	9100      	str	r1, [sp, #0]
 8000dcc:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8000dd0:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8000dd4:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8000dd8:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8000ddc:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8000de0:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8000de4:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8000de8:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8000dec:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8000df0:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8000df4:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8000df8:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8000dfc:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8000e00:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8000e02:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8000e06:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8000e08:	f88a 2010 	strb.w	r2, [sl, #16]
 8000e0c:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8000e10:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8000e14:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8000e18:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8000e1c:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8000e20:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8000e24:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8000e28:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8000e2c:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8000e30:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8000e34:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8000e38:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8000e3c:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8000e3e:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8000e42:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8000e46:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8000e4a:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8000e4e:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8000e52:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8000e56:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8000e5a:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8000e5e:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8000e62:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8000e66:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8000e6a:	f88a 201e 	strb.w	r2, [sl, #30]
 8000e6e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8000e72:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8000e76:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8000e7a:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8000e7e:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8000e82:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8000e84:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8000e86:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8000e8a:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8000e8e:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8000e92:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8000e96:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8000e9a:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8000e9e:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8000ea2:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8000ea6:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8000eaa:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8000eae:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8000eb2:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8000eb6:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8000eba:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8000ebe:	9c00      	ldr	r4, [sp, #0]
 8000ec0:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8000ec4:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8000ec8:	9c01      	ldr	r4, [sp, #4]
 8000eca:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8000ece:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8000ed2:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8000ed6:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8000eda:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8000ede:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8000ee2:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8000ee6:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8000eea:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8000eee:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8000ef2:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8000ef6:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8000efa:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8000efe:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8000f00:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8000f02:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8000f06:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8000f0a:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8000f0e:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8000f12:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8000f16:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8000f1a:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8000f1e:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8000f22:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8000f26:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8000f2a:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8000f2e:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8000f32:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8000f36:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8000f3a:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8000f3e:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8000f40:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8000f44:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8000f48:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8000f4c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8000f4e:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8000f52:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8000f54:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8000f56:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8000f5a:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8000f5e:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8000f62:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8000f66:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8000f6a:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8000f6e:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8000f72:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8000f76:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8000f7a:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8000f7e:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8000f82:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8000f86:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8000f8a:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8000f8e:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8000f92:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8000f96:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8000f9a:	f8da 7000 	ldr.w	r7, [sl]
 8000f9e:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8000fa2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000fa6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8000faa:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8000fae:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8000fb0:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8000fb2:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8000fb4:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8000fb6:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8000fb8:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8000fba:	9940      	ldr	r1, [sp, #256]	; 0x100
 8000fbc:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8000fbe:	9941      	ldr	r1, [sp, #260]	; 0x104
 8000fc0:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8000fc2:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8000fc6:	9942      	ldr	r1, [sp, #264]	; 0x108
 8000fc8:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8000fca:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8000fcc:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8000fce:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8000fd2:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8000fd4:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000fd8:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8000fdc:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8000fe0:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8000fea:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000fee:	ea4f 4573 	mov.w	r5, r3, ror #17
 8000ff2:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8000ff6:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8000ffa:	440b      	add	r3, r1
 8000ffc:	4422      	add	r2, r4
 8000ffe:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8001002:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8001006:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 800100a:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 800100e:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8001012:	4403      	add	r3, r0
 8001014:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8001018:	f10c 0c02 	add.w	ip, ip, #2
 800101c:	4414      	add	r4, r2
 800101e:	440b      	add	r3, r1
 8001020:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001024:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8001028:	f106 0608 	add.w	r6, r6, #8
 800102c:	d1d4      	bne.n	8000fd8 <mouseDriver_sendMsg.constprop.1+0x690>
 800102e:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8001032:	ea4f 4271 	mov.w	r2, r1, ror #17
 8001036:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800103a:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800103e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001042:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8001046:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800104a:	ea4f 43f4 	mov.w	r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800104e:	4408      	add	r0, r1
 8001050:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001054:	ea83 4374 	eor.w	r3, r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8001058:	ea4f 15f6 	mov.w	r5, r6, ror #7
 800105c:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8001060:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8001064:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001066:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800106a:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 800106e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8001072:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8001076:	4410      	add	r0, r2
 8001078:	440b      	add	r3, r1
 800107a:	4473      	add	r3, lr
 800107c:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800107e:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8001082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001084:	9300      	str	r3, [sp, #0]
    BB = B;
 8001086:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 800108a:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 800108c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 800108e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8001090:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8001094:	2600      	movs	r6, #0
 8001096:	e005      	b.n	80010a4 <mouseDriver_sendMsg.constprop.1+0x75c>
 8001098:	4667      	mov	r7, ip
 800109a:	46c6      	mov	lr, r8
 800109c:	46ac      	mov	ip, r5
 800109e:	46a0      	mov	r8, r4
	AA = T1 + T2;
 80010a0:	4615      	mov	r5, r2
	EE = DD + T1;
 80010a2:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80010a4:	ea2e 0004 	bic.w	r0, lr, r4
 80010a8:	ea04 0208 	and.w	r2, r4, r8
 80010ac:	4042      	eors	r2, r0
 80010ae:	483d      	ldr	r0, [pc, #244]	; (80011a4 <mouseDriver_sendMsg.constprop.1+0x85c>)
 80010b0:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80010b4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80010b8:	9001      	str	r0, [sp, #4]
 80010ba:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80010be:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80010c2:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80010c6:	440a      	add	r2, r1
 80010c8:	4402      	add	r2, r0
 80010ca:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80010cc:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80010d0:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80010d2:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80010d6:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80010d8:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 80010dc:	9b00      	ldr	r3, [sp, #0]
 80010de:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80010e0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80010e4:	ea0b 0b05 	and.w	fp, fp, r5
 80010e8:	ea8b 0b00 	eor.w	fp, fp, r0
 80010ec:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80010f0:	3601      	adds	r6, #1
	EE = DD + T1;
 80010f2:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80010f4:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80010f6:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80010f8:	4618      	mov	r0, r3
	AA = T1 + T2;
 80010fa:	440a      	add	r2, r1
 80010fc:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 80010fe:	d1cb      	bne.n	8001098 <mouseDriver_sendMsg.constprop.1+0x750>
 8001100:	4611      	mov	r1, r2
 8001102:	4602      	mov	r2, r0
    D += DD;
 8001104:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8001106:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8001108:	4438      	add	r0, r7
 800110a:	4607      	mov	r7, r0
    E += EE;
 800110c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800110e:	4410      	add	r0, r2
 8001110:	4602      	mov	r2, r0
    F += FF;
 8001112:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8001114:	9240      	str	r2, [sp, #256]	; 0x100
    F += FF;
 8001116:	4404      	add	r4, r0
    A += AA;
 8001118:	440b      	add	r3, r1
    G += GG;
 800111a:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 800111c:	9441      	str	r4, [sp, #260]	; 0x104
    A += AA;
 800111e:	4619      	mov	r1, r3
    B += BB;
 8001120:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 8001122:	4440      	add	r0, r8
    B += BB;
 8001124:	441d      	add	r5, r3
    G += GG;
 8001126:	4606      	mov	r6, r0
    C += CC;
 8001128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 800112a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 800112c:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 800112e:	4463      	add	r3, ip
    H += HH;
 8001130:	4470      	add	r0, lr
    B += BB;
 8001132:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8001136:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 800113a:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 800113c:	2400      	movs	r4, #0
 800113e:	e5e7      	b.n	8000d10 <mouseDriver_sendMsg.constprop.1+0x3c8>
		buf[0] = msg->magic;
 8001140:	4c19      	ldr	r4, [pc, #100]	; (80011a8 <mouseDriver_sendMsg.constprop.1+0x860>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001142:	9d02      	ldr	r5, [sp, #8]
		buf[0] = msg->magic;
 8001144:	7022      	strb	r2, [r4, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001146:	a998      	add	r1, sp, #608	; 0x260
 8001148:	1da0      	adds	r0, r4, #6
 800114a:	462a      	mov	r2, r5
		buf[1] = length;
 800114c:	7065      	strb	r5, [r4, #1]
		buf[2] = msg->seq;
 800114e:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 8001152:	f884 c003 	strb.w	ip, [r4, #3]
		buf[4] = msg->compid;
 8001156:	7127      	strb	r7, [r4, #4]
		buf[5] = msg->msgid & 0xFF;
 8001158:	7166      	strb	r6, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800115a:	f00d f832 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800115e:	462b      	mov	r3, r5
 8001160:	3306      	adds	r3, #6
 8001162:	18e2      	adds	r2, r4, r3
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001164:	9904      	ldr	r1, [sp, #16]
 8001166:	54e1      	strb	r1, [r4, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001168:	9b05      	ldr	r3, [sp, #20]
 800116a:	7053      	strb	r3, [r2, #1]
 800116c:	2100      	movs	r1, #0
 800116e:	2405      	movs	r4, #5
 8001170:	e535      	b.n	8000bde <mouseDriver_sendMsg.constprop.1+0x296>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001172:	4618      	mov	r0, r3
 8001174:	e416      	b.n	80009a4 <mouseDriver_sendMsg.constprop.1+0x5c>
    uint32_t old_sz = m->sz[0];
 8001176:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    m->sz[0] += len * 8;
 8001178:	9b02      	ldr	r3, [sp, #8]
 800117a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
    if (m->sz[0] < old_sz)
 800117e:	42a5      	cmp	r5, r4
    m->sz[0] += len * 8;
 8001180:	943a      	str	r4, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8001182:	d903      	bls.n	800118c <mouseDriver_sendMsg.constprop.1+0x844>
	++m->sz[1];
 8001184:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8001186:	3301      	adds	r3, #1
 8001188:	933b      	str	r3, [sp, #236]	; 0xec
 800118a:	9b02      	ldr	r3, [sp, #8]
    offset = (old_sz / 8) % 64;
 800118c:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    while(len > 0){
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8226 	beq.w	80015e2 <mouseDriver_sendMsg.constprop.1+0xc9a>
 8001196:	9306      	str	r3, [sp, #24]
    const unsigned char *p = (const unsigned char *)v;
 8001198:	ab98      	add	r3, sp, #608	; 0x260
 800119a:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 800119c:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 80011a0:	e008      	b.n	80011b4 <mouseDriver_sendMsg.constprop.1+0x86c>
 80011a2:	bf00      	nop
 80011a4:	0800e200 	.word	0x0800e200
 80011a8:	200000b8 	.word	0x200000b8
    while(len > 0){
 80011ac:	9b06      	ldr	r3, [sp, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8216 	beq.w	80015e0 <mouseDriver_sendMsg.constprop.1+0xc98>
 80011b4:	9c06      	ldr	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80011b6:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 80011b8:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
 80011bc:	42a3      	cmp	r3, r4
 80011be:	bf28      	it	cs
 80011c0:	4623      	movcs	r3, r4
	len -= l;
 80011c2:	1ae4      	subs	r4, r4, r3
 80011c4:	9406      	str	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80011c6:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 80011c8:	4634      	mov	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80011ca:	4428      	add	r0, r5
	p += l;
 80011cc:	441c      	add	r4, r3
	offset += l;
 80011ce:	441d      	add	r5, r3
	memcpy(m->u.save_bytes + offset, p, l);
 80011d0:	461a      	mov	r2, r3
 80011d2:	4631      	mov	r1, r6
	p += l;
 80011d4:	9407      	str	r4, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 80011d6:	f00c fff4 	bl	800e1c2 <memcpy>
	if(offset == 64){
 80011da:	2d40      	cmp	r5, #64	; 0x40
 80011dc:	d1e6      	bne.n	80011ac <mouseDriver_sendMsg.constprop.1+0x864>
                p2[2] = p1[1];
 80011de:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 80011e2:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 80011e6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80011e8:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 80011ec:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80011ee:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 80011f2:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 80011f4:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80011f8:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80011fc:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8001200:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8001204:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8001208:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 800120c:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8001210:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8001214:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8001218:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 800121c:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8001220:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8001224:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8001226:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 800122a:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 800122e:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8001232:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8001236:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 800123a:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 800123e:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8001242:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8001246:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 800124a:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 800124e:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8001252:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8001256:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 800125a:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 800125e:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8001262:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8001266:	9100      	str	r1, [sp, #0]
 8001268:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 800126c:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8001270:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8001274:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8001278:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 800127c:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8001280:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8001284:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8001288:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 800128c:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8001290:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8001294:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8001298:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 800129c:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800129e:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 80012a2:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 80012a4:	f88a 2010 	strb.w	r2, [sl, #16]
 80012a8:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 80012ac:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 80012b0:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 80012b4:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 80012b8:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 80012bc:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 80012c0:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 80012c4:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 80012c8:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 80012cc:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 80012d0:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 80012d4:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 80012d8:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 80012da:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 80012de:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 80012e2:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 80012e6:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 80012ea:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 80012ee:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80012f2:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80012f6:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80012fa:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80012fe:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8001302:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8001306:	f88a 201e 	strb.w	r2, [sl, #30]
 800130a:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 800130e:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8001312:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8001316:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 800131a:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 800131e:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001320:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001322:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8001326:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 800132a:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 800132e:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8001332:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8001336:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 800133a:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 800133e:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8001342:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8001346:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 800134a:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 800134e:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8001352:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8001356:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 800135a:	9c00      	ldr	r4, [sp, #0]
 800135c:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8001360:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8001364:	9c01      	ldr	r4, [sp, #4]
 8001366:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 800136a:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 800136e:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8001372:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8001376:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 800137a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 800137e:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8001382:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8001386:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 800138a:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 800138e:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8001392:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8001396:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 800139a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800139c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800139e:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 80013a2:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 80013a6:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 80013aa:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 80013ae:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 80013b2:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 80013b6:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 80013ba:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 80013be:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 80013c2:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 80013c6:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 80013ca:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 80013ce:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 80013d2:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 80013d6:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 80013da:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80013dc:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 80013e0:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 80013e4:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 80013e8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 80013ea:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 80013ee:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80013f0:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80013f2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80013f6:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80013fa:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80013fe:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8001402:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8001406:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800140a:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800140e:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8001412:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8001416:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 800141a:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 800141e:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8001422:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8001426:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 800142a:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 800142e:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8001432:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8001436:	f8da 7000 	ldr.w	r7, [sl]
 800143a:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800143e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001442:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8001446:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 800144a:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800144c:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 800144e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8001450:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8001452:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8001454:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8001456:	9940      	ldr	r1, [sp, #256]	; 0x100
 8001458:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 800145a:	9941      	ldr	r1, [sp, #260]	; 0x104
 800145c:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 800145e:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8001462:	9942      	ldr	r1, [sp, #264]	; 0x108
 8001464:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8001466:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8001468:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 800146a:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 800146e:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8001470:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001474:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8001478:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 800147c:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001480:	443a      	add	r2, r7
 8001482:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8001486:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800148a:	ea4f 4573 	mov.w	r5, r3, ror #17
 800148e:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8001492:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001496:	440b      	add	r3, r1
 8001498:	4422      	add	r2, r4
 800149a:	ea4f 11f7 	mov.w	r1, r7, ror #7
 800149e:	ea4f 44b0 	mov.w	r4, r0, ror #18
 80014a2:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 80014a6:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 80014aa:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 80014ae:	4403      	add	r3, r0
 80014b0:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 80014b4:	f10c 0c02 	add.w	ip, ip, #2
 80014b8:	4414      	add	r4, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014c0:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 80014c4:	f106 0608 	add.w	r6, r6, #8
 80014c8:	d1d4      	bne.n	8001474 <mouseDriver_sendMsg.constprop.1+0xb2c>
 80014ca:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 80014ce:	ea4f 4271 	mov.w	r2, r1, ror #17
 80014d2:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80014d6:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014da:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80014de:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 80014e2:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014e6:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 80014ea:	4408      	add	r0, r1
 80014ec:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014f0:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80014f4:	ea4f 15f6 	mov.w	r5, r6, ror #7
 80014f8:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80014fc:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8001500:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001502:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001506:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 800150a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 800150e:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8001512:	4410      	add	r0, r2
 8001514:	440b      	add	r3, r1
 8001516:	4473      	add	r3, lr
 8001518:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800151a:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 800151e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001520:	9300      	str	r3, [sp, #0]
    BB = B;
 8001522:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8001526:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8001528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 800152a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 800152c:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8001530:	2600      	movs	r6, #0
 8001532:	e005      	b.n	8001540 <mouseDriver_sendMsg.constprop.1+0xbf8>
 8001534:	4667      	mov	r7, ip
 8001536:	46c6      	mov	lr, r8
 8001538:	46ac      	mov	ip, r5
 800153a:	46a0      	mov	r8, r4
	AA = T1 + T2;
 800153c:	4615      	mov	r5, r2
	EE = DD + T1;
 800153e:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001540:	ea2e 0004 	bic.w	r0, lr, r4
 8001544:	ea08 0204 	and.w	r2, r8, r4
 8001548:	4042      	eors	r2, r0
 800154a:	4831      	ldr	r0, [pc, #196]	; (8001610 <mouseDriver_sendMsg.constprop.1+0xcc8>)
 800154c:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8001550:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8001554:	9001      	str	r0, [sp, #4]
 8001556:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800155a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 800155e:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8001562:	440a      	add	r2, r1
 8001564:	4402      	add	r2, r0
 8001566:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001568:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800156c:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800156e:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001572:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001574:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800157c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8001580:	ea0b 0b05 	and.w	fp, fp, r5
 8001584:	ea8b 0b00 	eor.w	fp, fp, r0
 8001588:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800158c:	3601      	adds	r6, #1
	EE = DD + T1;
 800158e:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001590:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8001592:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8001594:	4618      	mov	r0, r3
	AA = T1 + T2;
 8001596:	440a      	add	r2, r1
 8001598:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 800159a:	d1cb      	bne.n	8001534 <mouseDriver_sendMsg.constprop.1+0xbec>
 800159c:	4611      	mov	r1, r2
 800159e:	4602      	mov	r2, r0
    D += DD;
 80015a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 80015a2:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 80015a4:	4438      	add	r0, r7
 80015a6:	4607      	mov	r7, r0
    E += EE;
 80015a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80015aa:	4410      	add	r0, r2
 80015ac:	4602      	mov	r2, r0
    F += FF;
 80015ae:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 80015b0:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 80015b2:	440b      	add	r3, r1
    F += FF;
 80015b4:	4420      	add	r0, r4
    A += AA;
 80015b6:	4619      	mov	r1, r3
    F += FF;
 80015b8:	4604      	mov	r4, r0
    B += BB;
 80015ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 80015bc:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 80015be:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 80015c0:	442b      	add	r3, r5
    G += GG;
 80015c2:	4440      	add	r0, r8
    B += BB;
 80015c4:	461d      	mov	r5, r3
    G += GG;
 80015c6:	4606      	mov	r6, r0
    C += CC;
 80015c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 80015ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 80015cc:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 80015ce:	4463      	add	r3, ip
    H += HH;
 80015d0:	4470      	add	r0, lr
    B += BB;
 80015d2:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 80015d6:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 80015da:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 80015dc:	2500      	movs	r5, #0
 80015de:	e5e5      	b.n	80011ac <mouseDriver_sendMsg.constprop.1+0x864>
 80015e0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80015e2:	2310      	movs	r3, #16
 80015e4:	18e3      	adds	r3, r4, r3
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	bf28      	it	cs
 80015ec:	2201      	movcs	r2, #1
    m->sz[0] += len * 8;
 80015ee:	933a      	str	r3, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 80015f0:	b112      	cbz	r2, 80015f8 <mouseDriver_sendMsg.constprop.1+0xcb0>
	++m->sz[1];
 80015f2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80015f4:	3301      	adds	r3, #1
 80015f6:	933b      	str	r3, [sp, #236]	; 0xec
		mavlink_sign_packet(status->signing,
 80015f8:	9a02      	ldr	r2, [sp, #8]
 80015fa:	ab98      	add	r3, sp, #608	; 0x260
 80015fc:	4413      	add	r3, r2
 80015fe:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 8001600:	2302      	movs	r3, #2
 8001602:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8001606:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8001608:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 800160c:	e006      	b.n	800161c <mouseDriver_sendMsg.constprop.1+0xcd4>
 800160e:	bf00      	nop
 8001610:	0800e200 	.word	0x0800e200
    while(len > 0){
 8001614:	9b06      	ldr	r3, [sp, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8215 	beq.w	8001a46 <mouseDriver_sendMsg.constprop.1+0x10fe>
 800161c:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 800161e:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8001620:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8001624:	42ab      	cmp	r3, r5
 8001626:	bf28      	it	cs
 8001628:	462b      	movcs	r3, r5
	len -= l;
 800162a:	1aed      	subs	r5, r5, r3
 800162c:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 800162e:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8001630:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001632:	4420      	add	r0, r4
	p += l;
 8001634:	441d      	add	r5, r3
	offset += l;
 8001636:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8001638:	461a      	mov	r2, r3
 800163a:	4631      	mov	r1, r6
	p += l;
 800163c:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 800163e:	f00c fdc0 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8001642:	2c40      	cmp	r4, #64	; 0x40
 8001644:	d1e6      	bne.n	8001614 <mouseDriver_sendMsg.constprop.1+0xccc>
                p2[2] = p1[1];
 8001646:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 800164a:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 800164e:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001650:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8001654:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001656:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 800165a:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 800165c:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8001660:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8001664:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8001668:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 800166c:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8001670:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8001674:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8001678:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 800167c:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8001680:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8001684:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8001688:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 800168c:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 800168e:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8001692:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8001696:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 800169a:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 800169e:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 80016a2:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 80016a6:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 80016aa:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 80016ae:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 80016b2:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 80016b6:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 80016ba:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 80016be:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 80016c2:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 80016c6:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 80016ca:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 80016ce:	9100      	str	r1, [sp, #0]
 80016d0:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 80016d4:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 80016d8:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 80016dc:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 80016e0:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 80016e4:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 80016e8:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 80016ec:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 80016f0:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 80016f4:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 80016f8:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 80016fc:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8001700:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8001704:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8001706:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 800170a:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 800170c:	f88a 2010 	strb.w	r2, [sl, #16]
 8001710:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8001714:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8001718:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 800171c:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8001720:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8001724:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8001728:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 800172c:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8001730:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8001734:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8001738:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 800173c:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8001740:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8001742:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8001746:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 800174a:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 800174e:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8001752:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8001756:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 800175a:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 800175e:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8001762:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8001766:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 800176a:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 800176e:	f88a 201e 	strb.w	r2, [sl, #30]
 8001772:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8001776:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 800177a:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 800177e:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8001782:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8001786:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001788:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800178a:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 800178e:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8001792:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8001796:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 800179a:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 800179e:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80017a2:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 80017a6:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 80017aa:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 80017ae:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 80017b2:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 80017b6:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 80017ba:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 80017be:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 80017c2:	9c00      	ldr	r4, [sp, #0]
 80017c4:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 80017c8:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 80017cc:	9c01      	ldr	r4, [sp, #4]
 80017ce:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 80017d2:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 80017d6:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 80017da:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 80017de:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 80017e2:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 80017e6:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 80017ea:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 80017ee:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 80017f2:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 80017f6:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 80017fa:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 80017fe:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8001802:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001804:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001806:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 800180a:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 800180e:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8001812:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8001816:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 800181a:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800181e:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8001822:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8001826:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 800182a:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 800182e:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8001832:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8001836:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 800183a:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 800183e:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8001842:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8001844:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8001848:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 800184c:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8001850:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8001852:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8001856:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8001858:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 800185a:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 800185e:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8001862:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8001866:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800186a:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 800186e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8001872:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8001876:	e9c9 2302 	strd	r2, r3, [r9, #8]
 800187a:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 800187e:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8001882:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8001886:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800188a:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 800188e:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8001892:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8001896:	e9c9 6708 	strd	r6, r7, [r9, #32]
 800189a:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 800189e:	f8da 7000 	ldr.w	r7, [sl]
 80018a2:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 80018a6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80018aa:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80018ae:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 80018b2:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80018b4:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 80018b6:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80018b8:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 80018ba:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80018bc:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 80018be:	9940      	ldr	r1, [sp, #256]	; 0x100
 80018c0:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 80018c2:	9941      	ldr	r1, [sp, #260]	; 0x104
 80018c4:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 80018c6:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 80018ca:	9942      	ldr	r1, [sp, #264]	; 0x108
 80018cc:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 80018ce:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80018d0:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 80018d2:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 80018d6:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 80018d8:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80018dc:	ea4f 42f4 	mov.w	r2, r4, ror #19
 80018e0:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 80018e4:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80018e8:	443a      	add	r2, r7
 80018ea:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 80018ee:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80018f2:	ea4f 4573 	mov.w	r5, r3, ror #17
 80018f6:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80018fa:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80018fe:	440b      	add	r3, r1
 8001900:	4422      	add	r2, r4
 8001902:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8001906:	ea4f 44b0 	mov.w	r4, r0, ror #18
 800190a:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 800190e:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8001912:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8001916:	4403      	add	r3, r0
 8001918:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 800191c:	f10c 0c02 	add.w	ip, ip, #2
 8001920:	4414      	add	r4, r2
 8001922:	440b      	add	r3, r1
 8001924:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001928:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 800192c:	f106 0608 	add.w	r6, r6, #8
 8001930:	d1d4      	bne.n	80018dc <mouseDriver_sendMsg.constprop.1+0xf94>
 8001932:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8001936:	ea4f 4271 	mov.w	r2, r1, ror #17
 800193a:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800193e:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001942:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001946:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 800194a:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800194e:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8001952:	4408      	add	r0, r1
 8001954:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001958:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800195c:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8001960:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8001964:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8001968:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800196a:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800196e:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8001972:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8001976:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800197a:	4410      	add	r0, r2
 800197c:	440b      	add	r3, r1
 800197e:	4473      	add	r3, lr
 8001980:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001982:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8001986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001988:	9300      	str	r3, [sp, #0]
    BB = B;
 800198a:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 800198e:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8001990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8001992:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8001994:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8001998:	2600      	movs	r6, #0
 800199a:	e005      	b.n	80019a8 <mouseDriver_sendMsg.constprop.1+0x1060>
 800199c:	4667      	mov	r7, ip
 800199e:	46c6      	mov	lr, r8
 80019a0:	46ac      	mov	ip, r5
 80019a2:	46a0      	mov	r8, r4
	AA = T1 + T2;
 80019a4:	4615      	mov	r5, r2
	EE = DD + T1;
 80019a6:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80019a8:	ea2e 0004 	bic.w	r0, lr, r4
 80019ac:	ea04 0208 	and.w	r2, r4, r8
 80019b0:	4042      	eors	r2, r0
 80019b2:	482f      	ldr	r0, [pc, #188]	; (8001a70 <mouseDriver_sendMsg.constprop.1+0x1128>)
 80019b4:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80019b8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80019c2:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80019c6:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80019ca:	440a      	add	r2, r1
 80019cc:	4402      	add	r2, r0
 80019ce:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019d0:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80019d4:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019d6:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80019da:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019dc:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 80019e0:	9b00      	ldr	r3, [sp, #0]
 80019e2:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019e4:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80019e8:	ea0b 0b05 	and.w	fp, fp, r5
 80019ec:	ea8b 0b00 	eor.w	fp, fp, r0
 80019f0:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80019f4:	3601      	adds	r6, #1
	EE = DD + T1;
 80019f6:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019f8:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80019fa:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80019fc:	4618      	mov	r0, r3
	AA = T1 + T2;
 80019fe:	440a      	add	r2, r1
 8001a00:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8001a02:	d1cb      	bne.n	800199c <mouseDriver_sendMsg.constprop.1+0x1054>
 8001a04:	4611      	mov	r1, r2
 8001a06:	4602      	mov	r2, r0
    D += DD;
 8001a08:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8001a0a:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8001a0c:	4438      	add	r0, r7
 8001a0e:	4607      	mov	r7, r0
    E += EE;
 8001a10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001a12:	4410      	add	r0, r2
 8001a14:	4602      	mov	r2, r0
    F += FF;
 8001a16:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8001a18:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8001a1a:	440b      	add	r3, r1
    F += FF;
 8001a1c:	4404      	add	r4, r0
    A += AA;
 8001a1e:	4619      	mov	r1, r3
    G += GG;
 8001a20:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8001a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8001a24:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8001a26:	442b      	add	r3, r5
    G += GG;
 8001a28:	4440      	add	r0, r8
    B += BB;
 8001a2a:	461d      	mov	r5, r3
    G += GG;
 8001a2c:	4606      	mov	r6, r0
    C += CC;
 8001a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8001a30:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8001a32:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8001a34:	4463      	add	r3, ip
    H += HH;
 8001a36:	4470      	add	r0, lr
    B += BB;
 8001a38:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8001a3c:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8001a40:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8001a42:	2400      	movs	r4, #0
 8001a44:	e5e6      	b.n	8001614 <mouseDriver_sendMsg.constprop.1+0xccc>
    uint32_t old_sz = m->sz[0];
 8001a46:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001a48:	2238      	movs	r2, #56	; 0x38
 8001a4a:	18a2      	adds	r2, r4, r2
 8001a4c:	bf28      	it	cs
 8001a4e:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 8001a50:	923a      	str	r2, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8001a52:	b113      	cbz	r3, 8001a5a <mouseDriver_sendMsg.constprop.1+0x1112>
	++m->sz[1];
 8001a54:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8001a56:	3301      	adds	r3, #1
 8001a58:	933b      	str	r3, [sp, #236]	; 0xec
    const unsigned char *p = (const unsigned char *)v;
 8001a5a:	f20d 336a 	addw	r3, sp, #874	; 0x36a
 8001a5e:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 8001a60:	2307      	movs	r3, #7
 8001a62:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8001a66:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8001a68:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8001a6c:	e006      	b.n	8001a7c <mouseDriver_sendMsg.constprop.1+0x1134>
 8001a6e:	bf00      	nop
 8001a70:	0800e200 	.word	0x0800e200
    while(len > 0){
 8001a74:	9b06      	ldr	r3, [sp, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8216 	beq.w	8001ea8 <mouseDriver_sendMsg.constprop.1+0x1560>
 8001a7c:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8001a7e:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8001a80:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8001a84:	42ab      	cmp	r3, r5
 8001a86:	bf28      	it	cs
 8001a88:	462b      	movcs	r3, r5
	len -= l;
 8001a8a:	1aed      	subs	r5, r5, r3
 8001a8c:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8001a8e:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8001a90:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001a92:	4420      	add	r0, r4
	p += l;
 8001a94:	441d      	add	r5, r3
	offset += l;
 8001a96:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4631      	mov	r1, r6
	p += l;
 8001a9c:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8001a9e:	f00c fb90 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8001aa2:	2c40      	cmp	r4, #64	; 0x40
 8001aa4:	d1e6      	bne.n	8001a74 <mouseDriver_sendMsg.constprop.1+0x112c>
                p2[2] = p1[1];
 8001aa6:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8001aaa:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8001aae:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001ab0:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8001ab4:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001ab6:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8001aba:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8001abc:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8001ac0:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8001ac4:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8001ac8:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8001acc:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8001ad0:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8001ad4:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8001ad8:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8001adc:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8001ae0:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8001ae4:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8001ae8:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8001aec:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8001aee:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8001af2:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8001af6:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8001afa:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8001afe:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8001b02:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8001b06:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8001b0a:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8001b0e:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8001b12:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8001b16:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8001b1a:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8001b1e:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8001b22:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8001b26:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8001b2a:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8001b2e:	9100      	str	r1, [sp, #0]
 8001b30:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8001b34:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8001b38:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8001b3c:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8001b40:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8001b44:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8001b48:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8001b4c:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8001b50:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8001b54:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8001b58:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8001b5c:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8001b60:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8001b64:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8001b66:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8001b6a:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8001b6c:	f88a 2010 	strb.w	r2, [sl, #16]
 8001b70:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8001b74:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8001b78:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8001b7c:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8001b80:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8001b84:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8001b88:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8001b8c:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8001b90:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8001b94:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8001b98:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8001b9c:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8001ba0:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8001ba2:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8001ba6:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8001baa:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8001bae:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8001bb2:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8001bb6:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8001bba:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8001bbe:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8001bc2:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8001bc6:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8001bca:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8001bce:	f88a 201e 	strb.w	r2, [sl, #30]
 8001bd2:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8001bd6:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8001bda:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8001bde:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8001be2:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8001be6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001be8:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001bea:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8001bee:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8001bf2:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8001bf6:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8001bfa:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8001bfe:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8001c02:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8001c06:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8001c0a:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8001c0e:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8001c12:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8001c16:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8001c1a:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8001c1e:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8001c22:	9c00      	ldr	r4, [sp, #0]
 8001c24:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8001c28:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8001c2c:	9c01      	ldr	r4, [sp, #4]
 8001c2e:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8001c32:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8001c36:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8001c3a:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8001c3e:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8001c42:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8001c46:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8001c4a:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8001c4e:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8001c52:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8001c56:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8001c5a:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8001c5e:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8001c62:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8001c64:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8001c66:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8001c6a:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8001c6e:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8001c72:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8001c76:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8001c7a:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8001c7e:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8001c82:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8001c86:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8001c8a:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8001c8e:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8001c92:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8001c96:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8001c9a:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8001c9e:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8001ca2:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8001ca4:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8001ca8:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8001cac:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8001cb0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8001cb2:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8001cb6:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8001cb8:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8001cba:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8001cbe:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8001cc2:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8001cc6:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8001cca:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8001cce:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8001cd2:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8001cd6:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8001cda:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8001cde:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8001ce2:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8001ce6:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8001cea:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8001cee:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8001cf2:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8001cf6:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8001cfa:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8001cfe:	f8da 7000 	ldr.w	r7, [sl]
 8001d02:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8001d06:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001d0a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8001d0e:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8001d12:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8001d14:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8001d16:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8001d18:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8001d1a:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8001d1c:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8001d1e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8001d20:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8001d22:	9941      	ldr	r1, [sp, #260]	; 0x104
 8001d24:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8001d26:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8001d2a:	9942      	ldr	r1, [sp, #264]	; 0x108
 8001d2c:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8001d2e:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8001d30:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8001d32:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8001d36:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8001d38:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001d3c:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8001d40:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8001d44:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001d48:	443a      	add	r2, r7
 8001d4a:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8001d4e:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001d52:	ea4f 4573 	mov.w	r5, r3, ror #17
 8001d56:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8001d5a:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001d5e:	440b      	add	r3, r1
 8001d60:	4422      	add	r2, r4
 8001d62:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8001d66:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8001d6a:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8001d6e:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8001d72:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8001d76:	4403      	add	r3, r0
 8001d78:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8001d7c:	f10c 0c02 	add.w	ip, ip, #2
 8001d80:	4414      	add	r4, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001d88:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8001d8c:	f106 0608 	add.w	r6, r6, #8
 8001d90:	d1d4      	bne.n	8001d3c <mouseDriver_sendMsg.constprop.1+0x13f4>
 8001d92:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8001d96:	ea4f 4271 	mov.w	r2, r1, ror #17
 8001d9a:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8001d9e:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001da2:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001da6:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8001daa:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001dae:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8001db2:	4408      	add	r0, r1
 8001db4:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001db8:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8001dbc:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8001dc0:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8001dc4:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8001dc8:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001dca:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8001dce:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8001dd2:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8001dd6:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8001dda:	4410      	add	r0, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	4473      	add	r3, lr
 8001de0:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001de2:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8001de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001de8:	9300      	str	r3, [sp, #0]
    BB = B;
 8001dea:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8001dee:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8001df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8001df2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8001df4:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8001df8:	2600      	movs	r6, #0
 8001dfa:	e005      	b.n	8001e08 <mouseDriver_sendMsg.constprop.1+0x14c0>
 8001dfc:	4667      	mov	r7, ip
 8001dfe:	46c6      	mov	lr, r8
 8001e00:	46ac      	mov	ip, r5
 8001e02:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8001e04:	4615      	mov	r5, r2
	EE = DD + T1;
 8001e06:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001e08:	ea2e 0004 	bic.w	r0, lr, r4
 8001e0c:	ea08 0204 	and.w	r2, r8, r4
 8001e10:	4042      	eors	r2, r0
 8001e12:	4842      	ldr	r0, [pc, #264]	; (8001f1c <mouseDriver_sendMsg.constprop.1+0x15d4>)
 8001e14:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8001e18:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8001e1c:	9001      	str	r0, [sp, #4]
 8001e1e:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8001e22:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8001e26:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8001e2a:	440a      	add	r2, r1
 8001e2c:	4402      	add	r2, r0
 8001e2e:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001e30:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001e34:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001e36:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001e3a:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001e3c:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8001e40:	9b00      	ldr	r3, [sp, #0]
 8001e42:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001e44:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8001e48:	ea0b 0b05 	and.w	fp, fp, r5
 8001e4c:	ea8b 0b00 	eor.w	fp, fp, r0
 8001e50:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8001e54:	3601      	adds	r6, #1
	EE = DD + T1;
 8001e56:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001e58:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8001e5a:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8001e5c:	4618      	mov	r0, r3
	AA = T1 + T2;
 8001e5e:	440a      	add	r2, r1
 8001e60:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8001e62:	d1cb      	bne.n	8001dfc <mouseDriver_sendMsg.constprop.1+0x14b4>
 8001e64:	4611      	mov	r1, r2
 8001e66:	4602      	mov	r2, r0
    D += DD;
 8001e68:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8001e6a:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8001e6c:	4438      	add	r0, r7
 8001e6e:	4607      	mov	r7, r0
    E += EE;
 8001e70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001e72:	4410      	add	r0, r2
 8001e74:	4602      	mov	r2, r0
    F += FF;
 8001e76:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8001e78:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8001e7a:	440b      	add	r3, r1
    F += FF;
 8001e7c:	4420      	add	r0, r4
 8001e7e:	4604      	mov	r4, r0
    A += AA;
 8001e80:	4619      	mov	r1, r3
    G += GG;
 8001e82:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8001e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8001e86:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8001e88:	442b      	add	r3, r5
    G += GG;
 8001e8a:	4440      	add	r0, r8
    B += BB;
 8001e8c:	461d      	mov	r5, r3
    G += GG;
 8001e8e:	4606      	mov	r6, r0
    C += CC;
 8001e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8001e92:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8001e94:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8001e96:	4463      	add	r3, ip
    H += HH;
 8001e98:	4470      	add	r0, lr
    B += BB;
 8001e9a:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8001e9e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8001ea2:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8001ea4:	2400      	movs	r4, #0
 8001ea6:	e5e5      	b.n	8001a74 <mouseDriver_sendMsg.constprop.1+0x112c>
 8001ea8:	461f      	mov	r7, r3
    unsigned offset = (m->sz[0] / 8) % 64;
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001eaa:	4639      	mov	r1, r7
    *zeros = 0x80;
 8001eac:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001eae:	2247      	movs	r2, #71	; 0x47
 8001eb0:	f10d 00a1 	add.w	r0, sp, #161	; 0xa1
    unsigned offset = (m->sz[0] / 8) % 64;
 8001eb4:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    *zeros = 0x80;
 8001eb6:	f88a 3000 	strb.w	r3, [sl]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001eba:	f00c f98d 	bl	800e1d8 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001ebe:	9b3b      	ldr	r3, [sp, #236]	; 0xec
	    offset = 0;
 8001ec0:	f8cd a018 	str.w	sl, [sp, #24]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001ec4:	0e19      	lsrs	r1, r3, #24
    unsigned offset = (m->sz[0] / 8) % 64;
 8001ec6:	f3c5 04c5 	ubfx	r4, r5, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001eca:	463a      	mov	r2, r7
 8001ecc:	f361 0207 	bfi	r2, r1, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001ed0:	f1c4 0677 	rsb	r6, r4, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001ed4:	0c19      	lsrs	r1, r3, #16
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001ed6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001eda:	f361 220f 	bfi	r2, r1, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001ede:	0a19      	lsrs	r1, r3, #8
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001ee0:	f361 4217 	bfi	r2, r1, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001ee4:	eb0a 0106 	add.w	r1, sl, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001ee8:	0a28      	lsrs	r0, r5, #8
 8001eea:	71c8      	strb	r0, [r1, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001eec:	0c28      	lsrs	r0, r5, #16

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001eee:	f106 0709 	add.w	r7, r6, #9
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001ef2:	7188      	strb	r0, [r1, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001ef4:	0e28      	lsrs	r0, r5, #24
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001ef6:	720d      	strb	r5, [r1, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001ef8:	7148      	strb	r0, [r1, #5]
    m->sz[0] += len * 8;
 8001efa:	00f9      	lsls	r1, r7, #3
 8001efc:	186d      	adds	r5, r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001efe:	f106 0601 	add.w	r6, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001f02:	f363 621f 	bfi	r2, r3, #24, #8
	++m->sz[1];
 8001f06:	bf28      	it	cs
 8001f08:	3301      	addcs	r3, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001f0a:	f84a 2006 	str.w	r2, [sl, r6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001f0e:	9701      	str	r7, [sp, #4]
    m->sz[0] += len * 8;
 8001f10:	953a      	str	r5, [sp, #232]	; 0xe8
	++m->sz[1];
 8001f12:	bf28      	it	cs
 8001f14:	933b      	strcs	r3, [sp, #236]	; 0xec
	data[i] = in[i];
 8001f16:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8001f1a:	e005      	b.n	8001f28 <mouseDriver_sendMsg.constprop.1+0x15e0>
 8001f1c:	0800e200 	.word	0x0800e200
    while(len > 0){
 8001f20:	9b01      	ldr	r3, [sp, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 820a 	beq.w	800233c <mouseDriver_sendMsg.constprop.1+0x19f4>
 8001f28:	9d01      	ldr	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8001f2a:	9e06      	ldr	r6, [sp, #24]
	uint32_t l = 64 - offset;
 8001f2c:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	bf28      	it	cs
 8001f34:	462b      	movcs	r3, r5
	len -= l;
 8001f36:	1aed      	subs	r5, r5, r3
 8001f38:	9501      	str	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8001f3a:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8001f3c:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001f3e:	4420      	add	r0, r4
	p += l;
 8001f40:	441d      	add	r5, r3
	offset += l;
 8001f42:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8001f44:	461a      	mov	r2, r3
 8001f46:	4631      	mov	r1, r6
	p += l;
 8001f48:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8001f4a:	f00c f93a 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8001f4e:	2c40      	cmp	r4, #64	; 0x40
 8001f50:	d1e6      	bne.n	8001f20 <mouseDriver_sendMsg.constprop.1+0x15d8>
                p2[2] = p1[1];
 8001f52:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[0] = p1[3];
 8001f56:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8001f5a:	f89d 511a 	ldrb.w	r5, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8001f5e:	9100      	str	r1, [sp, #0]
                p2[1] = p1[2];
 8001f60:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8001f64:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8001f68:	f89d a110 	ldrb.w	sl, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8001f6c:	f89d 8117 	ldrb.w	r8, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8001f70:	f89d e116 	ldrb.w	lr, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8001f74:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8001f78:	f89d 7114 	ldrb.w	r7, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8001f7c:	f89d 611b 	ldrb.w	r6, [sp, #283]	; 0x11b
                p2[3] = p1[0];
 8001f80:	f89d 4118 	ldrb.w	r4, [sp, #280]	; 0x118
                p2[0] = p1[3];
 8001f84:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[1] = p1[2];
 8001f88:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8001f8c:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
                p2[1] = p1[2];
 8001f90:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
                p2[2] = p1[1];
 8001f94:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
 8001f98:	9d00      	ldr	r5, [sp, #0]
                p2[1] = p1[2];
 8001f9a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
                p2[2] = p1[1];
 8001f9e:	f88d b062 	strb.w	fp, [sp, #98]	; 0x62
                p2[3] = p1[0];
 8001fa2:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 8001fa6:	f88d a063 	strb.w	sl, [sp, #99]	; 0x63
                p2[0] = p1[3];
 8001faa:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
                p2[1] = p1[2];
 8001fae:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
                p2[2] = p1[1];
 8001fb2:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
                p2[3] = p1[0];
 8001fb6:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
                p2[0] = p1[3];
 8001fba:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
                p2[2] = p1[1];
 8001fbe:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
                p2[3] = p1[0];
 8001fc2:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
                p2[0] = p1[3];
 8001fc6:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
                p2[1] = p1[2];
 8001fca:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
                p2[2] = p1[1];
 8001fce:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8001fd2:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8001fd6:	f89d 512a 	ldrb.w	r5, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8001fda:	9100      	str	r1, [sp, #0]
                p2[0] = p1[3];
 8001fdc:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[2] = p1[1];
 8001fe0:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8001fe4:	f89d a120 	ldrb.w	sl, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8001fe8:	f89d 8127 	ldrb.w	r8, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8001fec:	f89d e126 	ldrb.w	lr, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8001ff0:	f89d c125 	ldrb.w	ip, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8001ff4:	f89d 7124 	ldrb.w	r7, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8001ff8:	f89d 612b 	ldrb.w	r6, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8001ffc:	f89d 4128 	ldrb.w	r4, [sp, #296]	; 0x128
                p2[0] = p1[3];
 8002000:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[3] = p1[0];
 8002004:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
                p2[1] = p1[2];
 8002008:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
 800200c:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8002010:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
                p2[2] = p1[1];
 8002014:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8002016:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
                p2[1] = p1[2];
 800201a:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
                p2[2] = p1[1];
 800201e:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[3] = p1[0];
 8002022:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
                p2[2] = p1[1];
 8002026:	f88d b072 	strb.w	fp, [sp, #114]	; 0x72
                p2[3] = p1[0];
 800202a:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
                p2[0] = p1[3];
 800202e:	f88d 8074 	strb.w	r8, [sp, #116]	; 0x74
                p2[1] = p1[2];
 8002032:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
                p2[2] = p1[1];
 8002036:	f88d c076 	strb.w	ip, [sp, #118]	; 0x76
                p2[3] = p1[0];
 800203a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
                p2[0] = p1[3];
 800203e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
                p2[2] = p1[1];
 8002042:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
                p2[3] = p1[0];
 8002046:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
                p2[0] = p1[3];
 800204a:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
                p2[1] = p1[2];
 800204e:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
                p2[2] = p1[1];
 8002052:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[1] = p1[2];
 8002056:	f89d 513a 	ldrb.w	r5, [sp, #314]	; 0x13a
                p2[2] = p1[1];
 800205a:	9100      	str	r1, [sp, #0]
 800205c:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8002060:	f89d a130 	ldrb.w	sl, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8002064:	f89d 8137 	ldrb.w	r8, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8002068:	f89d e136 	ldrb.w	lr, [sp, #310]	; 0x136
                p2[2] = p1[1];
 800206c:	f89d c135 	ldrb.w	ip, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8002070:	f89d 7134 	ldrb.w	r7, [sp, #308]	; 0x134
                p2[0] = p1[3];
 8002074:	f89d 613b 	ldrb.w	r6, [sp, #315]	; 0x13b
                p2[3] = p1[0];
 8002078:	f89d 4138 	ldrb.w	r4, [sp, #312]	; 0x138
                p2[1] = p1[2];
 800207c:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[2] = p1[1];
 8002080:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
                p2[3] = p1[0];
 8002084:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
                p2[0] = p1[3];
 8002088:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[1] = p1[2];
 800208c:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[0] = p1[3];
 8002090:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
                p2[1] = p1[2];
 8002094:	f88d 5089 	strb.w	r5, [sp, #137]	; 0x89
                p2[2] = p1[1];
 8002098:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 800209a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
                p2[1] = p1[2];
 800209e:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
                p2[2] = p1[1];
 80020a2:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 80020a6:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80020aa:	f88d b082 	strb.w	fp, [sp, #130]	; 0x82
                p2[3] = p1[0];
 80020ae:	f88d a083 	strb.w	sl, [sp, #131]	; 0x83
                p2[0] = p1[3];
 80020b2:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
                p2[1] = p1[2];
 80020b6:	f88d e085 	strb.w	lr, [sp, #133]	; 0x85
                p2[2] = p1[1];
 80020ba:	f88d c086 	strb.w	ip, [sp, #134]	; 0x86
                p2[3] = p1[0];
 80020be:	f88d 7087 	strb.w	r7, [sp, #135]	; 0x87
                p2[0] = p1[3];
 80020c2:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
                p2[2] = p1[1];
 80020c6:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
                p2[3] = p1[0];
 80020ca:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
                p2[0] = p1[3];
 80020ce:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                p2[1] = p1[2];
 80020d2:	f88d 108d 	strb.w	r1, [sp, #141]	; 0x8d
                p2[2] = p1[1];
 80020d6:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[1] = p1[2];
 80020da:	f89d 514a 	ldrb.w	r5, [sp, #330]	; 0x14a
                p2[2] = p1[1];
 80020de:	9100      	str	r1, [sp, #0]
 80020e0:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[3] = p1[0];
 80020e4:	f89d a140 	ldrb.w	sl, [sp, #320]	; 0x140
                p2[2] = p1[1];
 80020e8:	f89d c145 	ldrb.w	ip, [sp, #325]	; 0x145
                p2[3] = p1[0];
 80020ec:	f89d 7144 	ldrb.w	r7, [sp, #324]	; 0x144
                p2[0] = p1[3];
 80020f0:	f89d 614b 	ldrb.w	r6, [sp, #331]	; 0x14b
 80020f4:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
                p2[1] = p1[2];
 80020f8:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[2] = p1[1];
 80020fc:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
                p2[3] = p1[0];
 8002100:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                p2[0] = p1[3];
 8002104:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[1] = p1[2];
 8002108:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[0] = p1[3];
 800210c:	f89d 8147 	ldrb.w	r8, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8002110:	f89d e146 	ldrb.w	lr, [sp, #326]	; 0x146
                p2[3] = p1[0];
 8002114:	f89d 4148 	ldrb.w	r4, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8002118:	f88d 5099 	strb.w	r5, [sp, #153]	; 0x99
                p2[2] = p1[1];
 800211c:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 800211e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
                p2[1] = p1[2];
 8002122:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
                p2[2] = p1[1];
 8002126:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 800212a:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800212e:	f88d b092 	strb.w	fp, [sp, #146]	; 0x92
                p2[3] = p1[0];
 8002132:	f88d a093 	strb.w	sl, [sp, #147]	; 0x93
                p2[2] = p1[1];
 8002136:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
                p2[3] = p1[0];
 800213a:	f88d 7097 	strb.w	r7, [sp, #151]	; 0x97
                p2[0] = p1[3];
 800213e:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
                p2[2] = p1[1];
 8002142:	f88d 509a 	strb.w	r5, [sp, #154]	; 0x9a
                p2[0] = p1[3];
 8002146:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
                p2[1] = p1[2];
 800214a:	f88d e095 	strb.w	lr, [sp, #149]	; 0x95
                p2[3] = p1[0];
 800214e:	f88d 409b 	strb.w	r4, [sp, #155]	; 0x9b
                p2[0] = p1[3];
 8002152:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                p2[1] = p1[2];
 8002156:	f88d 109d 	strb.w	r1, [sp, #157]	; 0x9d
	data[i] = in[i];
 800215a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800215e:	e9c9 0102 	strd	r0, r1, [r9, #8]
 8002162:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
                p2[2] = p1[1];
 8002166:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
                p2[3] = p1[0];
 800216a:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    AA = A;
 800216e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8002170:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8002172:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002174:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002178:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 800217c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8002180:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8002184:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8002186:	9108      	str	r1, [sp, #32]
	data[i] = in[i];
 8002188:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
    CC = C;
 800218c:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800218e:	9109      	str	r1, [sp, #36]	; 0x24
	data[i] = in[i];
 8002190:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    DD = D;
 8002194:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8002196:	910a      	str	r1, [sp, #40]	; 0x28
	data[i] = in[i];
 8002198:	e9c9 6708 	strd	r6, r7, [r9, #32]
 800219c:	e9c9 230c 	strd	r2, r3, [r9, #48]	; 0x30
 80021a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80021a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    EE = E;
 80021a4:	9940      	ldr	r1, [sp, #256]	; 0x100
	data[i] = in[i];
 80021a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80021a8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    EE = E;
 80021ac:	910b      	str	r1, [sp, #44]	; 0x2c
	data[i] = in[i];
 80021ae:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80021b2:	e9c9 ab0a 	strd	sl, fp, [r9, #40]	; 0x28
    FF = F;
 80021b6:	9941      	ldr	r1, [sp, #260]	; 0x104
 80021b8:	910c      	str	r1, [sp, #48]	; 0x30
	data[i] = in[i];
 80021ba:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 80021be:	9942      	ldr	r1, [sp, #264]	; 0x108
 80021c0:	910d      	str	r1, [sp, #52]	; 0x34
    HH = H;
 80021c2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80021c4:	910e      	str	r1, [sp, #56]	; 0x38
	data[i] = in[i];
 80021c6:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 80021ca:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 80021cc:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80021d0:	ea4f 41f0 	mov.w	r1, r0, ror #19
 80021d4:	ea81 4170 	eor.w	r1, r1, r0, ror #17
 80021d8:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80021dc:	4438      	add	r0, r7
 80021de:	e9d6 1409 	ldrd	r1, r4, [r6, #36]	; 0x24
 80021e2:	e9d6 5701 	ldrd	r5, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80021e6:	ea4f 4273 	mov.w	r2, r3, ror #17
 80021ea:	ea82 42f3 	eor.w	r2, r2, r3, ror #19
 80021ee:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80021f2:	4423      	add	r3, r4
 80021f4:	4401      	add	r1, r0
 80021f6:	ea4f 14f7 	mov.w	r4, r7, ror #7
 80021fa:	ea4f 40b5 	mov.w	r0, r5, ror #18
 80021fe:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 8002202:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 8002206:	195a      	adds	r2, r3, r5
 8002208:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 800220c:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 8002210:	f10c 0c02 	add.w	ip, ip, #2
 8002214:	4408      	add	r0, r1
 8002216:	4413      	add	r3, r2
 8002218:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800221c:	e9c6 0310 	strd	r0, r3, [r6, #64]	; 0x40
 8002220:	f106 0608 	add.w	r6, r6, #8
 8002224:	d1d4      	bne.n	80021d0 <mouseDriver_sendMsg.constprop.1+0x1888>
 8002226:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 800222a:	ea4f 45f1 	mov.w	r5, r1, ror #19
 800222e:	ea85 4571 	eor.w	r5, r5, r1, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8002232:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002236:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800223a:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 800223e:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002242:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8002246:	4408      	add	r0, r1
 8002248:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800224c:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8002250:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8002254:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8002258:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 800225c:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800225e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002262:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8002266:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800226a:	4428      	add	r0, r5
 800226c:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8002270:	440b      	add	r3, r1
 8002272:	4473      	add	r3, lr
 8002274:	4402      	add	r2, r0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002276:	e9c9 233e 	strd	r2, r3, [r9, #248]	; 0xf8
    CC = C;
 800227a:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    AA = A;
 800227e:	e9dd 5c07 	ldrd	r5, ip, [sp, #28]
    FF = F;
 8002282:	e9dd 8e0c 	ldrd	r8, lr, [sp, #48]	; 0x30
    HH = H;
 8002286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    EE = E;
 8002288:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    for (i = 0; i < 64; i++) {
 800228a:	2600      	movs	r6, #0
 800228c:	e005      	b.n	800229a <mouseDriver_sendMsg.constprop.1+0x1952>
 800228e:	4667      	mov	r7, ip
 8002290:	46c6      	mov	lr, r8
 8002292:	46ac      	mov	ip, r5
 8002294:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8002296:	4615      	mov	r5, r2
	EE = DD + T1;
 8002298:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800229a:	ea2e 0204 	bic.w	r2, lr, r4
 800229e:	ea08 0b04 	and.w	fp, r8, r4
 80022a2:	4610      	mov	r0, r2
 80022a4:	465a      	mov	r2, fp
 80022a6:	4042      	eors	r2, r0
 80022a8:	484d      	ldr	r0, [pc, #308]	; (80023e0 <mouseDriver_sendMsg.constprop.1+0x1a98>)
 80022aa:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80022ae:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80022b2:	9000      	str	r0, [sp, #0]
 80022b4:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80022b8:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80022bc:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80022c0:	440a      	add	r2, r1
 80022c2:	4402      	add	r2, r0
 80022c4:	9800      	ldr	r0, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80022c6:	ea4f 3175 	mov.w	r1, r5, ror #13
 80022ca:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80022ce:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80022d0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80022d4:	ea07 000c 	and.w	r0, r7, ip
 80022d8:	ea0b 0b05 	and.w	fp, fp, r5
 80022dc:	ea8b 0b00 	eor.w	fp, fp, r0
 80022e0:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80022e4:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80022e6:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80022e8:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80022ea:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80022ec:	eb02 000a 	add.w	r0, r2, sl
 80022f0:	4673      	mov	r3, lr
	AA = T1 + T2;
 80022f2:	440a      	add	r2, r1
 80022f4:	46ba      	mov	sl, r7
    for (i = 0; i < 64; i++) {
 80022f6:	d1ca      	bne.n	800228e <mouseDriver_sendMsg.constprop.1+0x1946>
 80022f8:	4611      	mov	r1, r2
 80022fa:	4602      	mov	r2, r0
    D += DD;
 80022fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    A += AA;
 80022fe:	9b07      	ldr	r3, [sp, #28]
    D += DD;
 8002300:	4438      	add	r0, r7
 8002302:	4607      	mov	r7, r0
    E += EE;
 8002304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002306:	4410      	add	r0, r2
 8002308:	4602      	mov	r2, r0
    F += FF;
 800230a:	980c      	ldr	r0, [sp, #48]	; 0x30
    E += EE;
 800230c:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 800230e:	440b      	add	r3, r1
    F += FF;
 8002310:	4420      	add	r0, r4
 8002312:	4604      	mov	r4, r0
    A += AA;
 8002314:	4619      	mov	r1, r3
    G += GG;
 8002316:	980d      	ldr	r0, [sp, #52]	; 0x34
    B += BB;
 8002318:	9b08      	ldr	r3, [sp, #32]
    F += FF;
 800231a:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 800231c:	442b      	add	r3, r5
    G += GG;
 800231e:	4440      	add	r0, r8
    B += BB;
 8002320:	461d      	mov	r5, r3
    G += GG;
 8002322:	4606      	mov	r6, r0
    C += CC;
 8002324:	9b09      	ldr	r3, [sp, #36]	; 0x24
    H += HH;
 8002326:	980e      	ldr	r0, [sp, #56]	; 0x38
    G += GG;
 8002328:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 800232a:	4463      	add	r3, ip
    H += HH;
 800232c:	4470      	add	r0, lr
    B += BB;
 800232e:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8002332:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8002336:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8002338:	2400      	movs	r4, #0
 800233a:	e5f1      	b.n	8001f20 <mouseDriver_sendMsg.constprop.1+0x15d8>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800233c:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
    result[1] = p[2];
 8002340:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
    result[0] = p[3];
 8002344:	f88d 3371 	strb.w	r3, [sp, #881]	; 0x371
    result[2] = p[1];
 8002348:	f89d 30f1 	ldrb.w	r3, [sp, #241]	; 0xf1
    result[1] = p[2];
 800234c:	f88d 2372 	strb.w	r2, [sp, #882]	; 0x372
    result[3] = p[0];
 8002350:	f89d 10f0 	ldrb.w	r1, [sp, #240]	; 0xf0
    result[2] = p[1];
 8002354:	f88d 3373 	strb.w	r3, [sp, #883]	; 0x373
    result[4] = p[7];
 8002358:	f89d 20f7 	ldrb.w	r2, [sp, #247]	; 0xf7
    result[5] = p[6];
 800235c:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    result[3] = p[0];
 8002360:	f88d 1374 	strb.w	r1, [sp, #884]	; 0x374
    result[4] = p[7];
 8002364:	f88d 2375 	strb.w	r2, [sp, #885]	; 0x375
    result[5] = p[6];
 8002368:	f88d 3376 	strb.w	r3, [sp, #886]	; 0x376
 800236c:	f7fe bbe4 	b.w	8000b38 <mouseDriver_sendMsg.constprop.1+0x1f0>
	while (length > 1 && payload[length-1] == 0) {
 8002370:	f04f 0e0c 	mov.w	lr, #12
 8002374:	4675      	mov	r5, lr
 8002376:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 800237a:	b2b6      	uxth	r6, r6
 800237c:	f7fe bb4e 	b.w	8000a1c <mouseDriver_sendMsg.constprop.1+0xd4>
		length--;
 8002380:	f04f 0e0b 	mov.w	lr, #11
	while (length > 1 && payload[length-1] == 0) {
 8002384:	4675      	mov	r5, lr
 8002386:	e7f6      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 8002388:	f04f 0e0a 	mov.w	lr, #10
	while (length > 1 && payload[length-1] == 0) {
 800238c:	4675      	mov	r5, lr
 800238e:	e7f2      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 8002390:	f04f 0e09 	mov.w	lr, #9
	while (length > 1 && payload[length-1] == 0) {
 8002394:	4675      	mov	r5, lr
 8002396:	e7ee      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 8002398:	f04f 0e08 	mov.w	lr, #8
	while (length > 1 && payload[length-1] == 0) {
 800239c:	4675      	mov	r5, lr
 800239e:	e7ea      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023a0:	f04f 0e07 	mov.w	lr, #7
	while (length > 1 && payload[length-1] == 0) {
 80023a4:	4675      	mov	r5, lr
 80023a6:	e7e6      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023a8:	f04f 0e06 	mov.w	lr, #6
	while (length > 1 && payload[length-1] == 0) {
 80023ac:	4675      	mov	r5, lr
 80023ae:	e7e2      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023b0:	f04f 0e05 	mov.w	lr, #5
	while (length > 1 && payload[length-1] == 0) {
 80023b4:	4675      	mov	r5, lr
 80023b6:	e7de      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023b8:	f04f 0e04 	mov.w	lr, #4
	while (length > 1 && payload[length-1] == 0) {
 80023bc:	4675      	mov	r5, lr
 80023be:	e7da      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023c0:	f04f 0e03 	mov.w	lr, #3
	while (length > 1 && payload[length-1] == 0) {
 80023c4:	4675      	mov	r5, lr
 80023c6:	e7d6      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
		length--;
 80023c8:	f04f 0e02 	mov.w	lr, #2
	while (length > 1 && payload[length-1] == 0) {
 80023cc:	4675      	mov	r5, lr
 80023ce:	e7d2      	b.n	8002376 <mouseDriver_sendMsg.constprop.1+0x1a2e>
	if (signing) {
 80023d0:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 80023d4:	f04f 0808 	mov.w	r8, #8
 80023d8:	f04f 0c0a 	mov.w	ip, #10
 80023dc:	f7fe bb41 	b.w	8000a62 <mouseDriver_sendMsg.constprop.1+0x11a>
 80023e0:	0800e200 	.word	0x0800e200

080023e4 <mouseDriver_sendMsg.constprop.3>:
void mouseDriver_sendMsg(uint32_t msgid){
 80023e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e8:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
 80023ec:	e001      	b.n	80023f2 <mouseDriver_sendMsg.constprop.3+0xe>
		HAL_Delay(1);
 80023ee:	f009 f839 	bl	800b464 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 80023f2:	f006 ff7d 	bl	80092f0 <main_get_huart_tx_state>
 80023f6:	2802      	cmp	r0, #2
		HAL_Delay(1);
 80023f8:	f04f 0001 	mov.w	r0, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 80023fc:	d0f7      	beq.n	80023ee <mouseDriver_sendMsg.constprop.3+0xa>
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 80023fe:	4ba4      	ldr	r3, [pc, #656]	; (8002690 <mouseDriver_sendMsg.constprop.3+0x2ac>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8002400:	4ca4      	ldr	r4, [pc, #656]	; (8002694 <mouseDriver_sendMsg.constprop.3+0x2b0>)
 8002402:	781d      	ldrb	r5, [r3, #0]

	/* Init sensor as well */
	sensorDriver_init();
}
uint32_t mouseDriver_getTime (void){
	return (HAL_GetTick());
 8002404:	f009 f828 	bl	800b458 <HAL_GetTick>
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 8002408:	ab10      	add	r3, sp, #64	; 0x40
    packet.mode = mode;
 800240a:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
    packet.time = time;
 800240e:	9010      	str	r0, [sp, #64]	; 0x40
 8002410:	4606      	mov	r6, r0

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002412:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002416:	7b23      	ldrb	r3, [r4, #12]
 8002418:	f88d 1264 	strb.w	r1, [sp, #612]	; 0x264
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 800241c:	2200      	movs	r2, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800241e:	f013 0302 	ands.w	r3, r3, #2
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002422:	9698      	str	r6, [sp, #608]	; 0x260
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002424:	f88d 225d 	strb.w	r2, [sp, #605]	; 0x25d
 8002428:	f88d 225e 	strb.w	r2, [sp, #606]	; 0x25e
 800242c:	f88d 225f 	strb.w	r2, [sp, #607]	; 0x25f
 8002430:	d12f      	bne.n	8002492 <mouseDriver_sendMsg.constprop.3+0xae>
 8002432:	6922      	ldr	r2, [r4, #16]
 8002434:	b11a      	cbz	r2, 800243e <mouseDriver_sendMsg.constprop.3+0x5a>
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	07d2      	lsls	r2, r2, #31
 800243a:	f100 83c2 	bmi.w	8002bc2 <mouseDriver_sendMsg.constprop.3+0x7de>
		msg->magic = MAVLINK_STX;
 800243e:	27fd      	movs	r7, #253	; 0xfd
 8002440:	f88d 7256 	strb.w	r7, [sp, #598]	; 0x256
	while (length > 1 && payload[length-1] == 0) {
 8002444:	4629      	mov	r1, r5
 8002446:	2d00      	cmp	r5, #0
 8002448:	f041 84d6 	bne.w	8003df8 <mouseDriver_sendMsg.constprop.3+0x1a14>
 800244c:	0e32      	lsrs	r2, r6, #24
 800244e:	f041 84c4 	bne.w	8003dda <mouseDriver_sendMsg.constprop.3+0x19f6>
 8002452:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
 8002456:	f041 84c5 	bne.w	8003de4 <mouseDriver_sendMsg.constprop.3+0x1a00>
 800245a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800245e:	2e00      	cmp	r6, #0
 8002460:	f041 84c5 	bne.w	8003dee <mouseDriver_sendMsg.constprop.3+0x1a0a>
 8002464:	2501      	movs	r5, #1
		length--;
 8002466:	46ae      	mov	lr, r5
	msg->sysid = system_id;
 8002468:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800246a:	f88d e257 	strb.w	lr, [sp, #599]	; 0x257
	msg->sysid = system_id;
 800246e:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8002472:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
	if (signing) {
 8002476:	2900      	cmp	r1, #0
 8002478:	f001 84cf 	beq.w	8003e1a <mouseDriver_sendMsg.constprop.3+0x1a36>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800247c:	2201      	movs	r2, #1
 800247e:	4610      	mov	r0, r2
 8002480:	f88d 2258 	strb.w	r2, [sp, #600]	; 0x258
 8002484:	4691      	mov	r9, r2
 8002486:	27fd      	movs	r7, #253	; 0xfd
 8002488:	f04f 0808 	mov.w	r8, #8
 800248c:	f04f 0c0a 	mov.w	ip, #10
 8002490:	e014      	b.n	80024bc <mouseDriver_sendMsg.constprop.3+0xd8>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8002492:	f240 51fe 	movw	r1, #1534	; 0x5fe
	msg->compid = component_id;
 8002496:	f04f 0804 	mov.w	r8, #4
 800249a:	2505      	movs	r5, #5
	msg->sysid = system_id;
 800249c:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 80024a0:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
		msg->magic = MAVLINK_STX_MAVLINK1;
 80024a4:	f8ad 1256 	strh.w	r1, [sp, #598]	; 0x256
	msg->compid = component_id;
 80024a8:	4646      	mov	r6, r8
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80024aa:	46ae      	mov	lr, r5
	msg->compid = component_id;
 80024ac:	27fe      	movs	r7, #254	; 0xfe
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80024ae:	f04f 0c06 	mov.w	ip, #6
	msg->incompat_flags = 0;
 80024b2:	2200      	movs	r2, #0
 80024b4:	4610      	mov	r0, r2
 80024b6:	f88d 2258 	strb.w	r2, [sp, #600]	; 0x258
 80024ba:	4691      	mov	r9, r2
	msg->seq = status->current_tx_seq;
 80024bc:	79a2      	ldrb	r2, [r4, #6]
 80024be:	f88d 225a 	strb.w	r2, [sp, #602]	; 0x25a
	status->current_tx_seq = status->current_tx_seq + 1;
 80024c2:	1c51      	adds	r1, r2, #1
 80024c4:	71a1      	strb	r1, [r4, #6]
	msg->compat_flags = 0;
 80024c6:	2100      	movs	r1, #0
	buf[0] = msg->magic;
 80024c8:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
	buf[1] = msg->len;
 80024cc:	f88d e055 	strb.w	lr, [sp, #85]	; 0x55
	msg->compat_flags = 0;
 80024d0:	f88d 1259 	strb.w	r1, [sp, #601]	; 0x259
	if (mavlink1) {
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80b5 	beq.w	8002644 <mouseDriver_sendMsg.constprop.3+0x260>
		buf[2] = msg->seq;
 80024da:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
		buf[3] = msg->sysid;
 80024de:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
		buf[4] = msg->compid;
 80024e2:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
		buf[5] = msg->msgid & 0xFF;
 80024e6:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
 80024ea:	f108 0802 	add.w	r8, r8, #2
 80024ee:	ab15      	add	r3, sp, #84	; 0x54
 80024f0:	4498      	add	r8, r3
        *crcAccum = X25_INIT_CRC;
 80024f2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80024f6:	f10d 0e55 	add.w	lr, sp, #85	; 0x55
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80024fa:	f81e 3b01 	ldrb.w	r3, [lr], #1
 80024fe:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8002500:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002504:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002506:	091a      	lsrs	r2, r3, #4
 8002508:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 800250c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	while (length--) {
 8002510:	45c6      	cmp	lr, r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002512:	ea87 07c3 	eor.w	r7, r7, r3, lsl #3
	while (length--) {
 8002516:	d1f0      	bne.n	80024fa <mouseDriver_sendMsg.constprop.3+0x116>
 8002518:	360d      	adds	r6, #13
 800251a:	ab95      	add	r3, sp, #596	; 0x254
 800251c:	441e      	add	r6, r3
	const uint8_t *p = (const uint8_t *)pBuffer;
 800251e:	a998      	add	r1, sp, #608	; 0x260
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002524:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8002526:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800252a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800252c:	091a      	lsrs	r2, r3, #4
 800252e:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8002532:	ea87 2703 	eor.w	r7, r7, r3, lsl #8
 8002536:	ea87 03c3 	eor.w	r3, r7, r3, lsl #3
 800253a:	b21b      	sxth	r3, r3
	while (length--) {
 800253c:	42b1      	cmp	r1, r6
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800253e:	b29f      	uxth	r7, r3
	while (length--) {
 8002540:	d1ee      	bne.n	8002520 <mouseDriver_sendMsg.constprop.3+0x13c>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002542:	f083 0189 	eor.w	r1, r3, #137	; 0x89
        tmp ^= (tmp<<4);
 8002546:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 800254a:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800254c:	0a3b      	lsrs	r3, r7, #8
 800254e:	ea83 1311 	eor.w	r3, r3, r1, lsr #4
 8002552:	ea83 2301 	eor.w	r3, r3, r1, lsl #8
 8002556:	ea83 01c1 	eor.w	r1, r3, r1, lsl #3
 800255a:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800255c:	aa98      	add	r2, sp, #608	; 0x260
 800255e:	b2cb      	uxtb	r3, r1
 8002560:	5553      	strb	r3, [r2, r5]
 8002562:	b289      	uxth	r1, r1
 8002564:	9304      	str	r3, [sp, #16]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8002566:	f20d 2261 	addw	r2, sp, #609	; 0x261
 800256a:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 800256e:	0a0d      	lsrs	r5, r1, #8
 8002570:	54d5      	strb	r5, [r2, r3]
 8002572:	9505      	str	r5, [sp, #20]
	msg->checksum = checksum;
 8002574:	f8ad 1254 	strh.w	r1, [sp, #596]	; 0x254
	if (signing) {
 8002578:	2800      	cmp	r0, #0
 800257a:	f040 808f 	bne.w	800269c <mouseDriver_sendMsg.constprop.3+0x2b8>
 800257e:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8002582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002586:	9b97      	ldr	r3, [sp, #604]	; 0x25c
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8002588:	f89d 2256 	ldrb.w	r2, [sp, #598]	; 0x256
 800258c:	f89d e25a 	ldrb.w	lr, [sp, #602]	; 0x25a
 8002590:	f89d c25b 	ldrb.w	ip, [sp, #603]	; 0x25b
 8002594:	f89d 725c 	ldrb.w	r7, [sp, #604]	; 0x25c
 8002598:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800259c:	2afe      	cmp	r2, #254	; 0xfe
 800259e:	b2de      	uxtb	r6, r3
 80025a0:	f000 82f6 	beq.w	8002b90 <mouseDriver_sendMsg.constprop.3+0x7ac>
	while (length > 1 && payload[length-1] == 0) {
 80025a4:	9802      	ldr	r0, [sp, #8]
 80025a6:	2801      	cmp	r0, #1
 80025a8:	d915      	bls.n	80025d6 <mouseDriver_sendMsg.constprop.3+0x1f2>
 80025aa:	f20d 215f 	addw	r1, sp, #607	; 0x25f
 80025ae:	5c09      	ldrb	r1, [r1, r0]
 80025b0:	b989      	cbnz	r1, 80025d6 <mouseDriver_sendMsg.constprop.3+0x1f2>
 80025b2:	1e41      	subs	r1, r0, #1
 80025b4:	b2c8      	uxtb	r0, r1
 80025b6:	4601      	mov	r1, r0
 80025b8:	310c      	adds	r1, #12
 80025ba:	ac95      	add	r4, sp, #596	; 0x254
 80025bc:	4421      	add	r1, r4
 80025be:	e005      	b.n	80025cc <mouseDriver_sendMsg.constprop.3+0x1e8>
 80025c0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80025c4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80025c8:	b91d      	cbnz	r5, 80025d2 <mouseDriver_sendMsg.constprop.3+0x1ee>
 80025ca:	4640      	mov	r0, r8
		length--;
 80025cc:	b2c4      	uxtb	r4, r0
	while (length > 1 && payload[length-1] == 0) {
 80025ce:	2c01      	cmp	r4, #1
 80025d0:	d1f6      	bne.n	80025c0 <mouseDriver_sendMsg.constprop.3+0x1dc>
 80025d2:	e9cd 4002 	strd	r4, r0, [sp, #8]
		buf[0] = msg->magic;
 80025d6:	4d30      	ldr	r5, [pc, #192]	; (8002698 <mouseDriver_sendMsg.constprop.3+0x2b4>)
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80025d8:	f8dd a00c 	ldr.w	sl, [sp, #12]
		buf[2] = msg->incompat_flags;
 80025dc:	f89d 4258 	ldrb.w	r4, [sp, #600]	; 0x258
		buf[3] = msg->compat_flags;
 80025e0:	f89d 8259 	ldrb.w	r8, [sp, #601]	; 0x259
		buf[0] = msg->magic;
 80025e4:	702a      	strb	r2, [r5, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80025e6:	ea4f 2923 	mov.w	r9, r3, asr #8
		buf[1] = length;
 80025ea:	9a02      	ldr	r2, [sp, #8]
 80025ec:	706a      	strb	r2, [r5, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80025ee:	141b      	asrs	r3, r3, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80025f0:	a998      	add	r1, sp, #608	; 0x260
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80025f2:	726b      	strb	r3, [r5, #9]
		buf[4] = msg->seq;
 80025f4:	f885 e004 	strb.w	lr, [r5, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80025f8:	f105 000a 	add.w	r0, r5, #10
		buf[5] = msg->sysid;
 80025fc:	f885 c005 	strb.w	ip, [r5, #5]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8002600:	4652      	mov	r2, sl
		buf[6] = msg->compid;
 8002602:	71af      	strb	r7, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8002604:	71ee      	strb	r6, [r5, #7]
		buf[3] = msg->compat_flags;
 8002606:	f885 8003 	strb.w	r8, [r5, #3]
		buf[2] = msg->incompat_flags;
 800260a:	70ac      	strb	r4, [r5, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800260c:	f885 9008 	strb.w	r9, [r5, #8]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8002610:	f00b fdd7 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002614:	4653      	mov	r3, sl
 8002616:	330a      	adds	r3, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002618:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 800261c:	eb05 0003 	add.w	r0, r5, r3
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002620:	d121      	bne.n	8002666 <mouseDriver_sendMsg.constprop.3+0x282>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002622:	9a04      	ldr	r2, [sp, #16]
 8002624:	54ea      	strb	r2, [r5, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002626:	9b05      	ldr	r3, [sp, #20]
 8002628:	7043      	strb	r3, [r0, #1]
 800262a:	2409      	movs	r4, #9
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800262c:	4421      	add	r1, r4
 800262e:	9b02      	ldr	r3, [sp, #8]
			main_transmit_buffer(outBuffer, msg_size);
 8002630:	4819      	ldr	r0, [pc, #100]	; (8002698 <mouseDriver_sendMsg.constprop.3+0x2b4>)
 8002632:	3103      	adds	r1, #3
 8002634:	4419      	add	r1, r3
 8002636:	b289      	uxth	r1, r1
}
 8002638:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 800263c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			main_transmit_buffer(outBuffer, msg_size);
 8002640:	f006 be5e 	b.w	8009300 <main_transmit_buffer>
		buf[2] = msg->incompat_flags;
 8002644:	f88d 9056 	strb.w	r9, [sp, #86]	; 0x56
		buf[3] = msg->compat_flags;
 8002648:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
		buf[4] = msg->seq;
 800264c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		buf[5] = msg->sysid;
 8002650:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		buf[6] = msg->compid;
 8002654:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		buf[7] = msg->msgid & 0xFF;
 8002658:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800265c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002660:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8002664:	e741      	b.n	80024ea <mouseDriver_sendMsg.constprop.3+0x106>
		memcpy(&ck[2], msg->signature, signature_len);
 8002666:	aade      	add	r2, sp, #888	; 0x378
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002668:	9904      	ldr	r1, [sp, #16]
 800266a:	54e9      	strb	r1, [r5, r3]
		memcpy(&ck[2], msg->signature, signature_len);
 800266c:	f852 1d0e 	ldr.w	r1, [r2, #-14]!
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002670:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ck[2], msg->signature, signature_len);
 8002672:	6894      	ldr	r4, [r2, #8]
 8002674:	6855      	ldr	r5, [r2, #4]
 8002676:	7b12      	ldrb	r2, [r2, #12]
 8002678:	f8c0 1002 	str.w	r1, [r0, #2]
 800267c:	f8c0 400a 	str.w	r4, [r0, #10]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002680:	7043      	strb	r3, [r0, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8002682:	210d      	movs	r1, #13
 8002684:	f8c0 5006 	str.w	r5, [r0, #6]
 8002688:	7382      	strb	r2, [r0, #14]
 800268a:	2409      	movs	r4, #9
 800268c:	e7ce      	b.n	800262c <mouseDriver_sendMsg.constprop.3+0x248>
 800268e:	bf00      	nop
 8002690:	2000002d 	.word	0x2000002d
 8002694:	20000058 	.word	0x20000058
 8002698:	200000b8 	.word	0x200000b8
		mavlink_sign_packet(status->signing,
 800269c:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 80026a0:	6926      	ldr	r6, [r4, #16]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80026a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	f43f af6d 	beq.w	8002586 <mouseDriver_sendMsg.constprop.3+0x1a2>
 80026ac:	7833      	ldrb	r3, [r6, #0]
 80026ae:	07db      	lsls	r3, r3, #31
 80026b0:	f57f af69 	bpl.w	8002586 <mouseDriver_sendMsg.constprop.3+0x1a2>
	tstamp.t64 = signing->timestamp;
 80026b4:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
	signing->timestamp++;
 80026b8:	1c62      	adds	r2, r4, #1
	tstamp.t64 = signing->timestamp;
 80026ba:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
	signing->timestamp++;
 80026be:	f145 0300 	adc.w	r3, r5, #0
	memcpy(&signature[1], tstamp.t8, 6);
 80026c2:	f8cd 436b 	str.w	r4, [sp, #875]	; 0x36b
    D = 0xa54ff53a;
 80026c6:	4d1e      	ldr	r5, [pc, #120]	; (8002740 <mouseDriver_sendMsg.constprop.3+0x35c>)
 80026c8:	4c1e      	ldr	r4, [pc, #120]	; (8002744 <mouseDriver_sendMsg.constprop.3+0x360>)
	mavlink_sha256_update(&ctx, header, header_len);
 80026ca:	f8cd c018 	str.w	ip, [sp, #24]
 80026ce:	e9cd 543e 	strd	r5, r4, [sp, #248]	; 0xf8
    E = 0x510e527f;
 80026d2:	4c1d      	ldr	r4, [pc, #116]	; (8002748 <mouseDriver_sendMsg.constprop.3+0x364>)
 80026d4:	9440      	str	r4, [sp, #256]	; 0x100
	signing->timestamp++;
 80026d6:	e9c6 2302 	strd	r2, r3, [r6, #8]
    F = 0x9b05688c;
 80026da:	4c1c      	ldr	r4, [pc, #112]	; (800274c <mouseDriver_sendMsg.constprop.3+0x368>)
 80026dc:	9441      	str	r4, [sp, #260]	; 0x104
	memcpy(m->u.save_bytes + offset, p, l);
 80026de:	4637      	mov	r7, r6
    G = 0x1f83d9ab;
 80026e0:	4c1b      	ldr	r4, [pc, #108]	; (8002750 <mouseDriver_sendMsg.constprop.3+0x36c>)
	memcpy(m->u.save_bytes + offset, p, l);
 80026e2:	f857 0f10 	ldr.w	r0, [r7, #16]!
    G = 0x1f83d9ab;
 80026e6:	9442      	str	r4, [sp, #264]	; 0x108
    H = 0x5be0cd19;
 80026e8:	f104 5474 	add.w	r4, r4, #1023410176	; 0x3d000000
    B = 0xbb67ae85;
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <mouseDriver_sendMsg.constprop.3+0x370>)
	memcpy(m->u.save_bytes + offset, p, l);
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
    B = 0xbb67ae85;
 80026f2:	933d      	str	r3, [sp, #244]	; 0xf4
    H = 0x5be0cd19;
 80026f4:	f5a4 0423 	sub.w	r4, r4, #10682368	; 0xa30000
	memcpy(m->u.save_bytes + offset, p, l);
 80026f8:	68fb      	ldr	r3, [r7, #12]
	signature[0] = signing->link_id;
 80026fa:	7876      	ldrb	r6, [r6, #1]
	memcpy(&signature[1], tstamp.t8, 6);
 80026fc:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8002700:	f8ad 536f 	strh.w	r5, [sp, #879]	; 0x36f
    H = 0x5be0cd19;
 8002704:	f6a4 4492 	subw	r4, r4, #3218	; 0xc92
 8002708:	9443      	str	r4, [sp, #268]	; 0x10c
	memcpy(m->u.save_bytes + offset, p, l);
 800270a:	ac44      	add	r4, sp, #272	; 0x110
 800270c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	signature[0] = signing->link_id;
 800270e:	f88d 636a 	strb.w	r6, [sp, #874]	; 0x36a
 8002712:	6938      	ldr	r0, [r7, #16]
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	69fb      	ldr	r3, [r7, #28]
    A = 0x6a09e667;
 800271a:	4e0f      	ldr	r6, [pc, #60]	; (8002758 <mouseDriver_sendMsg.constprop.3+0x374>)
    const unsigned char *p = (const unsigned char *)v;
 800271c:	af15      	add	r7, sp, #84	; 0x54
    m->sz[0] += len * 8;
 800271e:	f44f 7580 	mov.w	r5, #256	; 0x100
    const unsigned char *p = (const unsigned char *)v;
 8002722:	9707      	str	r7, [sp, #28]
    m->sz[0] += len * 8;
 8002724:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
    A = 0x6a09e667;
 8002728:	2700      	movs	r7, #0
 800272a:	e9cd 763b 	strd	r7, r6, [sp, #236]	; 0xec
 800272e:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
	memcpy(m->u.save_bytes + offset, p, l);
 8002732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	data[i] = in[i];
 8002734:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    offset = (old_sz / 8) % 64;
 8002738:	2420      	movs	r4, #32
    m->sz[0] += len * 8;
 800273a:	953a      	str	r5, [sp, #232]	; 0xe8
 800273c:	e012      	b.n	8002764 <mouseDriver_sendMsg.constprop.3+0x380>
 800273e:	bf00      	nop
 8002740:	3c6ef372 	.word	0x3c6ef372
 8002744:	a54ff53a 	.word	0xa54ff53a
 8002748:	510e527f 	.word	0x510e527f
 800274c:	9b05688c 	.word	0x9b05688c
 8002750:	1f83d9ab 	.word	0x1f83d9ab
 8002754:	bb67ae85 	.word	0xbb67ae85
 8002758:	6a09e667 	.word	0x6a09e667
    while(len > 0){
 800275c:	9b06      	ldr	r3, [sp, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8237 	beq.w	8002bd2 <mouseDriver_sendMsg.constprop.3+0x7ee>
 8002764:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8002766:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8002768:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800276c:	42ab      	cmp	r3, r5
 800276e:	bf28      	it	cs
 8002770:	462b      	movcs	r3, r5
	len -= l;
 8002772:	1aed      	subs	r5, r5, r3
 8002774:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8002776:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8002778:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800277a:	4420      	add	r0, r4
	p += l;
 800277c:	441d      	add	r5, r3
	offset += l;
 800277e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8002780:	461a      	mov	r2, r3
 8002782:	4631      	mov	r1, r6
	p += l;
 8002784:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8002786:	f00b fd1c 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800278a:	2c40      	cmp	r4, #64	; 0x40
 800278c:	d1e6      	bne.n	800275c <mouseDriver_sendMsg.constprop.3+0x378>
                p2[2] = p1[1];
 800278e:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8002792:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8002796:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8002798:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 800279c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800279e:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 80027a2:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 80027a4:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80027a8:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80027ac:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 80027b0:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 80027b4:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 80027b8:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 80027bc:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 80027c0:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 80027c4:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 80027c8:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 80027cc:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 80027d0:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 80027d4:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 80027d6:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 80027da:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 80027de:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 80027e2:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 80027e6:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 80027ea:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 80027ee:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 80027f2:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 80027f6:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 80027fa:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 80027fe:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8002802:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8002806:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 800280a:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 800280e:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8002812:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8002816:	9100      	str	r1, [sp, #0]
 8002818:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 800281c:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8002820:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8002824:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8002828:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 800282c:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8002830:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8002834:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8002838:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 800283c:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8002840:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8002844:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8002848:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 800284c:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800284e:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8002852:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8002854:	f88a 2010 	strb.w	r2, [sl, #16]
 8002858:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 800285c:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8002860:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8002864:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8002868:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 800286c:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8002870:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8002874:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8002878:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 800287c:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8002880:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8002884:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8002888:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 800288a:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 800288e:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8002892:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8002896:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 800289a:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 800289e:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80028a2:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80028a6:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80028aa:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80028ae:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 80028b2:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 80028b6:	f88a 201e 	strb.w	r2, [sl, #30]
 80028ba:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 80028be:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 80028c2:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 80028c6:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 80028ca:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 80028ce:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80028d0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80028d2:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 80028d6:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 80028da:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 80028de:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 80028e2:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 80028e6:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80028ea:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 80028ee:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 80028f2:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 80028f6:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 80028fa:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 80028fe:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8002902:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8002906:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 800290a:	9c00      	ldr	r4, [sp, #0]
 800290c:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8002910:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8002914:	9c01      	ldr	r4, [sp, #4]
 8002916:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 800291a:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 800291e:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8002922:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8002926:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 800292a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 800292e:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8002932:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8002936:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 800293a:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 800293e:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8002942:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8002946:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 800294a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800294c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800294e:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8002952:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8002956:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 800295a:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 800295e:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8002962:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8002966:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 800296a:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 800296e:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8002972:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8002976:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 800297a:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 800297e:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8002982:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8002986:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 800298a:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800298c:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8002990:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8002994:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8002998:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 800299a:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 800299e:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80029a0:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80029a2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80029a6:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80029aa:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80029ae:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80029b2:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80029b6:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80029ba:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80029be:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80029c2:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 80029c6:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 80029ca:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 80029ce:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80029d2:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 80029d6:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 80029da:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 80029de:	e9c9 6708 	strd	r6, r7, [r9, #32]
 80029e2:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 80029e6:	f8da 7000 	ldr.w	r7, [sl]
 80029ea:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 80029ee:	f8da 2004 	ldr.w	r2, [sl, #4]
 80029f2:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80029f6:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 80029fa:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80029fc:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 80029fe:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8002a00:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8002a02:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8002a04:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8002a06:	9940      	ldr	r1, [sp, #256]	; 0x100
 8002a08:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8002a0a:	9941      	ldr	r1, [sp, #260]	; 0x104
 8002a0c:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8002a0e:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8002a12:	9942      	ldr	r1, [sp, #264]	; 0x108
 8002a14:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8002a16:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8002a18:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8002a1a:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8002a1e:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8002a20:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a24:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8002a28:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8002a2c:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002a30:	443a      	add	r2, r7
 8002a32:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8002a36:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a3a:	ea4f 4573 	mov.w	r5, r3, ror #17
 8002a3e:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8002a42:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002a46:	440b      	add	r3, r1
 8002a48:	4422      	add	r2, r4
 8002a4a:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8002a4e:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8002a52:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8002a56:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8002a5a:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8002a5e:	4403      	add	r3, r0
 8002a60:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8002a64:	f10c 0c02 	add.w	ip, ip, #2
 8002a68:	4414      	add	r4, r2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a70:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8002a74:	f106 0608 	add.w	r6, r6, #8
 8002a78:	d1d4      	bne.n	8002a24 <mouseDriver_sendMsg.constprop.3+0x640>
 8002a7a:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8002a7e:	ea4f 4271 	mov.w	r2, r1, ror #17
 8002a82:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8002a86:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a8a:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002a8e:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8002a92:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a96:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8002a9a:	4408      	add	r0, r1
 8002a9c:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002aa0:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8002aa4:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8002aa8:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8002aac:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8002ab0:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002ab2:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002ab6:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8002aba:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8002abe:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8002ac2:	4410      	add	r0, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	4473      	add	r3, lr
 8002ac8:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002aca:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8002ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ad0:	9300      	str	r3, [sp, #0]
    BB = B;
 8002ad2:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8002ad6:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8002ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8002ada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8002adc:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	e005      	b.n	8002af0 <mouseDriver_sendMsg.constprop.3+0x70c>
 8002ae4:	4667      	mov	r7, ip
 8002ae6:	46c6      	mov	lr, r8
 8002ae8:	46ac      	mov	ip, r5
 8002aea:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8002aec:	4615      	mov	r5, r2
	EE = DD + T1;
 8002aee:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002af0:	ea2e 0004 	bic.w	r0, lr, r4
 8002af4:	ea08 0204 	and.w	r2, r8, r4
 8002af8:	4042      	eors	r2, r0
 8002afa:	4841      	ldr	r0, [pc, #260]	; (8002c00 <mouseDriver_sendMsg.constprop.3+0x81c>)
 8002afc:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8002b00:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8002b04:	9001      	str	r0, [sp, #4]
 8002b06:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8002b0a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8002b0e:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8002b12:	440a      	add	r2, r1
 8002b14:	4402      	add	r2, r0
 8002b16:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b18:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002b1c:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b1e:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002b22:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b24:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8002b28:	9b00      	ldr	r3, [sp, #0]
 8002b2a:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b2c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8002b30:	ea0b 0b05 	and.w	fp, fp, r5
 8002b34:	ea8b 0b00 	eor.w	fp, fp, r0
 8002b38:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8002b3c:	3601      	adds	r6, #1
	EE = DD + T1;
 8002b3e:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b40:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8002b42:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8002b44:	4618      	mov	r0, r3
	AA = T1 + T2;
 8002b46:	440a      	add	r2, r1
 8002b48:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8002b4a:	d1cb      	bne.n	8002ae4 <mouseDriver_sendMsg.constprop.3+0x700>
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4602      	mov	r2, r0
    D += DD;
 8002b50:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8002b52:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8002b54:	4438      	add	r0, r7
 8002b56:	4607      	mov	r7, r0
    E += EE;
 8002b58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b5a:	4410      	add	r0, r2
 8002b5c:	4602      	mov	r2, r0
    F += FF;
 8002b5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8002b60:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8002b62:	440b      	add	r3, r1
    F += FF;
 8002b64:	4420      	add	r0, r4
 8002b66:	4604      	mov	r4, r0
    A += AA;
 8002b68:	4619      	mov	r1, r3
    G += GG;
 8002b6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8002b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8002b6e:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8002b70:	442b      	add	r3, r5
    G += GG;
 8002b72:	4440      	add	r0, r8
    B += BB;
 8002b74:	461d      	mov	r5, r3
    G += GG;
 8002b76:	4606      	mov	r6, r0
    C += CC;
 8002b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8002b7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8002b7c:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8002b7e:	4463      	add	r3, ip
    H += HH;
 8002b80:	4470      	add	r0, lr
    B += BB;
 8002b82:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8002b86:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8002b8a:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8002b8c:	2400      	movs	r4, #0
 8002b8e:	e5e5      	b.n	800275c <mouseDriver_sendMsg.constprop.3+0x378>
		buf[0] = msg->magic;
 8002b90:	4c1c      	ldr	r4, [pc, #112]	; (8002c04 <mouseDriver_sendMsg.constprop.3+0x820>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002b92:	9d02      	ldr	r5, [sp, #8]
		buf[0] = msg->magic;
 8002b94:	7022      	strb	r2, [r4, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002b96:	a998      	add	r1, sp, #608	; 0x260
 8002b98:	1da0      	adds	r0, r4, #6
 8002b9a:	462a      	mov	r2, r5
		buf[1] = length;
 8002b9c:	7065      	strb	r5, [r4, #1]
		buf[2] = msg->seq;
 8002b9e:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 8002ba2:	f884 c003 	strb.w	ip, [r4, #3]
		buf[4] = msg->compid;
 8002ba6:	7127      	strb	r7, [r4, #4]
		buf[5] = msg->msgid & 0xFF;
 8002ba8:	7166      	strb	r6, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002baa:	f00b fb0a 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8002bae:	462b      	mov	r3, r5
 8002bb0:	3306      	adds	r3, #6
 8002bb2:	18e2      	adds	r2, r4, r3
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002bb4:	9904      	ldr	r1, [sp, #16]
 8002bb6:	54e1      	strb	r1, [r4, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002bb8:	9b05      	ldr	r3, [sp, #20]
 8002bba:	7053      	strb	r3, [r2, #1]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2405      	movs	r4, #5
 8002bc0:	e534      	b.n	800262c <mouseDriver_sendMsg.constprop.3+0x248>
		msg->magic = MAVLINK_STX;
 8002bc2:	22fd      	movs	r2, #253	; 0xfd
 8002bc4:	f88d 2256 	strb.w	r2, [sp, #598]	; 0x256
	while (length > 1 && payload[length-1] == 0) {
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	f041 80fa 	bne.w	8003dc2 <mouseDriver_sendMsg.constprop.3+0x19de>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002bce:	2101      	movs	r1, #1
 8002bd0:	e43c      	b.n	800244c <mouseDriver_sendMsg.constprop.3+0x68>
    uint32_t old_sz = m->sz[0];
 8002bd2:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    m->sz[0] += len * 8;
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
    if (m->sz[0] < old_sz)
 8002bda:	42a5      	cmp	r5, r4
    m->sz[0] += len * 8;
 8002bdc:	943a      	str	r4, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8002bde:	d903      	bls.n	8002be8 <mouseDriver_sendMsg.constprop.3+0x804>
	++m->sz[1];
 8002be0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8002be2:	3301      	adds	r3, #1
 8002be4:	933b      	str	r3, [sp, #236]	; 0xec
 8002be6:	9b02      	ldr	r3, [sp, #8]
    offset = (old_sz / 8) % 64;
 8002be8:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    while(len > 0){
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8224 	beq.w	800303a <mouseDriver_sendMsg.constprop.3+0xc56>
 8002bf2:	9306      	str	r3, [sp, #24]
    const unsigned char *p = (const unsigned char *)v;
 8002bf4:	ab98      	add	r3, sp, #608	; 0x260
 8002bf6:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8002bf8:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8002bfc:	e008      	b.n	8002c10 <mouseDriver_sendMsg.constprop.3+0x82c>
 8002bfe:	bf00      	nop
 8002c00:	0800e200 	.word	0x0800e200
 8002c04:	200000b8 	.word	0x200000b8
    while(len > 0){
 8002c08:	9b06      	ldr	r3, [sp, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8214 	beq.w	8003038 <mouseDriver_sendMsg.constprop.3+0xc54>
 8002c10:	9c06      	ldr	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8002c12:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8002c14:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	bf28      	it	cs
 8002c1c:	4623      	movcs	r3, r4
	len -= l;
 8002c1e:	1ae4      	subs	r4, r4, r3
 8002c20:	9406      	str	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8002c22:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8002c24:	4634      	mov	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8002c26:	4428      	add	r0, r5
	p += l;
 8002c28:	441c      	add	r4, r3
	offset += l;
 8002c2a:	441d      	add	r5, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4631      	mov	r1, r6
	p += l;
 8002c30:	9407      	str	r4, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8002c32:	f00b fac6 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8002c36:	2d40      	cmp	r5, #64	; 0x40
 8002c38:	d1e6      	bne.n	8002c08 <mouseDriver_sendMsg.constprop.3+0x824>
                p2[2] = p1[1];
 8002c3a:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8002c3e:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8002c42:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8002c44:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8002c48:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8002c4a:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8002c4e:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8002c50:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8002c54:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8002c58:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8002c5c:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8002c60:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8002c64:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8002c68:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8002c6c:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8002c70:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8002c74:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8002c78:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8002c7c:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8002c80:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8002c82:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8002c86:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8002c8a:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8002c8e:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8002c92:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8002c96:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8002c9a:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8002c9e:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8002ca2:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8002ca6:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8002caa:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8002cae:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8002cb2:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8002cb6:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8002cba:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8002cbe:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8002cc2:	9100      	str	r1, [sp, #0]
 8002cc4:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8002cc8:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8002ccc:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8002cd0:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8002cd4:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8002cd8:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8002cdc:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8002ce0:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8002ce4:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8002ce8:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8002cec:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8002cf0:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8002cf4:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8002cf8:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8002cfa:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8002cfe:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8002d00:	f88a 2010 	strb.w	r2, [sl, #16]
 8002d04:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8002d08:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8002d0c:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8002d10:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8002d14:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8002d18:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8002d1c:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8002d20:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8002d24:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8002d28:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8002d2c:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8002d30:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8002d34:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8002d36:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8002d3a:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8002d3e:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8002d42:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8002d46:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8002d4a:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8002d4e:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8002d52:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8002d56:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8002d5a:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8002d5e:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8002d62:	f88a 201e 	strb.w	r2, [sl, #30]
 8002d66:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8002d6a:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8002d6e:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8002d72:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8002d76:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8002d7a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8002d7c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8002d7e:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8002d82:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8002d86:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8002d8a:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8002d8e:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8002d92:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8002d96:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8002d9a:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8002d9e:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8002da2:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8002da6:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8002daa:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8002dae:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8002db2:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8002db6:	9c00      	ldr	r4, [sp, #0]
 8002db8:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8002dbc:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8002dc0:	9c01      	ldr	r4, [sp, #4]
 8002dc2:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8002dc6:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8002dca:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8002dce:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8002dd2:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8002dd6:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8002dda:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8002dde:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8002de2:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8002de6:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8002dea:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8002dee:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8002df2:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8002df6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8002df8:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8002dfa:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8002dfe:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8002e02:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8002e06:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8002e0a:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8002e0e:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8002e12:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8002e16:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8002e1a:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8002e1e:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8002e22:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8002e26:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8002e2a:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8002e2e:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8002e32:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8002e36:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8002e38:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8002e3c:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8002e40:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8002e44:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8002e46:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8002e4a:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8002e4c:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8002e4e:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8002e52:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8002e56:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8002e5a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002e5e:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8002e62:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8002e66:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8002e6a:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8002e6e:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8002e72:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8002e76:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8002e7a:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8002e7e:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8002e82:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8002e86:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8002e8a:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8002e8e:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8002e92:	f8da 7000 	ldr.w	r7, [sl]
 8002e96:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8002e9a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002e9e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8002ea2:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8002ea6:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8002ea8:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8002eaa:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8002eac:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8002eae:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8002eb0:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8002eb2:	9940      	ldr	r1, [sp, #256]	; 0x100
 8002eb4:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8002eb6:	9941      	ldr	r1, [sp, #260]	; 0x104
 8002eb8:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8002eba:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8002ebe:	9942      	ldr	r1, [sp, #264]	; 0x108
 8002ec0:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8002ec2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8002ec4:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8002ec6:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8002eca:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8002ecc:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002ed0:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8002ed4:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8002ed8:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002edc:	443a      	add	r2, r7
 8002ede:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8002ee2:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002ee6:	ea4f 4573 	mov.w	r5, r3, ror #17
 8002eea:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8002eee:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002ef2:	440b      	add	r3, r1
 8002ef4:	4422      	add	r2, r4
 8002ef6:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8002efa:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8002efe:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8002f02:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8002f06:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8002f0a:	4403      	add	r3, r0
 8002f0c:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8002f10:	f10c 0c02 	add.w	ip, ip, #2
 8002f14:	4414      	add	r4, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f1c:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8002f20:	f106 0608 	add.w	r6, r6, #8
 8002f24:	d1d4      	bne.n	8002ed0 <mouseDriver_sendMsg.constprop.3+0xaec>
 8002f26:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8002f2a:	ea4f 4271 	mov.w	r2, r1, ror #17
 8002f2e:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8002f32:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f36:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002f3a:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8002f3e:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f42:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8002f46:	4408      	add	r0, r1
 8002f48:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f4c:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8002f50:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8002f54:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8002f58:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8002f5c:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f5e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8002f62:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8002f66:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8002f6a:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8002f6e:	4410      	add	r0, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	4473      	add	r3, lr
 8002f74:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002f76:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8002f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f7c:	9300      	str	r3, [sp, #0]
    BB = B;
 8002f7e:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8002f82:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8002f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8002f86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8002f88:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	e005      	b.n	8002f9c <mouseDriver_sendMsg.constprop.3+0xbb8>
 8002f90:	4667      	mov	r7, ip
 8002f92:	46c6      	mov	lr, r8
 8002f94:	46ac      	mov	ip, r5
 8002f96:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8002f98:	4615      	mov	r5, r2
	EE = DD + T1;
 8002f9a:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002f9c:	ea2e 0004 	bic.w	r0, lr, r4
 8002fa0:	ea08 0204 	and.w	r2, r8, r4
 8002fa4:	4042      	eors	r2, r0
 8002fa6:	4830      	ldr	r0, [pc, #192]	; (8003068 <mouseDriver_sendMsg.constprop.3+0xc84>)
 8002fa8:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8002fac:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8002fb0:	9001      	str	r0, [sp, #4]
 8002fb2:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8002fb6:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8002fba:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8002fbe:	440a      	add	r2, r1
 8002fc0:	4402      	add	r2, r0
 8002fc2:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fc4:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002fc8:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fca:	ea8c 0b07 	eor.w	fp, ip, r7
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002fce:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fd0:	ea0c 0007 	and.w	r0, ip, r7
	EE = DD + T1;
 8002fd4:	9b00      	ldr	r3, [sp, #0]
 8002fd6:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fd8:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8002fdc:	ea0b 0b05 	and.w	fp, fp, r5
 8002fe0:	ea8b 0b00 	eor.w	fp, fp, r0
 8002fe4:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8002fe8:	3601      	adds	r6, #1
	EE = DD + T1;
 8002fea:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fec:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8002fee:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8002ff0:	4618      	mov	r0, r3
	AA = T1 + T2;
 8002ff2:	440a      	add	r2, r1
 8002ff4:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8002ff6:	d1cb      	bne.n	8002f90 <mouseDriver_sendMsg.constprop.3+0xbac>
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4602      	mov	r2, r0
    D += DD;
 8002ffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8002ffe:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8003000:	4407      	add	r7, r0
    E += EE;
 8003002:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003004:	4410      	add	r0, r2
 8003006:	4602      	mov	r2, r0
    F += FF;
 8003008:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 800300a:	9240      	str	r2, [sp, #256]	; 0x100
    F += FF;
 800300c:	4420      	add	r0, r4
    A += AA;
 800300e:	440b      	add	r3, r1
    F += FF;
 8003010:	4604      	mov	r4, r0
    G += GG;
 8003012:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 8003014:	9441      	str	r4, [sp, #260]	; 0x104
    A += AA;
 8003016:	4619      	mov	r1, r3
    B += BB;
 8003018:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 800301a:	4440      	add	r0, r8
    B += BB;
 800301c:	441d      	add	r5, r3
    G += GG;
 800301e:	4606      	mov	r6, r0
    C += CC;
 8003020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8003022:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8003024:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8003026:	4463      	add	r3, ip
    H += HH;
 8003028:	4470      	add	r0, lr
    B += BB;
 800302a:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 800302e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8003032:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8003034:	2500      	movs	r5, #0
 8003036:	e5e7      	b.n	8002c08 <mouseDriver_sendMsg.constprop.3+0x824>
 8003038:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800303a:	2310      	movs	r3, #16
 800303c:	18e3      	adds	r3, r4, r3
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	bf28      	it	cs
 8003044:	2201      	movcs	r2, #1
    m->sz[0] += len * 8;
 8003046:	933a      	str	r3, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8003048:	b112      	cbz	r2, 8003050 <mouseDriver_sendMsg.constprop.3+0xc6c>
	++m->sz[1];
 800304a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800304c:	3301      	adds	r3, #1
 800304e:	933b      	str	r3, [sp, #236]	; 0xec
		mavlink_sign_packet(status->signing,
 8003050:	9a02      	ldr	r2, [sp, #8]
 8003052:	ab98      	add	r3, sp, #608	; 0x260
 8003054:	4413      	add	r3, r2
 8003056:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 8003058:	2302      	movs	r3, #2
 800305a:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 800305e:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8003060:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8003064:	e006      	b.n	8003074 <mouseDriver_sendMsg.constprop.3+0xc90>
 8003066:	bf00      	nop
 8003068:	0800e200 	.word	0x0800e200
    while(len > 0){
 800306c:	9b06      	ldr	r3, [sp, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8213 	beq.w	800349a <mouseDriver_sendMsg.constprop.3+0x10b6>
 8003074:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8003076:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8003078:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800307c:	42ab      	cmp	r3, r5
 800307e:	bf28      	it	cs
 8003080:	462b      	movcs	r3, r5
	len -= l;
 8003082:	1aed      	subs	r5, r5, r3
 8003084:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8003086:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8003088:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800308a:	4420      	add	r0, r4
	p += l;
 800308c:	441d      	add	r5, r3
	offset += l;
 800308e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8003090:	461a      	mov	r2, r3
 8003092:	4631      	mov	r1, r6
	p += l;
 8003094:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8003096:	f00b f894 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800309a:	2c40      	cmp	r4, #64	; 0x40
 800309c:	d1e6      	bne.n	800306c <mouseDriver_sendMsg.constprop.3+0xc88>
                p2[2] = p1[1];
 800309e:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 80030a2:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 80030a6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80030a8:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 80030ac:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80030ae:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 80030b2:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 80030b4:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80030b8:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80030bc:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 80030c0:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 80030c4:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 80030c8:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 80030cc:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 80030d0:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 80030d4:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 80030d8:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 80030dc:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 80030e0:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 80030e4:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 80030e6:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 80030ea:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 80030ee:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 80030f2:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 80030f6:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 80030fa:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 80030fe:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8003102:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8003106:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 800310a:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 800310e:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8003112:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8003116:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 800311a:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 800311e:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8003122:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8003126:	9100      	str	r1, [sp, #0]
 8003128:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 800312c:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8003130:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8003134:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8003138:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 800313c:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8003140:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8003144:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8003148:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 800314c:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8003150:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8003154:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8003158:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 800315c:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800315e:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8003162:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8003164:	f88a 2010 	strb.w	r2, [sl, #16]
 8003168:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 800316c:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8003170:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8003174:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8003178:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 800317c:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8003180:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8003184:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8003188:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 800318c:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8003190:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8003194:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8003198:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 800319a:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 800319e:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 80031a2:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 80031a6:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 80031aa:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 80031ae:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80031b2:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80031b6:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80031ba:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80031be:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 80031c2:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 80031c6:	f88a 201e 	strb.w	r2, [sl, #30]
 80031ca:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 80031ce:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 80031d2:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 80031d6:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 80031da:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 80031de:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80031e0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80031e2:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 80031e6:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 80031ea:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 80031ee:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 80031f2:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 80031f6:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80031fa:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 80031fe:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8003202:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8003206:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 800320a:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 800320e:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8003212:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8003216:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 800321a:	9c00      	ldr	r4, [sp, #0]
 800321c:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8003220:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8003224:	9c01      	ldr	r4, [sp, #4]
 8003226:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 800322a:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 800322e:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8003232:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8003236:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 800323a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 800323e:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8003242:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8003246:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 800324a:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 800324e:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8003252:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8003256:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 800325a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800325c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800325e:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8003262:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8003266:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 800326a:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 800326e:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8003272:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8003276:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 800327a:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 800327e:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8003282:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8003286:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 800328a:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 800328e:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8003292:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8003296:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 800329a:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800329c:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 80032a0:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 80032a4:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 80032a8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 80032aa:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 80032ae:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80032b0:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80032b2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80032b6:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80032ba:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80032be:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80032c2:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80032c6:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80032ca:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80032ce:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80032d2:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 80032d6:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 80032da:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 80032de:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80032e2:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 80032e6:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 80032ea:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 80032ee:	e9c9 6708 	strd	r6, r7, [r9, #32]
 80032f2:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 80032f6:	f8da 7000 	ldr.w	r7, [sl]
 80032fa:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 80032fe:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003302:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8003306:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 800330a:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800330c:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 800330e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8003310:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8003312:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8003314:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8003316:	9940      	ldr	r1, [sp, #256]	; 0x100
 8003318:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 800331a:	9941      	ldr	r1, [sp, #260]	; 0x104
 800331c:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 800331e:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8003322:	9942      	ldr	r1, [sp, #264]	; 0x108
 8003324:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8003326:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8003328:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 800332a:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 800332e:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8003330:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003334:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8003338:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 800333c:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003340:	443a      	add	r2, r7
 8003342:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8003346:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800334a:	ea4f 4573 	mov.w	r5, r3, ror #17
 800334e:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8003352:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003356:	440b      	add	r3, r1
 8003358:	4422      	add	r2, r4
 800335a:	ea4f 11f7 	mov.w	r1, r7, ror #7
 800335e:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8003362:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8003366:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 800336a:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 800336e:	4403      	add	r3, r0
 8003370:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8003374:	f10c 0c02 	add.w	ip, ip, #2
 8003378:	4414      	add	r4, r2
 800337a:	440b      	add	r3, r1
 800337c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003380:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8003384:	f106 0608 	add.w	r6, r6, #8
 8003388:	d1d4      	bne.n	8003334 <mouseDriver_sendMsg.constprop.3+0xf50>
 800338a:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 800338e:	ea4f 4271 	mov.w	r2, r1, ror #17
 8003392:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8003396:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800339a:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800339e:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 80033a2:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80033a6:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 80033aa:	4408      	add	r0, r1
 80033ac:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80033b0:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80033b4:	ea4f 15f6 	mov.w	r5, r6, ror #7
 80033b8:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80033bc:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 80033c0:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80033c2:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80033c6:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 80033ca:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 80033ce:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 80033d2:	4410      	add	r0, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	4473      	add	r3, lr
 80033d8:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80033da:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 80033de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033e0:	9300      	str	r3, [sp, #0]
    BB = B;
 80033e2:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 80033e6:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 80033e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 80033ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 80033ec:	e9dd e80d 	ldrd	lr, r8, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 80033f0:	2600      	movs	r6, #0
 80033f2:	e005      	b.n	8003400 <mouseDriver_sendMsg.constprop.3+0x101c>
 80033f4:	4667      	mov	r7, ip
 80033f6:	46f0      	mov	r8, lr
 80033f8:	46ac      	mov	ip, r5
 80033fa:	46a6      	mov	lr, r4
	AA = T1 + T2;
 80033fc:	4615      	mov	r5, r2
	EE = DD + T1;
 80033fe:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003400:	ea28 0004 	bic.w	r0, r8, r4
 8003404:	ea0e 0204 	and.w	r2, lr, r4
 8003408:	4042      	eors	r2, r0
 800340a:	482e      	ldr	r0, [pc, #184]	; (80034c4 <mouseDriver_sendMsg.constprop.3+0x10e0>)
 800340c:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8003410:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8003414:	9001      	str	r0, [sp, #4]
 8003416:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800341a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 800341e:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003422:	440a      	add	r2, r1
 8003424:	4402      	add	r2, r0
 8003426:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003428:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800342c:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800342e:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003432:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003434:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8003438:	9b00      	ldr	r3, [sp, #0]
 800343a:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800343c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8003440:	ea0b 0b05 	and.w	fp, fp, r5
 8003444:	ea8b 0b00 	eor.w	fp, fp, r0
 8003448:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800344c:	3601      	adds	r6, #1
	EE = DD + T1;
 800344e:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003450:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8003452:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8003454:	4618      	mov	r0, r3
	AA = T1 + T2;
 8003456:	440a      	add	r2, r1
 8003458:	4643      	mov	r3, r8
    for (i = 0; i < 64; i++) {
 800345a:	d1cb      	bne.n	80033f4 <mouseDriver_sendMsg.constprop.3+0x1010>
 800345c:	4611      	mov	r1, r2
 800345e:	4602      	mov	r2, r0
    D += DD;
 8003460:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8003462:	9b08      	ldr	r3, [sp, #32]
    H += HH;
 8003464:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    D += DD;
 8003466:	4407      	add	r7, r0
    E += EE;
 8003468:	980c      	ldr	r0, [sp, #48]	; 0x30
    A += AA;
 800346a:	440b      	add	r3, r1
 800346c:	4619      	mov	r1, r3
    E += EE;
 800346e:	4410      	add	r0, r2
    B += BB;
 8003470:	9b09      	ldr	r3, [sp, #36]	; 0x24
    E += EE;
 8003472:	4602      	mov	r2, r0
    F += FF;
 8003474:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8003476:	9240      	str	r2, [sp, #256]	; 0x100
    B += BB;
 8003478:	442b      	add	r3, r5
    F += FF;
 800347a:	4404      	add	r4, r0
    B += BB;
 800347c:	461d      	mov	r5, r3
    G += GG;
 800347e:	980e      	ldr	r0, [sp, #56]	; 0x38
    C += CC;
 8003480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    F += FF;
 8003482:	9441      	str	r4, [sp, #260]	; 0x104
    C += CC;
 8003484:	4463      	add	r3, ip
    G += GG;
 8003486:	4470      	add	r0, lr
    H += HH;
 8003488:	4446      	add	r6, r8
    B += BB;
 800348a:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 800348e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    G += GG;
 8003492:	9042      	str	r0, [sp, #264]	; 0x108
    H += HH;
 8003494:	9643      	str	r6, [sp, #268]	; 0x10c
	    offset = 0;
 8003496:	2400      	movs	r4, #0
 8003498:	e5e8      	b.n	800306c <mouseDriver_sendMsg.constprop.3+0xc88>
    uint32_t old_sz = m->sz[0];
 800349a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800349c:	2238      	movs	r2, #56	; 0x38
 800349e:	18a2      	adds	r2, r4, r2
 80034a0:	bf28      	it	cs
 80034a2:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 80034a4:	923a      	str	r2, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 80034a6:	b113      	cbz	r3, 80034ae <mouseDriver_sendMsg.constprop.3+0x10ca>
	++m->sz[1];
 80034a8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80034aa:	3301      	adds	r3, #1
 80034ac:	933b      	str	r3, [sp, #236]	; 0xec
    const unsigned char *p = (const unsigned char *)v;
 80034ae:	f20d 336a 	addw	r3, sp, #874	; 0x36a
 80034b2:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 80034b4:	2307      	movs	r3, #7
 80034b6:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 80034ba:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 80034bc:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 80034c0:	e006      	b.n	80034d0 <mouseDriver_sendMsg.constprop.3+0x10ec>
 80034c2:	bf00      	nop
 80034c4:	0800e200 	.word	0x0800e200
    while(len > 0){
 80034c8:	9b06      	ldr	r3, [sp, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8216 	beq.w	80038fc <mouseDriver_sendMsg.constprop.3+0x1518>
 80034d0:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80034d2:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 80034d4:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 80034d8:	42ab      	cmp	r3, r5
 80034da:	bf28      	it	cs
 80034dc:	462b      	movcs	r3, r5
	len -= l;
 80034de:	1aed      	subs	r5, r5, r3
 80034e0:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80034e2:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 80034e4:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80034e6:	4420      	add	r0, r4
	p += l;
 80034e8:	441d      	add	r5, r3
	offset += l;
 80034ea:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 80034ec:	461a      	mov	r2, r3
 80034ee:	4631      	mov	r1, r6
	p += l;
 80034f0:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 80034f2:	f00a fe66 	bl	800e1c2 <memcpy>
	if(offset == 64){
 80034f6:	2c40      	cmp	r4, #64	; 0x40
 80034f8:	d1e6      	bne.n	80034c8 <mouseDriver_sendMsg.constprop.3+0x10e4>
                p2[2] = p1[1];
 80034fa:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 80034fe:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8003502:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8003504:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8003508:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800350a:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 800350e:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8003510:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8003514:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8003518:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 800351c:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8003520:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8003524:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8003528:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 800352c:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8003530:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8003534:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8003538:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 800353c:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8003540:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8003542:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8003546:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 800354a:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 800354e:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8003552:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8003556:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 800355a:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 800355e:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8003562:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8003566:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 800356a:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 800356e:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8003572:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8003576:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 800357a:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 800357e:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8003582:	9100      	str	r1, [sp, #0]
 8003584:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8003588:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 800358c:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8003590:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8003594:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8003598:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 800359c:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 80035a0:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 80035a4:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 80035a8:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 80035ac:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 80035b0:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 80035b4:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 80035b8:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80035ba:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 80035be:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 80035c0:	f88a 2010 	strb.w	r2, [sl, #16]
 80035c4:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 80035c8:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 80035cc:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 80035d0:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 80035d4:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 80035d8:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 80035dc:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 80035e0:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 80035e4:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 80035e8:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 80035ec:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 80035f0:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 80035f4:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 80035f6:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 80035fa:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 80035fe:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8003602:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8003606:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 800360a:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 800360e:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8003612:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8003616:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 800361a:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 800361e:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8003622:	f88a 201e 	strb.w	r2, [sl, #30]
 8003626:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 800362a:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 800362e:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8003632:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8003636:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 800363a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800363c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800363e:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8003642:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8003646:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 800364a:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 800364e:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8003652:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8003656:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 800365a:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 800365e:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8003662:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8003666:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 800366a:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 800366e:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8003672:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8003676:	9c00      	ldr	r4, [sp, #0]
 8003678:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 800367c:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8003680:	9c01      	ldr	r4, [sp, #4]
 8003682:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8003686:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 800368a:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 800368e:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8003692:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8003696:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 800369a:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 800369e:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 80036a2:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 80036a6:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 80036aa:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 80036ae:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 80036b2:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 80036b6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80036b8:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80036ba:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 80036be:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 80036c2:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 80036c6:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 80036ca:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 80036ce:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 80036d2:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 80036d6:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 80036da:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 80036de:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 80036e2:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 80036e6:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 80036ea:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 80036ee:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 80036f2:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 80036f6:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80036f8:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 80036fc:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8003700:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8003704:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8003706:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 800370a:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 800370c:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 800370e:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8003712:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8003716:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 800371a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800371e:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8003722:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8003726:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800372a:	e9c9 2302 	strd	r2, r3, [r9, #8]
 800372e:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8003732:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8003736:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 800373a:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800373e:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8003742:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8003746:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 800374a:	e9c9 6708 	strd	r6, r7, [r9, #32]
 800374e:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8003752:	f8da 7000 	ldr.w	r7, [sl]
 8003756:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800375a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800375e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8003762:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8003766:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8003768:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 800376a:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800376c:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 800376e:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8003770:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8003772:	9940      	ldr	r1, [sp, #256]	; 0x100
 8003774:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8003776:	9941      	ldr	r1, [sp, #260]	; 0x104
 8003778:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 800377a:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 800377e:	9942      	ldr	r1, [sp, #264]	; 0x108
 8003780:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8003782:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8003784:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8003786:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 800378a:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 800378c:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003790:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8003794:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8003798:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800379c:	443a      	add	r2, r7
 800379e:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 80037a2:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80037a6:	ea4f 4573 	mov.w	r5, r3, ror #17
 80037aa:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80037ae:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80037b2:	440b      	add	r3, r1
 80037b4:	4422      	add	r2, r4
 80037b6:	ea4f 11f7 	mov.w	r1, r7, ror #7
 80037ba:	ea4f 44b0 	mov.w	r4, r0, ror #18
 80037be:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 80037c2:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 80037c6:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 80037ca:	4403      	add	r3, r0
 80037cc:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 80037d0:	f10c 0c02 	add.w	ip, ip, #2
 80037d4:	4414      	add	r4, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80037dc:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 80037e0:	f106 0608 	add.w	r6, r6, #8
 80037e4:	d1d4      	bne.n	8003790 <mouseDriver_sendMsg.constprop.3+0x13ac>
 80037e6:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 80037ea:	ea4f 4271 	mov.w	r2, r1, ror #17
 80037ee:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80037f2:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80037f6:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80037fa:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 80037fe:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003802:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8003806:	4408      	add	r0, r1
 8003808:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800380c:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8003810:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8003814:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8003818:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 800381c:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800381e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003822:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8003826:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 800382a:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800382e:	4410      	add	r0, r2
 8003830:	440b      	add	r3, r1
 8003832:	4473      	add	r3, lr
 8003834:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003836:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 800383a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800383c:	9300      	str	r3, [sp, #0]
    BB = B;
 800383e:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8003842:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8003844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8003846:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8003848:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 800384c:	2600      	movs	r6, #0
 800384e:	e005      	b.n	800385c <mouseDriver_sendMsg.constprop.3+0x1478>
 8003850:	4667      	mov	r7, ip
 8003852:	46c6      	mov	lr, r8
 8003854:	46ac      	mov	ip, r5
 8003856:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8003858:	4615      	mov	r5, r2
	EE = DD + T1;
 800385a:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800385c:	ea2e 0004 	bic.w	r0, lr, r4
 8003860:	ea08 0204 	and.w	r2, r8, r4
 8003864:	4042      	eors	r2, r0
 8003866:	4842      	ldr	r0, [pc, #264]	; (8003970 <mouseDriver_sendMsg.constprop.3+0x158c>)
 8003868:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800386c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8003870:	9001      	str	r0, [sp, #4]
 8003872:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8003876:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 800387a:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 800387e:	440a      	add	r2, r1
 8003880:	4402      	add	r2, r0
 8003882:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003884:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003888:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800388a:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800388e:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003890:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8003894:	9b00      	ldr	r3, [sp, #0]
 8003896:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003898:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 800389c:	ea0b 0b05 	and.w	fp, fp, r5
 80038a0:	ea8b 0b00 	eor.w	fp, fp, r0
 80038a4:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80038a8:	3601      	adds	r6, #1
	EE = DD + T1;
 80038aa:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80038ac:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80038ae:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80038b0:	4618      	mov	r0, r3
	AA = T1 + T2;
 80038b2:	440a      	add	r2, r1
 80038b4:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 80038b6:	d1cb      	bne.n	8003850 <mouseDriver_sendMsg.constprop.3+0x146c>
 80038b8:	4611      	mov	r1, r2
 80038ba:	4602      	mov	r2, r0
    D += DD;
 80038bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 80038be:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 80038c0:	4438      	add	r0, r7
 80038c2:	4607      	mov	r7, r0
    E += EE;
 80038c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038c6:	4410      	add	r0, r2
 80038c8:	4602      	mov	r2, r0
    F += FF;
 80038ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 80038cc:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 80038ce:	440b      	add	r3, r1
    F += FF;
 80038d0:	4420      	add	r0, r4
 80038d2:	4604      	mov	r4, r0
    A += AA;
 80038d4:	4619      	mov	r1, r3
    G += GG;
 80038d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 80038d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 80038da:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 80038dc:	442b      	add	r3, r5
    G += GG;
 80038de:	4440      	add	r0, r8
    B += BB;
 80038e0:	461d      	mov	r5, r3
    G += GG;
 80038e2:	4606      	mov	r6, r0
    C += CC;
 80038e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 80038e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 80038e8:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 80038ea:	4463      	add	r3, ip
    H += HH;
 80038ec:	4470      	add	r0, lr
    B += BB;
 80038ee:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 80038f2:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 80038f6:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 80038f8:	2400      	movs	r4, #0
 80038fa:	e5e5      	b.n	80034c8 <mouseDriver_sendMsg.constprop.3+0x10e4>
 80038fc:	461f      	mov	r7, r3
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80038fe:	4639      	mov	r1, r7
    *zeros = 0x80;
 8003900:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8003902:	2247      	movs	r2, #71	; 0x47
 8003904:	f10d 00a1 	add.w	r0, sp, #161	; 0xa1
    unsigned offset = (m->sz[0] / 8) % 64;
 8003908:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    *zeros = 0x80;
 800390a:	f88a 3000 	strb.w	r3, [sl]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800390e:	f00a fc63 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8003912:	9b3b      	ldr	r3, [sp, #236]	; 0xec
	    offset = 0;
 8003914:	f8cd a018 	str.w	sl, [sp, #24]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003918:	0e19      	lsrs	r1, r3, #24
    unsigned offset = (m->sz[0] / 8) % 64;
 800391a:	f3c5 04c5 	ubfx	r4, r5, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800391e:	463a      	mov	r2, r7
 8003920:	f361 0207 	bfi	r2, r1, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8003924:	f1c4 0677 	rsb	r6, r4, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003928:	0c19      	lsrs	r1, r3, #16
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800392a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800392e:	f361 220f 	bfi	r2, r1, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003932:	0a19      	lsrs	r1, r3, #8
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003934:	f361 4217 	bfi	r2, r1, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8003938:	eb0a 0106 	add.w	r1, sl, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800393c:	0a28      	lsrs	r0, r5, #8
 800393e:	71c8      	strb	r0, [r1, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8003940:	0c28      	lsrs	r0, r5, #16
    mavlink_sha256_update(m, zeros, dstart + 8);
 8003942:	f106 0709 	add.w	r7, r6, #9
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8003946:	7188      	strb	r0, [r1, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8003948:	0e28      	lsrs	r0, r5, #24
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800394a:	720d      	strb	r5, [r1, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800394c:	7148      	strb	r0, [r1, #5]
    m->sz[0] += len * 8;
 800394e:	00f9      	lsls	r1, r7, #3
 8003950:	186d      	adds	r5, r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8003952:	f106 0601 	add.w	r6, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003956:	f363 621f 	bfi	r2, r3, #24, #8
	++m->sz[1];
 800395a:	bf28      	it	cs
 800395c:	3301      	addcs	r3, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800395e:	f84a 2006 	str.w	r2, [sl, r6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8003962:	9701      	str	r7, [sp, #4]
    m->sz[0] += len * 8;
 8003964:	953a      	str	r5, [sp, #232]	; 0xe8
	++m->sz[1];
 8003966:	bf28      	it	cs
 8003968:	933b      	strcs	r3, [sp, #236]	; 0xec
	data[i] = in[i];
 800396a:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 800396e:	e005      	b.n	800397c <mouseDriver_sendMsg.constprop.3+0x1598>
 8003970:	0800e200 	.word	0x0800e200
    while(len > 0){
 8003974:	9b01      	ldr	r3, [sp, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8209 	beq.w	8003d8e <mouseDriver_sendMsg.constprop.3+0x19aa>
 800397c:	9d01      	ldr	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 800397e:	9e06      	ldr	r6, [sp, #24]
	uint32_t l = 64 - offset;
 8003980:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8003984:	42ab      	cmp	r3, r5
 8003986:	bf28      	it	cs
 8003988:	462b      	movcs	r3, r5
	len -= l;
 800398a:	1aed      	subs	r5, r5, r3
 800398c:	9501      	str	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 800398e:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8003990:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8003992:	4420      	add	r0, r4
	p += l;
 8003994:	441d      	add	r5, r3
	offset += l;
 8003996:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8003998:	461a      	mov	r2, r3
 800399a:	4631      	mov	r1, r6
	p += l;
 800399c:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 800399e:	f00a fc10 	bl	800e1c2 <memcpy>
	if(offset == 64){
 80039a2:	2c40      	cmp	r4, #64	; 0x40
 80039a4:	d1e6      	bne.n	8003974 <mouseDriver_sendMsg.constprop.3+0x1590>
                p2[2] = p1[1];
 80039a6:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[0] = p1[3];
 80039aa:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80039ae:	f89d 511a 	ldrb.w	r5, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 80039b2:	9100      	str	r1, [sp, #0]
                p2[1] = p1[2];
 80039b4:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80039b8:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 80039bc:	f89d a110 	ldrb.w	sl, [sp, #272]	; 0x110
                p2[0] = p1[3];
 80039c0:	f89d 8117 	ldrb.w	r8, [sp, #279]	; 0x117
                p2[1] = p1[2];
 80039c4:	f89d e116 	ldrb.w	lr, [sp, #278]	; 0x116
                p2[2] = p1[1];
 80039c8:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
                p2[3] = p1[0];
 80039cc:	f89d 7114 	ldrb.w	r7, [sp, #276]	; 0x114
                p2[0] = p1[3];
 80039d0:	f89d 611b 	ldrb.w	r6, [sp, #283]	; 0x11b
                p2[3] = p1[0];
 80039d4:	f89d 4118 	ldrb.w	r4, [sp, #280]	; 0x118
                p2[0] = p1[3];
 80039d8:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[1] = p1[2];
 80039dc:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 80039e0:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
                p2[1] = p1[2];
 80039e4:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
                p2[2] = p1[1];
 80039e8:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
 80039ec:	9d00      	ldr	r5, [sp, #0]
                p2[1] = p1[2];
 80039ee:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
                p2[2] = p1[1];
 80039f2:	f88d b062 	strb.w	fp, [sp, #98]	; 0x62
                p2[3] = p1[0];
 80039f6:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 80039fa:	f88d a063 	strb.w	sl, [sp, #99]	; 0x63
                p2[0] = p1[3];
 80039fe:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
                p2[1] = p1[2];
 8003a02:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
                p2[2] = p1[1];
 8003a06:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
                p2[3] = p1[0];
 8003a0a:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
                p2[0] = p1[3];
 8003a0e:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
                p2[2] = p1[1];
 8003a12:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
                p2[3] = p1[0];
 8003a16:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
                p2[0] = p1[3];
 8003a1a:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
                p2[1] = p1[2];
 8003a1e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
                p2[2] = p1[1];
 8003a22:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003a26:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8003a2a:	f89d 512a 	ldrb.w	r5, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8003a2e:	9100      	str	r1, [sp, #0]
                p2[0] = p1[3];
 8003a30:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[2] = p1[1];
 8003a34:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8003a38:	f89d a120 	ldrb.w	sl, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8003a3c:	f89d 8127 	ldrb.w	r8, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8003a40:	f89d e126 	ldrb.w	lr, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8003a44:	f89d c125 	ldrb.w	ip, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8003a48:	f89d 7124 	ldrb.w	r7, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8003a4c:	f89d 612b 	ldrb.w	r6, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8003a50:	f89d 4128 	ldrb.w	r4, [sp, #296]	; 0x128
                p2[0] = p1[3];
 8003a54:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[3] = p1[0];
 8003a58:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
                p2[1] = p1[2];
 8003a5c:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
 8003a60:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8003a64:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
                p2[2] = p1[1];
 8003a68:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8003a6a:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
                p2[1] = p1[2];
 8003a6e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
                p2[2] = p1[1];
 8003a72:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[3] = p1[0];
 8003a76:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
                p2[2] = p1[1];
 8003a7a:	f88d b072 	strb.w	fp, [sp, #114]	; 0x72
                p2[3] = p1[0];
 8003a7e:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
                p2[0] = p1[3];
 8003a82:	f88d 8074 	strb.w	r8, [sp, #116]	; 0x74
                p2[1] = p1[2];
 8003a86:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
                p2[2] = p1[1];
 8003a8a:	f88d c076 	strb.w	ip, [sp, #118]	; 0x76
                p2[3] = p1[0];
 8003a8e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
                p2[0] = p1[3];
 8003a92:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
                p2[2] = p1[1];
 8003a96:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
                p2[3] = p1[0];
 8003a9a:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
                p2[0] = p1[3];
 8003a9e:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
                p2[1] = p1[2];
 8003aa2:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
                p2[2] = p1[1];
 8003aa6:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[1] = p1[2];
 8003aaa:	f89d 513a 	ldrb.w	r5, [sp, #314]	; 0x13a
                p2[2] = p1[1];
 8003aae:	9100      	str	r1, [sp, #0]
 8003ab0:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8003ab4:	f89d a130 	ldrb.w	sl, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8003ab8:	f89d 8137 	ldrb.w	r8, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8003abc:	f89d e136 	ldrb.w	lr, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8003ac0:	f89d c135 	ldrb.w	ip, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8003ac4:	f89d 7134 	ldrb.w	r7, [sp, #308]	; 0x134
                p2[0] = p1[3];
 8003ac8:	f89d 613b 	ldrb.w	r6, [sp, #315]	; 0x13b
                p2[3] = p1[0];
 8003acc:	f89d 4138 	ldrb.w	r4, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8003ad0:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[2] = p1[1];
 8003ad4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
                p2[3] = p1[0];
 8003ad8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
                p2[0] = p1[3];
 8003adc:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[1] = p1[2];
 8003ae0:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[0] = p1[3];
 8003ae4:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
                p2[1] = p1[2];
 8003ae8:	f88d 5089 	strb.w	r5, [sp, #137]	; 0x89
                p2[2] = p1[1];
 8003aec:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8003aee:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
                p2[1] = p1[2];
 8003af2:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
                p2[2] = p1[1];
 8003af6:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8003afa:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8003afe:	f88d b082 	strb.w	fp, [sp, #130]	; 0x82
                p2[3] = p1[0];
 8003b02:	f88d a083 	strb.w	sl, [sp, #131]	; 0x83
                p2[0] = p1[3];
 8003b06:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
                p2[1] = p1[2];
 8003b0a:	f88d e085 	strb.w	lr, [sp, #133]	; 0x85
                p2[2] = p1[1];
 8003b0e:	f88d c086 	strb.w	ip, [sp, #134]	; 0x86
                p2[3] = p1[0];
 8003b12:	f88d 7087 	strb.w	r7, [sp, #135]	; 0x87
                p2[0] = p1[3];
 8003b16:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
                p2[2] = p1[1];
 8003b1a:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
                p2[3] = p1[0];
 8003b1e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
                p2[0] = p1[3];
 8003b22:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                p2[1] = p1[2];
 8003b26:	f88d 108d 	strb.w	r1, [sp, #141]	; 0x8d
                p2[2] = p1[1];
 8003b2a:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[1] = p1[2];
 8003b2e:	f89d 514a 	ldrb.w	r5, [sp, #330]	; 0x14a
                p2[2] = p1[1];
 8003b32:	9100      	str	r1, [sp, #0]
 8003b34:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[3] = p1[0];
 8003b38:	f89d a140 	ldrb.w	sl, [sp, #320]	; 0x140
                p2[2] = p1[1];
 8003b3c:	f89d c145 	ldrb.w	ip, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8003b40:	f89d 7144 	ldrb.w	r7, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8003b44:	f89d 614b 	ldrb.w	r6, [sp, #331]	; 0x14b
 8003b48:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
                p2[1] = p1[2];
 8003b4c:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[2] = p1[1];
 8003b50:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
                p2[3] = p1[0];
 8003b54:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                p2[0] = p1[3];
 8003b58:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[1] = p1[2];
 8003b5c:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[0] = p1[3];
 8003b60:	f89d 8147 	ldrb.w	r8, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8003b64:	f89d e146 	ldrb.w	lr, [sp, #326]	; 0x146
                p2[3] = p1[0];
 8003b68:	f89d 4148 	ldrb.w	r4, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8003b6c:	f88d 5099 	strb.w	r5, [sp, #153]	; 0x99
                p2[2] = p1[1];
 8003b70:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8003b72:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
                p2[1] = p1[2];
 8003b76:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
                p2[2] = p1[1];
 8003b7a:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8003b7e:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8003b82:	f88d b092 	strb.w	fp, [sp, #146]	; 0x92
                p2[3] = p1[0];
 8003b86:	f88d a093 	strb.w	sl, [sp, #147]	; 0x93
                p2[2] = p1[1];
 8003b8a:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
                p2[3] = p1[0];
 8003b8e:	f88d 7097 	strb.w	r7, [sp, #151]	; 0x97
                p2[0] = p1[3];
 8003b92:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
                p2[2] = p1[1];
 8003b96:	f88d 509a 	strb.w	r5, [sp, #154]	; 0x9a
                p2[0] = p1[3];
 8003b9a:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
                p2[1] = p1[2];
 8003b9e:	f88d e095 	strb.w	lr, [sp, #149]	; 0x95
                p2[3] = p1[0];
 8003ba2:	f88d 409b 	strb.w	r4, [sp, #155]	; 0x9b
                p2[0] = p1[3];
 8003ba6:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                p2[1] = p1[2];
 8003baa:	f88d 109d 	strb.w	r1, [sp, #157]	; 0x9d
	data[i] = in[i];
 8003bae:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003bb2:	e9c9 0102 	strd	r0, r1, [r9, #8]
 8003bb6:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
                p2[2] = p1[1];
 8003bba:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
                p2[3] = p1[0];
 8003bbe:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    AA = A;
 8003bc2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8003bc4:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8003bc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003bc8:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8003bcc:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 8003bd0:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8003bd4:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8003bd8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8003bda:	9108      	str	r1, [sp, #32]
	data[i] = in[i];
 8003bdc:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
    CC = C;
 8003be0:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8003be2:	9109      	str	r1, [sp, #36]	; 0x24
	data[i] = in[i];
 8003be4:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    DD = D;
 8003be8:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8003bea:	910a      	str	r1, [sp, #40]	; 0x28
	data[i] = in[i];
 8003bec:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8003bf0:	e9c9 230c 	strd	r2, r3, [r9, #48]	; 0x30
 8003bf4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8003bf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    EE = E;
 8003bf8:	9940      	ldr	r1, [sp, #256]	; 0x100
	data[i] = in[i];
 8003bfa:	9826      	ldr	r0, [sp, #152]	; 0x98
 8003bfc:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    EE = E;
 8003c00:	910b      	str	r1, [sp, #44]	; 0x2c
	data[i] = in[i];
 8003c02:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8003c06:	e9c9 ab0a 	strd	sl, fp, [r9, #40]	; 0x28
    FF = F;
 8003c0a:	9941      	ldr	r1, [sp, #260]	; 0x104
 8003c0c:	910c      	str	r1, [sp, #48]	; 0x30
	data[i] = in[i];
 8003c0e:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8003c12:	9942      	ldr	r1, [sp, #264]	; 0x108
 8003c14:	910d      	str	r1, [sp, #52]	; 0x34
    HH = H;
 8003c16:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8003c18:	910e      	str	r1, [sp, #56]	; 0x38
	data[i] = in[i];
 8003c1a:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 8003c1e:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8003c20:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c24:	ea4f 41f0 	mov.w	r1, r0, ror #19
 8003c28:	ea81 4170 	eor.w	r1, r1, r0, ror #17
 8003c2c:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003c30:	4438      	add	r0, r7
 8003c32:	e9d6 1409 	ldrd	r1, r4, [r6, #36]	; 0x24
 8003c36:	e9d6 5701 	ldrd	r5, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c3a:	ea4f 4273 	mov.w	r2, r3, ror #17
 8003c3e:	ea82 42f3 	eor.w	r2, r2, r3, ror #19
 8003c42:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003c46:	4423      	add	r3, r4
 8003c48:	4401      	add	r1, r0
 8003c4a:	ea4f 14f7 	mov.w	r4, r7, ror #7
 8003c4e:	ea4f 40b5 	mov.w	r0, r5, ror #18
 8003c52:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 8003c56:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 8003c5a:	195a      	adds	r2, r3, r5
 8003c5c:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 8003c60:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 8003c64:	f10c 0c02 	add.w	ip, ip, #2
 8003c68:	4408      	add	r0, r1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c70:	e9c6 0310 	strd	r0, r3, [r6, #64]	; 0x40
 8003c74:	f106 0608 	add.w	r6, r6, #8
 8003c78:	d1d4      	bne.n	8003c24 <mouseDriver_sendMsg.constprop.3+0x1840>
 8003c7a:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8003c7e:	ea4f 45f1 	mov.w	r5, r1, ror #19
 8003c82:	ea85 4571 	eor.w	r5, r5, r1, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8003c86:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c8a:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003c8e:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 8003c92:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c96:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8003c9a:	4408      	add	r0, r1
 8003c9c:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003ca0:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8003ca4:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8003ca8:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8003cac:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8003cb0:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003cb2:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003cb6:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8003cba:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8003cbe:	4428      	add	r0, r5
 8003cc0:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	4473      	add	r3, lr
 8003cc8:	4402      	add	r2, r0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003cca:	e9c9 233e 	strd	r2, r3, [r9, #248]	; 0xf8
    CC = C;
 8003cce:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    AA = A;
 8003cd2:	e9dd 5c07 	ldrd	r5, ip, [sp, #28]
    FF = F;
 8003cd6:	e9dd 8e0c 	ldrd	r8, lr, [sp, #48]	; 0x30
    HH = H;
 8003cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    EE = E;
 8003cdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    for (i = 0; i < 64; i++) {
 8003cde:	2600      	movs	r6, #0
 8003ce0:	e005      	b.n	8003cee <mouseDriver_sendMsg.constprop.3+0x190a>
 8003ce2:	4667      	mov	r7, ip
 8003ce4:	46c6      	mov	lr, r8
 8003ce6:	46ac      	mov	ip, r5
 8003ce8:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8003cea:	4615      	mov	r5, r2
	EE = DD + T1;
 8003cec:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003cee:	ea2e 0204 	bic.w	r2, lr, r4
 8003cf2:	ea04 0b08 	and.w	fp, r4, r8
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	465a      	mov	r2, fp
 8003cfa:	4042      	eors	r2, r0
 8003cfc:	484a      	ldr	r0, [pc, #296]	; (8003e28 <mouseDriver_sendMsg.constprop.3+0x1a44>)
 8003cfe:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8003d02:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8003d06:	9000      	str	r0, [sp, #0]
 8003d08:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8003d0c:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8003d10:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003d14:	440a      	add	r2, r1
 8003d16:	4402      	add	r2, r0
 8003d18:	9800      	ldr	r0, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003d1a:	ea4f 3175 	mov.w	r1, r5, ror #13
 8003d1e:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003d22:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003d24:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8003d28:	ea07 000c 	and.w	r0, r7, ip
 8003d2c:	ea0b 0b05 	and.w	fp, fp, r5
 8003d30:	ea8b 0b00 	eor.w	fp, fp, r0
 8003d34:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8003d38:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003d3a:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003d3c:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8003d3e:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8003d40:	eb02 000a 	add.w	r0, r2, sl
 8003d44:	4673      	mov	r3, lr
	AA = T1 + T2;
 8003d46:	440a      	add	r2, r1
 8003d48:	46ba      	mov	sl, r7
    for (i = 0; i < 64; i++) {
 8003d4a:	d1ca      	bne.n	8003ce2 <mouseDriver_sendMsg.constprop.3+0x18fe>
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4602      	mov	r2, r0
    D += DD;
 8003d50:	980a      	ldr	r0, [sp, #40]	; 0x28
    A += AA;
 8003d52:	9b07      	ldr	r3, [sp, #28]
    D += DD;
 8003d54:	4438      	add	r0, r7
 8003d56:	4607      	mov	r7, r0
    E += EE;
 8003d58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003d5a:	4410      	add	r0, r2
 8003d5c:	4602      	mov	r2, r0
    F += FF;
 8003d5e:	980c      	ldr	r0, [sp, #48]	; 0x30
    E += EE;
 8003d60:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8003d62:	440b      	add	r3, r1
    F += FF;
 8003d64:	4404      	add	r4, r0
    A += AA;
 8003d66:	4619      	mov	r1, r3
    G += GG;
 8003d68:	980d      	ldr	r0, [sp, #52]	; 0x34
    B += BB;
 8003d6a:	9b08      	ldr	r3, [sp, #32]
    F += FF;
 8003d6c:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8003d6e:	442b      	add	r3, r5
    G += GG;
 8003d70:	4440      	add	r0, r8
    B += BB;
 8003d72:	461d      	mov	r5, r3
    G += GG;
 8003d74:	4606      	mov	r6, r0
    C += CC;
 8003d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    H += HH;
 8003d78:	980e      	ldr	r0, [sp, #56]	; 0x38
    G += GG;
 8003d7a:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8003d7c:	4463      	add	r3, ip
    H += HH;
 8003d7e:	4470      	add	r0, lr
    B += BB;
 8003d80:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8003d84:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8003d88:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8003d8a:	2400      	movs	r4, #0
 8003d8c:	e5f2      	b.n	8003974 <mouseDriver_sendMsg.constprop.3+0x1590>
    result[0] = p[3];
 8003d8e:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
    result[1] = p[2];
 8003d92:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
    result[0] = p[3];
 8003d96:	f88d 3371 	strb.w	r3, [sp, #881]	; 0x371
    result[2] = p[1];
 8003d9a:	f89d 30f1 	ldrb.w	r3, [sp, #241]	; 0xf1
    result[1] = p[2];
 8003d9e:	f88d 2372 	strb.w	r2, [sp, #882]	; 0x372
    result[3] = p[0];
 8003da2:	f89d 10f0 	ldrb.w	r1, [sp, #240]	; 0xf0
    result[2] = p[1];
 8003da6:	f88d 3373 	strb.w	r3, [sp, #883]	; 0x373
    result[4] = p[7];
 8003daa:	f89d 20f7 	ldrb.w	r2, [sp, #247]	; 0xf7
    result[5] = p[6];
 8003dae:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    result[3] = p[0];
 8003db2:	f88d 1374 	strb.w	r1, [sp, #884]	; 0x374
    result[4] = p[7];
 8003db6:	f88d 2375 	strb.w	r2, [sp, #885]	; 0x375
    result[5] = p[6];
 8003dba:	f88d 3376 	strb.w	r3, [sp, #886]	; 0x376
 8003dbe:	f7fe bbe2 	b.w	8002586 <mouseDriver_sendMsg.constprop.3+0x1a2>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003dc2:	2205      	movs	r2, #5
	msg->compid = component_id;
 8003dc4:	4615      	mov	r5, r2
	msg->sysid = system_id;
 8003dc6:	f88d 325b 	strb.w	r3, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8003dca:	f88d 325c 	strb.w	r3, [sp, #604]	; 0x25c
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003dce:	f88d 2257 	strb.w	r2, [sp, #599]	; 0x257
	msg->compid = component_id;
 8003dd2:	4696      	mov	lr, r2
 8003dd4:	2604      	movs	r6, #4
 8003dd6:	f7fe bb51 	b.w	800247c <mouseDriver_sendMsg.constprop.3+0x98>
	while (length > 1 && payload[length-1] == 0) {
 8003dda:	2504      	movs	r5, #4
		length--;
 8003ddc:	46ae      	mov	lr, r5
	while (length > 1 && payload[length-1] == 0) {
 8003dde:	2603      	movs	r6, #3
 8003de0:	f7fe bb42 	b.w	8002468 <mouseDriver_sendMsg.constprop.3+0x84>
 8003de4:	2503      	movs	r5, #3
		length--;
 8003de6:	46ae      	mov	lr, r5
	while (length > 1 && payload[length-1] == 0) {
 8003de8:	2602      	movs	r6, #2
 8003dea:	f7fe bb3d 	b.w	8002468 <mouseDriver_sendMsg.constprop.3+0x84>
 8003dee:	2502      	movs	r5, #2
		length--;
 8003df0:	46ae      	mov	lr, r5
	while (length > 1 && payload[length-1] == 0) {
 8003df2:	2601      	movs	r6, #1
 8003df4:	f7fe bb38 	b.w	8002468 <mouseDriver_sendMsg.constprop.3+0x84>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003df8:	2105      	movs	r1, #5
	msg->sysid = system_id;
 8003dfa:	2200      	movs	r2, #0
	msg->compid = component_id;
 8003dfc:	460d      	mov	r5, r1
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003dfe:	f88d 1257 	strb.w	r1, [sp, #599]	; 0x257
	msg->compid = component_id;
 8003e02:	468e      	mov	lr, r1
	msg->sysid = system_id;
 8003e04:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8003e08:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
 8003e0c:	f04f 0808 	mov.w	r8, #8
 8003e10:	2604      	movs	r6, #4
 8003e12:	f04f 0c0a 	mov.w	ip, #10
 8003e16:	f7fe bb4c 	b.w	80024b2 <mouseDriver_sendMsg.constprop.3+0xce>
	if (signing) {
 8003e1a:	27fd      	movs	r7, #253	; 0xfd
 8003e1c:	f04f 0808 	mov.w	r8, #8
 8003e20:	f04f 0c0a 	mov.w	ip, #10
 8003e24:	f7fe bb45 	b.w	80024b2 <mouseDriver_sendMsg.constprop.3+0xce>
 8003e28:	0800e200 	.word	0x0800e200

08003e2c <mouseDriver_sendMsg.constprop.2>:
void mouseDriver_sendMsg(uint32_t msgid){
 8003e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e30:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
 8003e34:	e001      	b.n	8003e3a <mouseDriver_sendMsg.constprop.2+0xe>
		HAL_Delay(1);
 8003e36:	f007 fb15 	bl	800b464 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 8003e3a:	f005 fa59 	bl	80092f0 <main_get_huart_tx_state>
 8003e3e:	2802      	cmp	r0, #2
		HAL_Delay(1);
 8003e40:	f04f 0001 	mov.w	r0, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 8003e44:	d0f7      	beq.n	8003e36 <mouseDriver_sendMsg.constprop.2+0xa>
	return (HAL_GetTick());
 8003e46:	f007 fb07 	bl	800b458 <HAL_GetTick>
				actual_speed_measure.time = mouseDriver_getTime();
 8003e4a:	4ab9      	ldr	r2, [pc, #740]	; (8004130 <mouseDriver_sendMsg.constprop.2+0x304>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8003e4c:	4cb9      	ldr	r4, [pc, #740]	; (8004134 <mouseDriver_sendMsg.constprop.2+0x308>)
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y);
 8003e4e:	6855      	ldr	r5, [r2, #4]
 8003e50:	6891      	ldr	r1, [r2, #8]
 8003e52:	6010      	str	r0, [r2, #0]
    packet.speed_x = speed_x;
 8003e54:	9516      	str	r5, [sp, #88]	; 0x58
    packet.time = time;
 8003e56:	aa15      	add	r2, sp, #84	; 0x54
 8003e58:	9015      	str	r0, [sp, #84]	; 0x54
    packet.speed_y = speed_y;
 8003e5a:	9117      	str	r1, [sp, #92]	; 0x5c
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 8003e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e5e:	7b23      	ldrb	r3, [r4, #12]
 8003e60:	ad98      	add	r5, sp, #608	; 0x260
 8003e62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003e66:	f013 0302 	ands.w	r3, r3, #2
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0101 	mov.w	r1, #1
 8003e72:	f88d 125d 	strb.w	r1, [sp, #605]	; 0x25d
 8003e76:	f88d 225e 	strb.w	r2, [sp, #606]	; 0x25e
 8003e7a:	f88d 225f 	strb.w	r2, [sp, #607]	; 0x25f
 8003e7e:	d155      	bne.n	8003f2c <mouseDriver_sendMsg.constprop.2+0x100>
 8003e80:	6922      	ldr	r2, [r4, #16]
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	f000 83eb 	beq.w	800465e <mouseDriver_sendMsg.constprop.2+0x832>
 8003e88:	7810      	ldrb	r0, [r2, #0]
 8003e8a:	4008      	ands	r0, r1
	while (length > 1 && payload[length-1] == 0) {
 8003e8c:	f89d 226b 	ldrb.w	r2, [sp, #619]	; 0x26b
		msg->magic = MAVLINK_STX;
 8003e90:	21fd      	movs	r1, #253	; 0xfd
 8003e92:	f88d 1256 	strb.w	r1, [sp, #598]	; 0x256
	while (length > 1 && payload[length-1] == 0) {
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	f041 84e0 	bne.w	800585c <mouseDriver_sendMsg.constprop.2+0x1a30>
 8003e9c:	f89d 226a 	ldrb.w	r2, [sp, #618]	; 0x26a
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	f041 84e3 	bne.w	800586c <mouseDriver_sendMsg.constprop.2+0x1a40>
 8003ea6:	f89d 2269 	ldrb.w	r2, [sp, #617]	; 0x269
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	f041 84e2 	bne.w	8005874 <mouseDriver_sendMsg.constprop.2+0x1a48>
 8003eb0:	f89d 2268 	ldrb.w	r2, [sp, #616]	; 0x268
 8003eb4:	2a00      	cmp	r2, #0
 8003eb6:	f041 84e1 	bne.w	800587c <mouseDriver_sendMsg.constprop.2+0x1a50>
 8003eba:	f89d 2267 	ldrb.w	r2, [sp, #615]	; 0x267
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	f041 84e0 	bne.w	8005884 <mouseDriver_sendMsg.constprop.2+0x1a58>
 8003ec4:	f89d 2266 	ldrb.w	r2, [sp, #614]	; 0x266
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	f041 84df 	bne.w	800588c <mouseDriver_sendMsg.constprop.2+0x1a60>
 8003ece:	f89d 2265 	ldrb.w	r2, [sp, #613]	; 0x265
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	f041 84de 	bne.w	8005894 <mouseDriver_sendMsg.constprop.2+0x1a68>
 8003ed8:	f89d 2264 	ldrb.w	r2, [sp, #612]	; 0x264
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	f041 84dd 	bne.w	800589c <mouseDriver_sendMsg.constprop.2+0x1a70>
 8003ee2:	f89d 2263 	ldrb.w	r2, [sp, #611]	; 0x263
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	f041 84dc 	bne.w	80058a4 <mouseDriver_sendMsg.constprop.2+0x1a78>
 8003eec:	f89d 2262 	ldrb.w	r2, [sp, #610]	; 0x262
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	f041 84db 	bne.w	80058ac <mouseDriver_sendMsg.constprop.2+0x1a80>
 8003ef6:	f89d 6261 	ldrb.w	r6, [sp, #609]	; 0x261
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	f041 84da 	bne.w	80058b4 <mouseDriver_sendMsg.constprop.2+0x1a88>
 8003f00:	2501      	movs	r5, #1
 8003f02:	46ae      	mov	lr, r5
	msg->sysid = system_id;
 8003f04:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003f06:	f88d e257 	strb.w	lr, [sp, #599]	; 0x257
	msg->sysid = system_id;
 8003f0a:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8003f0e:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
	if (signing) {
 8003f12:	2800      	cmp	r0, #0
 8003f14:	f001 84d2 	beq.w	80058bc <mouseDriver_sendMsg.constprop.2+0x1a90>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8003f18:	2101      	movs	r1, #1
 8003f1a:	f88d 1258 	strb.w	r1, [sp, #600]	; 0x258
 8003f1e:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 8003f22:	f04f 0808 	mov.w	r8, #8
 8003f26:	f04f 0c0a 	mov.w	ip, #10
 8003f2a:	e015      	b.n	8003f58 <mouseDriver_sendMsg.constprop.2+0x12c>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003f2c:	f640 41fe 	movw	r1, #3326	; 0xcfe
	msg->compid = component_id;
 8003f30:	250c      	movs	r5, #12
	msg->sysid = system_id;
 8003f32:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8003f36:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003f3a:	f8ad 1256 	strh.w	r1, [sp, #598]	; 0x256
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003f3e:	46ae      	mov	lr, r5
	msg->compid = component_id;
 8003f40:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 8003f44:	f04f 0804 	mov.w	r8, #4
 8003f48:	260b      	movs	r6, #11
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003f4a:	f04f 0c06 	mov.w	ip, #6
	msg->incompat_flags = 0;
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4610      	mov	r0, r2
 8003f52:	f88d 2258 	strb.w	r2, [sp, #600]	; 0x258
 8003f56:	4611      	mov	r1, r2
	msg->seq = status->current_tx_seq;
 8003f58:	79a2      	ldrb	r2, [r4, #6]
 8003f5a:	f88d 225a 	strb.w	r2, [sp, #602]	; 0x25a
	status->current_tx_seq = status->current_tx_seq + 1;
 8003f5e:	1c57      	adds	r7, r2, #1
 8003f60:	71a7      	strb	r7, [r4, #6]
	msg->compat_flags = 0;
 8003f62:	2700      	movs	r7, #0
	buf[0] = msg->magic;
 8003f64:	f88d 9048 	strb.w	r9, [sp, #72]	; 0x48
	buf[1] = msg->len;
 8003f68:	f88d e049 	strb.w	lr, [sp, #73]	; 0x49
	msg->compat_flags = 0;
 8003f6c:	f88d 7259 	strb.w	r7, [sp, #601]	; 0x259
	if (mavlink1) {
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80b6 	beq.w	80040e2 <mouseDriver_sendMsg.constprop.2+0x2b6>
		buf[5] = msg->msgid & 0xFF;
 8003f76:	2301      	movs	r3, #1
		buf[2] = msg->seq;
 8003f78:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		buf[3] = msg->sysid;
 8003f7c:	f88d 704b 	strb.w	r7, [sp, #75]	; 0x4b
		buf[4] = msg->compid;
 8003f80:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
		buf[5] = msg->msgid & 0xFF;
 8003f84:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8003f88:	f108 0802 	add.w	r8, r8, #2
 8003f8c:	ab12      	add	r3, sp, #72	; 0x48
 8003f8e:	4498      	add	r8, r3
        *crcAccum = X25_INIT_CRC;
 8003f90:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8003f94:	f10d 0e49 	add.w	lr, sp, #73	; 0x49
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003f98:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8003f9c:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8003f9e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003fa2:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003fa4:	091a      	lsrs	r2, r3, #4
 8003fa6:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8003faa:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	while (length--) {
 8003fae:	45c6      	cmp	lr, r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003fb0:	ea87 07c3 	eor.w	r7, r7, r3, lsl #3
	while (length--) {
 8003fb4:	d1f0      	bne.n	8003f98 <mouseDriver_sendMsg.constprop.2+0x16c>
 8003fb6:	360d      	adds	r6, #13
 8003fb8:	ab95      	add	r3, sp, #596	; 0x254
 8003fba:	441e      	add	r6, r3
	const uint8_t *p = (const uint8_t *)pBuffer;
 8003fbc:	a998      	add	r1, sp, #608	; 0x260
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc2:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8003fc4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003fc8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003fca:	091a      	lsrs	r2, r3, #4
 8003fcc:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8003fd0:	ea87 2703 	eor.w	r7, r7, r3, lsl #8
 8003fd4:	ea87 03c3 	eor.w	r3, r7, r3, lsl #3
 8003fd8:	b21b      	sxth	r3, r3
	while (length--) {
 8003fda:	42b1      	cmp	r1, r6
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003fdc:	b29f      	uxth	r7, r3
	while (length--) {
 8003fde:	d1ee      	bne.n	8003fbe <mouseDriver_sendMsg.constprop.2+0x192>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003fe0:	f083 014c 	eor.w	r1, r3, #76	; 0x4c
        tmp ^= (tmp<<4);
 8003fe4:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8003fe8:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003fea:	0a3b      	lsrs	r3, r7, #8
 8003fec:	ea83 1311 	eor.w	r3, r3, r1, lsr #4
 8003ff0:	ea83 2301 	eor.w	r3, r3, r1, lsl #8
 8003ff4:	ea83 01c1 	eor.w	r1, r3, r1, lsl #3
 8003ff8:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003ffa:	aa98      	add	r2, sp, #608	; 0x260
 8003ffc:	b2cb      	uxtb	r3, r1
 8003ffe:	5553      	strb	r3, [r2, r5]
 8004000:	b289      	uxth	r1, r1
 8004002:	9304      	str	r3, [sp, #16]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8004004:	f20d 2261 	addw	r2, sp, #609	; 0x261
 8004008:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 800400c:	0a0d      	lsrs	r5, r1, #8
 800400e:	54d5      	strb	r5, [r2, r3]
 8004010:	9505      	str	r5, [sp, #20]
	msg->checksum = checksum;
 8004012:	f8ad 1254 	strh.w	r1, [sp, #596]	; 0x254
	if (signing) {
 8004016:	2800      	cmp	r0, #0
 8004018:	f040 8090 	bne.w	800413c <mouseDriver_sendMsg.constprop.2+0x310>
 800401c:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8004020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004024:	9b97      	ldr	r3, [sp, #604]	; 0x25c
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8004026:	f89d 2256 	ldrb.w	r2, [sp, #598]	; 0x256
 800402a:	f89d e25a 	ldrb.w	lr, [sp, #602]	; 0x25a
 800402e:	f89d c25b 	ldrb.w	ip, [sp, #603]	; 0x25b
 8004032:	f89d 725c 	ldrb.w	r7, [sp, #604]	; 0x25c
 8004036:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800403a:	2afe      	cmp	r2, #254	; 0xfe
 800403c:	b2de      	uxtb	r6, r3
 800403e:	f000 82f5 	beq.w	800462c <mouseDriver_sendMsg.constprop.2+0x800>
	while (length > 1 && payload[length-1] == 0) {
 8004042:	9802      	ldr	r0, [sp, #8]
 8004044:	2801      	cmp	r0, #1
 8004046:	d915      	bls.n	8004074 <mouseDriver_sendMsg.constprop.2+0x248>
 8004048:	f20d 215f 	addw	r1, sp, #607	; 0x25f
 800404c:	5c09      	ldrb	r1, [r1, r0]
 800404e:	b989      	cbnz	r1, 8004074 <mouseDriver_sendMsg.constprop.2+0x248>
 8004050:	1e41      	subs	r1, r0, #1
 8004052:	b2c8      	uxtb	r0, r1
 8004054:	4601      	mov	r1, r0
 8004056:	310c      	adds	r1, #12
 8004058:	ac95      	add	r4, sp, #596	; 0x254
 800405a:	4421      	add	r1, r4
 800405c:	e005      	b.n	800406a <mouseDriver_sendMsg.constprop.2+0x23e>
 800405e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8004062:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8004066:	b91d      	cbnz	r5, 8004070 <mouseDriver_sendMsg.constprop.2+0x244>
 8004068:	4640      	mov	r0, r8
		length--;
 800406a:	b2c4      	uxtb	r4, r0
	while (length > 1 && payload[length-1] == 0) {
 800406c:	2c01      	cmp	r4, #1
 800406e:	d1f6      	bne.n	800405e <mouseDriver_sendMsg.constprop.2+0x232>
 8004070:	e9cd 4002 	strd	r4, r0, [sp, #8]
		buf[0] = msg->magic;
 8004074:	4d30      	ldr	r5, [pc, #192]	; (8004138 <mouseDriver_sendMsg.constprop.2+0x30c>)
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8004076:	f8dd a00c 	ldr.w	sl, [sp, #12]
		buf[2] = msg->incompat_flags;
 800407a:	f89d 4258 	ldrb.w	r4, [sp, #600]	; 0x258
		buf[3] = msg->compat_flags;
 800407e:	f89d 8259 	ldrb.w	r8, [sp, #601]	; 0x259
		buf[0] = msg->magic;
 8004082:	702a      	strb	r2, [r5, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8004084:	ea4f 2923 	mov.w	r9, r3, asr #8
		buf[1] = length;
 8004088:	9a02      	ldr	r2, [sp, #8]
 800408a:	706a      	strb	r2, [r5, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800408c:	141b      	asrs	r3, r3, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800408e:	a998      	add	r1, sp, #608	; 0x260
 8004090:	4652      	mov	r2, sl
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8004092:	726b      	strb	r3, [r5, #9]
		buf[4] = msg->seq;
 8004094:	f885 e004 	strb.w	lr, [r5, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8004098:	f105 000a 	add.w	r0, r5, #10
		buf[5] = msg->sysid;
 800409c:	f885 c005 	strb.w	ip, [r5, #5]
		buf[6] = msg->compid;
 80040a0:	71af      	strb	r7, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80040a2:	71ee      	strb	r6, [r5, #7]
		buf[3] = msg->compat_flags;
 80040a4:	f885 8003 	strb.w	r8, [r5, #3]
		buf[2] = msg->incompat_flags;
 80040a8:	70ac      	strb	r4, [r5, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80040aa:	f885 9008 	strb.w	r9, [r5, #8]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80040ae:	f00a f888 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80040b2:	4653      	mov	r3, sl
 80040b4:	330a      	adds	r3, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80040b6:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 80040ba:	eb05 0203 	add.w	r2, r5, r3
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80040be:	d122      	bne.n	8004106 <mouseDriver_sendMsg.constprop.2+0x2da>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80040c0:	9804      	ldr	r0, [sp, #16]
 80040c2:	54e8      	strb	r0, [r5, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80040c4:	9b05      	ldr	r3, [sp, #20]
 80040c6:	7053      	strb	r3, [r2, #1]
 80040c8:	2409      	movs	r4, #9
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80040ca:	4421      	add	r1, r4
 80040cc:	9b02      	ldr	r3, [sp, #8]
			main_transmit_buffer(outBuffer, msg_size);
 80040ce:	481a      	ldr	r0, [pc, #104]	; (8004138 <mouseDriver_sendMsg.constprop.2+0x30c>)
 80040d0:	3103      	adds	r1, #3
 80040d2:	4419      	add	r1, r3
 80040d4:	b289      	uxth	r1, r1
}
 80040d6:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 80040da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			main_transmit_buffer(outBuffer, msg_size);
 80040de:	f005 b90f 	b.w	8009300 <main_transmit_buffer>
		buf[7] = msg->msgid & 0xFF;
 80040e2:	2701      	movs	r7, #1
		buf[2] = msg->incompat_flags;
 80040e4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
		buf[3] = msg->compat_flags;
 80040e8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		buf[4] = msg->seq;
 80040ec:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
		buf[5] = msg->sysid;
 80040f0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
		buf[6] = msg->compid;
 80040f4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80040f8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80040fc:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
		buf[7] = msg->msgid & 0xFF;
 8004100:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
 8004104:	e740      	b.n	8003f88 <mouseDriver_sendMsg.constprop.2+0x15c>
		memcpy(&ck[2], msg->signature, signature_len);
 8004106:	a9de      	add	r1, sp, #888	; 0x378
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8004108:	9804      	ldr	r0, [sp, #16]
		memcpy(&ck[2], msg->signature, signature_len);
 800410a:	f851 6d0e 	ldr.w	r6, [r1, #-14]!
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800410e:	54e8      	strb	r0, [r5, r3]
		memcpy(&ck[2], msg->signature, signature_len);
 8004110:	688c      	ldr	r4, [r1, #8]
 8004112:	684d      	ldr	r5, [r1, #4]
 8004114:	7b08      	ldrb	r0, [r1, #12]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8004116:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ck[2], msg->signature, signature_len);
 8004118:	f8c2 400a 	str.w	r4, [r2, #10]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800411c:	7053      	strb	r3, [r2, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800411e:	f8c2 6002 	str.w	r6, [r2, #2]
 8004122:	210d      	movs	r1, #13
 8004124:	f8c2 5006 	str.w	r5, [r2, #6]
 8004128:	7390      	strb	r0, [r2, #14]
 800412a:	2409      	movs	r4, #9
 800412c:	e7cd      	b.n	80040ca <mouseDriver_sendMsg.constprop.2+0x29e>
 800412e:	bf00      	nop
 8004130:	20000044 	.word	0x20000044
 8004134:	20000058 	.word	0x20000058
 8004138:	200000b8 	.word	0x200000b8
		mavlink_sign_packet(status->signing,
 800413c:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8004140:	6926      	ldr	r6, [r4, #16]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8004142:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8004146:	2e00      	cmp	r6, #0
 8004148:	f43f af6c 	beq.w	8004024 <mouseDriver_sendMsg.constprop.2+0x1f8>
 800414c:	7833      	ldrb	r3, [r6, #0]
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	f57f af68 	bpl.w	8004024 <mouseDriver_sendMsg.constprop.2+0x1f8>
	tstamp.t64 = signing->timestamp;
 8004154:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
	signing->timestamp++;
 8004158:	1c62      	adds	r2, r4, #1
	tstamp.t64 = signing->timestamp;
 800415a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	signing->timestamp++;
 800415e:	f145 0300 	adc.w	r3, r5, #0
	memcpy(&signature[1], tstamp.t8, 6);
 8004162:	f8cd 436b 	str.w	r4, [sp, #875]	; 0x36b
    D = 0xa54ff53a;
 8004166:	4d1e      	ldr	r5, [pc, #120]	; (80041e0 <mouseDriver_sendMsg.constprop.2+0x3b4>)
 8004168:	4c1e      	ldr	r4, [pc, #120]	; (80041e4 <mouseDriver_sendMsg.constprop.2+0x3b8>)
	mavlink_sha256_update(&ctx, header, header_len);
 800416a:	f8cd c018 	str.w	ip, [sp, #24]
 800416e:	e9cd 543e 	strd	r5, r4, [sp, #248]	; 0xf8
    E = 0x510e527f;
 8004172:	4c1d      	ldr	r4, [pc, #116]	; (80041e8 <mouseDriver_sendMsg.constprop.2+0x3bc>)
 8004174:	9440      	str	r4, [sp, #256]	; 0x100
	signing->timestamp++;
 8004176:	e9c6 2302 	strd	r2, r3, [r6, #8]
    F = 0x9b05688c;
 800417a:	4c1c      	ldr	r4, [pc, #112]	; (80041ec <mouseDriver_sendMsg.constprop.2+0x3c0>)
 800417c:	9441      	str	r4, [sp, #260]	; 0x104
	memcpy(m->u.save_bytes + offset, p, l);
 800417e:	4637      	mov	r7, r6
    G = 0x1f83d9ab;
 8004180:	4c1b      	ldr	r4, [pc, #108]	; (80041f0 <mouseDriver_sendMsg.constprop.2+0x3c4>)
	memcpy(m->u.save_bytes + offset, p, l);
 8004182:	f857 0f10 	ldr.w	r0, [r7, #16]!
    G = 0x1f83d9ab;
 8004186:	9442      	str	r4, [sp, #264]	; 0x108
    H = 0x5be0cd19;
 8004188:	f104 5474 	add.w	r4, r4, #1023410176	; 0x3d000000
    B = 0xbb67ae85;
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <mouseDriver_sendMsg.constprop.2+0x3c8>)
	memcpy(m->u.save_bytes + offset, p, l);
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68ba      	ldr	r2, [r7, #8]
    B = 0xbb67ae85;
 8004192:	933d      	str	r3, [sp, #244]	; 0xf4
    H = 0x5be0cd19;
 8004194:	f5a4 0423 	sub.w	r4, r4, #10682368	; 0xa30000
	memcpy(m->u.save_bytes + offset, p, l);
 8004198:	68fb      	ldr	r3, [r7, #12]
	signature[0] = signing->link_id;
 800419a:	7876      	ldrb	r6, [r6, #1]
	memcpy(&signature[1], tstamp.t8, 6);
 800419c:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 80041a0:	f8ad 536f 	strh.w	r5, [sp, #879]	; 0x36f
    H = 0x5be0cd19;
 80041a4:	f6a4 4492 	subw	r4, r4, #3218	; 0xc92
 80041a8:	9443      	str	r4, [sp, #268]	; 0x10c
	memcpy(m->u.save_bytes + offset, p, l);
 80041aa:	ac44      	add	r4, sp, #272	; 0x110
 80041ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	signature[0] = signing->link_id;
 80041ae:	f88d 636a 	strb.w	r6, [sp, #874]	; 0x36a
 80041b2:	6938      	ldr	r0, [r7, #16]
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	69fb      	ldr	r3, [r7, #28]
    A = 0x6a09e667;
 80041ba:	4e0f      	ldr	r6, [pc, #60]	; (80041f8 <mouseDriver_sendMsg.constprop.2+0x3cc>)
    const unsigned char *p = (const unsigned char *)v;
 80041bc:	af12      	add	r7, sp, #72	; 0x48
    m->sz[0] += len * 8;
 80041be:	f44f 7580 	mov.w	r5, #256	; 0x100
    const unsigned char *p = (const unsigned char *)v;
 80041c2:	9707      	str	r7, [sp, #28]
    m->sz[0] += len * 8;
 80041c4:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
    A = 0x6a09e667;
 80041c8:	2700      	movs	r7, #0
 80041ca:	e9cd 763b 	strd	r7, r6, [sp, #236]	; 0xec
 80041ce:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
	memcpy(m->u.save_bytes + offset, p, l);
 80041d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	data[i] = in[i];
 80041d4:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    offset = (old_sz / 8) % 64;
 80041d8:	2420      	movs	r4, #32
    m->sz[0] += len * 8;
 80041da:	953a      	str	r5, [sp, #232]	; 0xe8
 80041dc:	e012      	b.n	8004204 <mouseDriver_sendMsg.constprop.2+0x3d8>
 80041de:	bf00      	nop
 80041e0:	3c6ef372 	.word	0x3c6ef372
 80041e4:	a54ff53a 	.word	0xa54ff53a
 80041e8:	510e527f 	.word	0x510e527f
 80041ec:	9b05688c 	.word	0x9b05688c
 80041f0:	1f83d9ab 	.word	0x1f83d9ab
 80041f4:	bb67ae85 	.word	0xbb67ae85
 80041f8:	6a09e667 	.word	0x6a09e667
    while(len > 0){
 80041fc:	9b06      	ldr	r3, [sp, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 822f 	beq.w	8004662 <mouseDriver_sendMsg.constprop.2+0x836>
 8004204:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004206:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8004208:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800420c:	42ab      	cmp	r3, r5
 800420e:	bf28      	it	cs
 8004210:	462b      	movcs	r3, r5
	len -= l;
 8004212:	1aed      	subs	r5, r5, r3
 8004214:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004216:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8004218:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800421a:	4420      	add	r0, r4
	p += l;
 800421c:	441d      	add	r5, r3
	offset += l;
 800421e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8004220:	461a      	mov	r2, r3
 8004222:	4631      	mov	r1, r6
	p += l;
 8004224:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8004226:	f009 ffcc 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800422a:	2c40      	cmp	r4, #64	; 0x40
 800422c:	d1e6      	bne.n	80041fc <mouseDriver_sendMsg.constprop.2+0x3d0>
                p2[2] = p1[1];
 800422e:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8004232:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8004236:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004238:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 800423c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800423e:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8004242:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8004244:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8004248:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 800424c:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8004250:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8004254:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8004258:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 800425c:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8004260:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8004264:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8004268:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 800426c:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8004270:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8004274:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8004276:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 800427a:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 800427e:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8004282:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8004286:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 800428a:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 800428e:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8004292:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8004296:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 800429a:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 800429e:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 80042a2:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 80042a6:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 80042aa:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 80042ae:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 80042b2:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 80042b6:	9100      	str	r1, [sp, #0]
 80042b8:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 80042bc:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 80042c0:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 80042c4:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 80042c8:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 80042cc:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 80042d0:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 80042d4:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 80042d8:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 80042dc:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 80042e0:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 80042e4:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 80042e8:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 80042ec:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80042ee:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 80042f2:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 80042f4:	f88a 2010 	strb.w	r2, [sl, #16]
 80042f8:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 80042fc:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8004300:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8004304:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8004308:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 800430c:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8004310:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8004314:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8004318:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 800431c:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8004320:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8004324:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8004328:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 800432a:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 800432e:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8004332:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8004336:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 800433a:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 800433e:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8004342:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8004346:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 800434a:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 800434e:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8004352:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8004356:	f88a 201e 	strb.w	r2, [sl, #30]
 800435a:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 800435e:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8004362:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8004366:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 800436a:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 800436e:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004370:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8004372:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8004376:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 800437a:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 800437e:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8004382:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8004386:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 800438a:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 800438e:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8004392:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8004396:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 800439a:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 800439e:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 80043a2:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 80043a6:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 80043aa:	9c00      	ldr	r4, [sp, #0]
 80043ac:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 80043b0:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 80043b4:	9c01      	ldr	r4, [sp, #4]
 80043b6:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 80043ba:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 80043be:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 80043c2:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 80043c6:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 80043ca:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 80043ce:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 80043d2:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 80043d6:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 80043da:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 80043de:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 80043e2:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 80043e6:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 80043ea:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80043ec:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80043ee:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 80043f2:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 80043f6:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 80043fa:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 80043fe:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8004402:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8004406:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 800440a:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 800440e:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8004412:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8004416:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 800441a:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 800441e:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8004422:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8004426:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 800442a:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800442c:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8004430:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8004434:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8004438:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 800443a:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 800443e:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8004440:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8004442:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8004446:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 800444a:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 800444e:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8004452:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8004456:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800445a:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800445e:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8004462:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8004466:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 800446a:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 800446e:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8004472:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8004476:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 800447a:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 800447e:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8004482:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8004486:	f8da 7000 	ldr.w	r7, [sl]
 800448a:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800448e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004492:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004496:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 800449a:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800449c:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 800449e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80044a0:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 80044a2:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80044a4:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 80044a6:	9940      	ldr	r1, [sp, #256]	; 0x100
 80044a8:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 80044aa:	9941      	ldr	r1, [sp, #260]	; 0x104
 80044ac:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 80044ae:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 80044b2:	9942      	ldr	r1, [sp, #264]	; 0x108
 80044b4:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 80044b6:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80044b8:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 80044ba:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 80044be:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 80044c0:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80044c4:	ea4f 42f4 	mov.w	r2, r4, ror #19
 80044c8:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 80044cc:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80044d0:	443a      	add	r2, r7
 80044d2:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 80044d6:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80044da:	ea4f 4573 	mov.w	r5, r3, ror #17
 80044de:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80044e2:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80044e6:	440b      	add	r3, r1
 80044e8:	4422      	add	r2, r4
 80044ea:	ea4f 11f7 	mov.w	r1, r7, ror #7
 80044ee:	ea4f 44b0 	mov.w	r4, r0, ror #18
 80044f2:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 80044f6:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 80044fa:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 80044fe:	4403      	add	r3, r0
 8004500:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8004504:	f10c 0c02 	add.w	ip, ip, #2
 8004508:	4414      	add	r4, r2
 800450a:	440b      	add	r3, r1
 800450c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004510:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8004514:	f106 0608 	add.w	r6, r6, #8
 8004518:	d1d4      	bne.n	80044c4 <mouseDriver_sendMsg.constprop.2+0x698>
 800451a:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 800451e:	ea4f 4271 	mov.w	r2, r1, ror #17
 8004522:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8004526:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800452a:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800452e:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8004532:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004536:	ea4f 43f4 	mov.w	r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800453a:	4408      	add	r0, r1
 800453c:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004540:	ea83 4374 	eor.w	r3, r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8004544:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8004548:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 800454c:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8004550:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004552:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004556:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 800455a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 800455e:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8004562:	4410      	add	r0, r2
 8004564:	440b      	add	r3, r1
 8004566:	4473      	add	r3, lr
 8004568:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800456a:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 800456e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004570:	9300      	str	r3, [sp, #0]
    BB = B;
 8004572:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8004576:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8004578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 800457a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 800457c:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8004580:	2600      	movs	r6, #0
 8004582:	e005      	b.n	8004590 <mouseDriver_sendMsg.constprop.2+0x764>
 8004584:	4667      	mov	r7, ip
 8004586:	46c6      	mov	lr, r8
 8004588:	46ac      	mov	ip, r5
 800458a:	46a0      	mov	r8, r4
	AA = T1 + T2;
 800458c:	4615      	mov	r5, r2
	EE = DD + T1;
 800458e:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004590:	ea2e 0004 	bic.w	r0, lr, r4
 8004594:	ea04 0208 	and.w	r2, r4, r8
 8004598:	4042      	eors	r2, r0
 800459a:	483d      	ldr	r0, [pc, #244]	; (8004690 <mouseDriver_sendMsg.constprop.2+0x864>)
 800459c:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80045a0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80045a4:	9001      	str	r0, [sp, #4]
 80045a6:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80045aa:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80045ae:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80045b2:	440a      	add	r2, r1
 80045b4:	4402      	add	r2, r0
 80045b6:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80045b8:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80045bc:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80045be:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80045c2:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80045c4:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 80045c8:	9b00      	ldr	r3, [sp, #0]
 80045ca:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80045cc:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80045d0:	ea0b 0b05 	and.w	fp, fp, r5
 80045d4:	ea8b 0b00 	eor.w	fp, fp, r0
 80045d8:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80045dc:	3601      	adds	r6, #1
	EE = DD + T1;
 80045de:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80045e0:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80045e2:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80045e4:	4618      	mov	r0, r3
	AA = T1 + T2;
 80045e6:	440a      	add	r2, r1
 80045e8:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 80045ea:	d1cb      	bne.n	8004584 <mouseDriver_sendMsg.constprop.2+0x758>
 80045ec:	4611      	mov	r1, r2
 80045ee:	4602      	mov	r2, r0
    D += DD;
 80045f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 80045f2:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 80045f4:	4438      	add	r0, r7
 80045f6:	4607      	mov	r7, r0
    E += EE;
 80045f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045fa:	4410      	add	r0, r2
 80045fc:	4602      	mov	r2, r0
    F += FF;
 80045fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8004600:	9240      	str	r2, [sp, #256]	; 0x100
    F += FF;
 8004602:	4404      	add	r4, r0
    A += AA;
 8004604:	440b      	add	r3, r1
    G += GG;
 8004606:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 8004608:	9441      	str	r4, [sp, #260]	; 0x104
    A += AA;
 800460a:	4619      	mov	r1, r3
    B += BB;
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 800460e:	4440      	add	r0, r8
    B += BB;
 8004610:	441d      	add	r5, r3
    G += GG;
 8004612:	4606      	mov	r6, r0
    C += CC;
 8004614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8004616:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8004618:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 800461a:	4463      	add	r3, ip
    H += HH;
 800461c:	4470      	add	r0, lr
    B += BB;
 800461e:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8004622:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8004626:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8004628:	2400      	movs	r4, #0
 800462a:	e5e7      	b.n	80041fc <mouseDriver_sendMsg.constprop.2+0x3d0>
		buf[0] = msg->magic;
 800462c:	4c19      	ldr	r4, [pc, #100]	; (8004694 <mouseDriver_sendMsg.constprop.2+0x868>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800462e:	9d02      	ldr	r5, [sp, #8]
		buf[0] = msg->magic;
 8004630:	7022      	strb	r2, [r4, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8004632:	a998      	add	r1, sp, #608	; 0x260
 8004634:	1da0      	adds	r0, r4, #6
 8004636:	462a      	mov	r2, r5
		buf[1] = length;
 8004638:	7065      	strb	r5, [r4, #1]
		buf[2] = msg->seq;
 800463a:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 800463e:	f884 c003 	strb.w	ip, [r4, #3]
		buf[4] = msg->compid;
 8004642:	7127      	strb	r7, [r4, #4]
		buf[5] = msg->msgid & 0xFF;
 8004644:	7166      	strb	r6, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8004646:	f009 fdbc 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800464a:	462b      	mov	r3, r5
 800464c:	3306      	adds	r3, #6
 800464e:	18e2      	adds	r2, r4, r3
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8004650:	9904      	ldr	r1, [sp, #16]
 8004652:	54e1      	strb	r1, [r4, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8004654:	9b05      	ldr	r3, [sp, #20]
 8004656:	7053      	strb	r3, [r2, #1]
 8004658:	2100      	movs	r1, #0
 800465a:	2405      	movs	r4, #5
 800465c:	e535      	b.n	80040ca <mouseDriver_sendMsg.constprop.2+0x29e>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800465e:	4618      	mov	r0, r3
 8004660:	e414      	b.n	8003e8c <mouseDriver_sendMsg.constprop.2+0x60>
    uint32_t old_sz = m->sz[0];
 8004662:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    m->sz[0] += len * 8;
 8004664:	9b02      	ldr	r3, [sp, #8]
 8004666:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
    if (m->sz[0] < old_sz)
 800466a:	42a5      	cmp	r5, r4
    m->sz[0] += len * 8;
 800466c:	943a      	str	r4, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 800466e:	d903      	bls.n	8004678 <mouseDriver_sendMsg.constprop.2+0x84c>
	++m->sz[1];
 8004670:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8004672:	3301      	adds	r3, #1
 8004674:	933b      	str	r3, [sp, #236]	; 0xec
 8004676:	9b02      	ldr	r3, [sp, #8]
    offset = (old_sz / 8) % 64;
 8004678:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    while(len > 0){
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8226 	beq.w	8004ace <mouseDriver_sendMsg.constprop.2+0xca2>
 8004682:	9306      	str	r3, [sp, #24]
    const unsigned char *p = (const unsigned char *)v;
 8004684:	ab98      	add	r3, sp, #608	; 0x260
 8004686:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8004688:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 800468c:	e008      	b.n	80046a0 <mouseDriver_sendMsg.constprop.2+0x874>
 800468e:	bf00      	nop
 8004690:	0800e200 	.word	0x0800e200
 8004694:	200000b8 	.word	0x200000b8
    while(len > 0){
 8004698:	9b06      	ldr	r3, [sp, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8216 	beq.w	8004acc <mouseDriver_sendMsg.constprop.2+0xca0>
 80046a0:	9c06      	ldr	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80046a2:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 80046a4:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	bf28      	it	cs
 80046ac:	4623      	movcs	r3, r4
	len -= l;
 80046ae:	1ae4      	subs	r4, r4, r3
 80046b0:	9406      	str	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80046b2:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 80046b4:	4634      	mov	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80046b6:	4428      	add	r0, r5
	p += l;
 80046b8:	441c      	add	r4, r3
	offset += l;
 80046ba:	441d      	add	r5, r3
	memcpy(m->u.save_bytes + offset, p, l);
 80046bc:	461a      	mov	r2, r3
 80046be:	4631      	mov	r1, r6
	p += l;
 80046c0:	9407      	str	r4, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 80046c2:	f009 fd7e 	bl	800e1c2 <memcpy>
	if(offset == 64){
 80046c6:	2d40      	cmp	r5, #64	; 0x40
 80046c8:	d1e6      	bne.n	8004698 <mouseDriver_sendMsg.constprop.2+0x86c>
                p2[2] = p1[1];
 80046ca:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 80046ce:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 80046d2:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80046d4:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 80046d8:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80046da:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 80046de:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 80046e0:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80046e4:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80046e8:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 80046ec:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 80046f0:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 80046f4:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 80046f8:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 80046fc:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8004700:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8004704:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8004708:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 800470c:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8004710:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8004712:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8004716:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 800471a:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 800471e:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8004722:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8004726:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 800472a:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 800472e:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8004732:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8004736:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 800473a:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 800473e:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8004742:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8004746:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 800474a:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 800474e:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8004752:	9100      	str	r1, [sp, #0]
 8004754:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8004758:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 800475c:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8004760:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8004764:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8004768:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 800476c:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8004770:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8004774:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8004778:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 800477c:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8004780:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8004784:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8004788:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 800478a:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 800478e:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8004790:	f88a 2010 	strb.w	r2, [sl, #16]
 8004794:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8004798:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 800479c:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 80047a0:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 80047a4:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 80047a8:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 80047ac:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 80047b0:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 80047b4:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 80047b8:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 80047bc:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 80047c0:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 80047c4:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 80047c6:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 80047ca:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 80047ce:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 80047d2:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 80047d6:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 80047da:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80047de:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80047e2:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80047e6:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80047ea:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 80047ee:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 80047f2:	f88a 201e 	strb.w	r2, [sl, #30]
 80047f6:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 80047fa:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 80047fe:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8004802:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8004806:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 800480a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800480c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800480e:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8004812:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8004816:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 800481a:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 800481e:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8004822:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8004826:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 800482a:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 800482e:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8004832:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8004836:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 800483a:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 800483e:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8004842:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8004846:	9c00      	ldr	r4, [sp, #0]
 8004848:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 800484c:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8004850:	9c01      	ldr	r4, [sp, #4]
 8004852:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8004856:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 800485a:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 800485e:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8004862:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8004866:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 800486a:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 800486e:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8004872:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8004876:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 800487a:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 800487e:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8004882:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8004886:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004888:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800488a:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 800488e:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8004892:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8004896:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 800489a:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 800489e:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 80048a2:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 80048a6:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 80048aa:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 80048ae:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 80048b2:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 80048b6:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 80048ba:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 80048be:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 80048c2:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 80048c6:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80048c8:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 80048cc:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 80048d0:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 80048d4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 80048d6:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 80048da:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80048dc:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80048de:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80048e2:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80048e6:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80048ea:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80048ee:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80048f2:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80048f6:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80048fa:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80048fe:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8004902:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8004906:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 800490a:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800490e:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8004912:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8004916:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 800491a:	e9c9 6708 	strd	r6, r7, [r9, #32]
 800491e:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8004922:	f8da 7000 	ldr.w	r7, [sl]
 8004926:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800492a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800492e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004932:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8004936:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8004938:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 800493a:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800493c:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 800493e:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8004940:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8004942:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004944:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8004946:	9941      	ldr	r1, [sp, #260]	; 0x104
 8004948:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 800494a:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 800494e:	9942      	ldr	r1, [sp, #264]	; 0x108
 8004950:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8004952:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8004954:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8004956:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 800495a:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 800495c:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004960:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8004964:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8004968:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800496c:	443a      	add	r2, r7
 800496e:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8004972:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004976:	ea4f 4573 	mov.w	r5, r3, ror #17
 800497a:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 800497e:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004982:	440b      	add	r3, r1
 8004984:	4422      	add	r2, r4
 8004986:	ea4f 11f7 	mov.w	r1, r7, ror #7
 800498a:	ea4f 44b0 	mov.w	r4, r0, ror #18
 800498e:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8004992:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8004996:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 800499a:	4403      	add	r3, r0
 800499c:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 80049a0:	f10c 0c02 	add.w	ip, ip, #2
 80049a4:	4414      	add	r4, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80049ac:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 80049b0:	f106 0608 	add.w	r6, r6, #8
 80049b4:	d1d4      	bne.n	8004960 <mouseDriver_sendMsg.constprop.2+0xb34>
 80049b6:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 80049ba:	ea4f 4271 	mov.w	r2, r1, ror #17
 80049be:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80049c2:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80049c6:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80049ca:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 80049ce:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80049d2:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 80049d6:	4408      	add	r0, r1
 80049d8:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80049dc:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80049e0:	ea4f 15f6 	mov.w	r5, r6, ror #7
 80049e4:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80049e8:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 80049ec:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80049ee:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80049f2:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 80049f6:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 80049fa:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 80049fe:	4410      	add	r0, r2
 8004a00:	440b      	add	r3, r1
 8004a02:	4473      	add	r3, lr
 8004a04:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004a06:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8004a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a0c:	9300      	str	r3, [sp, #0]
    BB = B;
 8004a0e:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8004a12:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8004a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8004a16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8004a18:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	e005      	b.n	8004a2c <mouseDriver_sendMsg.constprop.2+0xc00>
 8004a20:	4667      	mov	r7, ip
 8004a22:	46c6      	mov	lr, r8
 8004a24:	46ac      	mov	ip, r5
 8004a26:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8004a28:	4615      	mov	r5, r2
	EE = DD + T1;
 8004a2a:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004a2c:	ea2e 0004 	bic.w	r0, lr, r4
 8004a30:	ea08 0204 	and.w	r2, r8, r4
 8004a34:	4042      	eors	r2, r0
 8004a36:	4831      	ldr	r0, [pc, #196]	; (8004afc <mouseDriver_sendMsg.constprop.2+0xcd0>)
 8004a38:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8004a3c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8004a40:	9001      	str	r0, [sp, #4]
 8004a42:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8004a46:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8004a4a:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8004a4e:	440a      	add	r2, r1
 8004a50:	4402      	add	r2, r0
 8004a52:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004a54:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004a58:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004a5a:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004a5e:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004a60:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8004a64:	9b00      	ldr	r3, [sp, #0]
 8004a66:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004a68:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8004a6c:	ea0b 0b05 	and.w	fp, fp, r5
 8004a70:	ea8b 0b00 	eor.w	fp, fp, r0
 8004a74:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8004a78:	3601      	adds	r6, #1
	EE = DD + T1;
 8004a7a:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004a7c:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8004a7e:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8004a80:	4618      	mov	r0, r3
	AA = T1 + T2;
 8004a82:	440a      	add	r2, r1
 8004a84:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8004a86:	d1cb      	bne.n	8004a20 <mouseDriver_sendMsg.constprop.2+0xbf4>
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4602      	mov	r2, r0
    D += DD;
 8004a8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8004a8e:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8004a90:	4438      	add	r0, r7
 8004a92:	4607      	mov	r7, r0
    E += EE;
 8004a94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a96:	4410      	add	r0, r2
 8004a98:	4602      	mov	r2, r0
    F += FF;
 8004a9a:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8004a9c:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8004a9e:	440b      	add	r3, r1
    F += FF;
 8004aa0:	4420      	add	r0, r4
    A += AA;
 8004aa2:	4619      	mov	r1, r3
    F += FF;
 8004aa4:	4604      	mov	r4, r0
    B += BB;
 8004aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 8004aa8:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 8004aaa:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8004aac:	442b      	add	r3, r5
    G += GG;
 8004aae:	4440      	add	r0, r8
    B += BB;
 8004ab0:	461d      	mov	r5, r3
    G += GG;
 8004ab2:	4606      	mov	r6, r0
    C += CC;
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8004ab6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8004ab8:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8004aba:	4463      	add	r3, ip
    H += HH;
 8004abc:	4470      	add	r0, lr
    B += BB;
 8004abe:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8004ac2:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8004ac6:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8004ac8:	2500      	movs	r5, #0
 8004aca:	e5e5      	b.n	8004698 <mouseDriver_sendMsg.constprop.2+0x86c>
 8004acc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004ace:	2310      	movs	r3, #16
 8004ad0:	18e3      	adds	r3, r4, r3
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	bf28      	it	cs
 8004ad8:	2201      	movcs	r2, #1
    m->sz[0] += len * 8;
 8004ada:	933a      	str	r3, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8004adc:	b112      	cbz	r2, 8004ae4 <mouseDriver_sendMsg.constprop.2+0xcb8>
	++m->sz[1];
 8004ade:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	933b      	str	r3, [sp, #236]	; 0xec
		mavlink_sign_packet(status->signing,
 8004ae4:	9a02      	ldr	r2, [sp, #8]
 8004ae6:	ab98      	add	r3, sp, #608	; 0x260
 8004ae8:	4413      	add	r3, r2
 8004aea:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 8004aec:	2302      	movs	r3, #2
 8004aee:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8004af2:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8004af4:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8004af8:	e006      	b.n	8004b08 <mouseDriver_sendMsg.constprop.2+0xcdc>
 8004afa:	bf00      	nop
 8004afc:	0800e200 	.word	0x0800e200
    while(len > 0){
 8004b00:	9b06      	ldr	r3, [sp, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8216 	beq.w	8004f34 <mouseDriver_sendMsg.constprop.2+0x1108>
 8004b08:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004b0a:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8004b0c:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	bf28      	it	cs
 8004b14:	462b      	movcs	r3, r5
	len -= l;
 8004b16:	1aed      	subs	r5, r5, r3
 8004b18:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004b1a:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8004b1c:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8004b1e:	4420      	add	r0, r4
	p += l;
 8004b20:	441d      	add	r5, r3
	offset += l;
 8004b22:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8004b24:	461a      	mov	r2, r3
 8004b26:	4631      	mov	r1, r6
	p += l;
 8004b28:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8004b2a:	f009 fb4a 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8004b2e:	2c40      	cmp	r4, #64	; 0x40
 8004b30:	d1e6      	bne.n	8004b00 <mouseDriver_sendMsg.constprop.2+0xcd4>
                p2[2] = p1[1];
 8004b32:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8004b36:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8004b3a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004b3c:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8004b40:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8004b42:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8004b46:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8004b48:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8004b4c:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8004b50:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8004b54:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8004b58:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8004b5c:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8004b60:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8004b64:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8004b68:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8004b6c:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8004b70:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8004b74:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8004b78:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8004b7a:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8004b7e:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8004b82:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8004b86:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8004b8a:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8004b8e:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8004b92:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8004b96:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8004b9a:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8004b9e:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8004ba2:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8004ba6:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8004baa:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8004bae:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8004bb2:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8004bb6:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8004bba:	9100      	str	r1, [sp, #0]
 8004bbc:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8004bc0:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8004bc4:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8004bc8:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8004bcc:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8004bd0:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8004bd4:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8004bd8:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8004bdc:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8004be0:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8004be4:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8004be8:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8004bec:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8004bf0:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8004bf2:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8004bf6:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8004bf8:	f88a 2010 	strb.w	r2, [sl, #16]
 8004bfc:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8004c00:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8004c04:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8004c08:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8004c0c:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8004c10:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8004c14:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8004c18:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8004c1c:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8004c20:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8004c24:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8004c28:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8004c2c:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8004c2e:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8004c32:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8004c36:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8004c3a:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8004c3e:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8004c42:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8004c46:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8004c4a:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8004c4e:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8004c52:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8004c56:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8004c5a:	f88a 201e 	strb.w	r2, [sl, #30]
 8004c5e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8004c62:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8004c66:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8004c6a:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8004c6e:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8004c72:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004c74:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8004c76:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8004c7a:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8004c7e:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8004c82:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8004c86:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8004c8a:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8004c8e:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8004c92:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8004c96:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8004c9a:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8004c9e:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8004ca2:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8004ca6:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8004caa:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8004cae:	9c00      	ldr	r4, [sp, #0]
 8004cb0:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8004cb4:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8004cb8:	9c01      	ldr	r4, [sp, #4]
 8004cba:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8004cbe:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8004cc2:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8004cc6:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8004cca:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8004cce:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8004cd2:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8004cd6:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8004cda:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8004cde:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8004ce2:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8004ce6:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8004cea:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8004cee:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004cf0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8004cf2:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8004cf6:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8004cfa:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8004cfe:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8004d02:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8004d06:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8004d0a:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8004d0e:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8004d12:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8004d16:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8004d1a:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8004d1e:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8004d22:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8004d26:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8004d2a:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8004d2e:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8004d30:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8004d34:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8004d38:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8004d3c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8004d3e:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8004d42:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8004d44:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8004d46:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8004d4a:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8004d4e:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8004d52:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8004d56:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8004d5a:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8004d5e:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8004d62:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8004d66:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8004d6a:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8004d6e:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8004d72:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8004d76:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8004d7a:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8004d7e:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8004d82:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8004d86:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8004d8a:	f8da 7000 	ldr.w	r7, [sl]
 8004d8e:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8004d92:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004d96:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004d9a:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8004d9e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8004da0:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8004da2:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8004da4:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8004da6:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8004da8:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8004daa:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004dac:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8004dae:	9941      	ldr	r1, [sp, #260]	; 0x104
 8004db0:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8004db2:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8004db6:	9942      	ldr	r1, [sp, #264]	; 0x108
 8004db8:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8004dba:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8004dbc:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8004dbe:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8004dc2:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8004dc4:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004dc8:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8004dcc:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8004dd0:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004dd4:	443a      	add	r2, r7
 8004dd6:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8004dda:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004dde:	ea4f 4573 	mov.w	r5, r3, ror #17
 8004de2:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8004de6:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004dea:	440b      	add	r3, r1
 8004dec:	4422      	add	r2, r4
 8004dee:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8004df2:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8004df6:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8004dfa:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8004dfe:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8004e02:	4403      	add	r3, r0
 8004e04:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8004e08:	f10c 0c02 	add.w	ip, ip, #2
 8004e0c:	4414      	add	r4, r2
 8004e0e:	440b      	add	r3, r1
 8004e10:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e14:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8004e18:	f106 0608 	add.w	r6, r6, #8
 8004e1c:	d1d4      	bne.n	8004dc8 <mouseDriver_sendMsg.constprop.2+0xf9c>
 8004e1e:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8004e22:	ea4f 4271 	mov.w	r2, r1, ror #17
 8004e26:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8004e2a:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e2e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004e32:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8004e36:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e3a:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8004e3e:	4408      	add	r0, r1
 8004e40:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e44:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8004e48:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8004e4c:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8004e50:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8004e54:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e56:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8004e5a:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8004e5e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8004e62:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8004e66:	4410      	add	r0, r2
 8004e68:	440b      	add	r3, r1
 8004e6a:	4473      	add	r3, lr
 8004e6c:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8004e6e:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8004e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e74:	9300      	str	r3, [sp, #0]
    BB = B;
 8004e76:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8004e7a:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8004e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8004e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8004e80:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8004e84:	2600      	movs	r6, #0
 8004e86:	e005      	b.n	8004e94 <mouseDriver_sendMsg.constprop.2+0x1068>
 8004e88:	4667      	mov	r7, ip
 8004e8a:	46c6      	mov	lr, r8
 8004e8c:	46ac      	mov	ip, r5
 8004e8e:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8004e90:	4615      	mov	r5, r2
	EE = DD + T1;
 8004e92:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004e94:	ea2e 0004 	bic.w	r0, lr, r4
 8004e98:	ea08 0204 	and.w	r2, r8, r4
 8004e9c:	4042      	eors	r2, r0
 8004e9e:	482f      	ldr	r0, [pc, #188]	; (8004f5c <mouseDriver_sendMsg.constprop.2+0x1130>)
 8004ea0:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8004ea4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8004ea8:	9001      	str	r0, [sp, #4]
 8004eaa:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8004eae:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8004eb2:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8004eb6:	440a      	add	r2, r1
 8004eb8:	4402      	add	r2, r0
 8004eba:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ebc:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004ec0:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ec2:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8004ec6:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ec8:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8004ecc:	9b00      	ldr	r3, [sp, #0]
 8004ece:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ed0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8004ed4:	ea0b 0b05 	and.w	fp, fp, r5
 8004ed8:	ea8b 0b00 	eor.w	fp, fp, r0
 8004edc:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8004ee0:	3601      	adds	r6, #1
	EE = DD + T1;
 8004ee2:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8004ee4:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8004ee6:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8004ee8:	4618      	mov	r0, r3
	AA = T1 + T2;
 8004eea:	440a      	add	r2, r1
 8004eec:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8004eee:	d1cb      	bne.n	8004e88 <mouseDriver_sendMsg.constprop.2+0x105c>
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4602      	mov	r2, r0
    D += DD;
 8004ef4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8004ef6:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8004ef8:	4438      	add	r0, r7
 8004efa:	4607      	mov	r7, r0
    E += EE;
 8004efc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004efe:	4410      	add	r0, r2
 8004f00:	4602      	mov	r2, r0
    F += FF;
 8004f02:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8004f04:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8004f06:	440b      	add	r3, r1
    F += FF;
 8004f08:	4420      	add	r0, r4
 8004f0a:	4604      	mov	r4, r0
    A += AA;
 8004f0c:	4619      	mov	r1, r3
    G += GG;
 8004f0e:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8004f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8004f12:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8004f14:	442b      	add	r3, r5
    G += GG;
 8004f16:	4440      	add	r0, r8
    B += BB;
 8004f18:	461d      	mov	r5, r3
    G += GG;
 8004f1a:	4606      	mov	r6, r0
    C += CC;
 8004f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8004f1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8004f20:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8004f22:	4463      	add	r3, ip
    H += HH;
 8004f24:	4470      	add	r0, lr
    B += BB;
 8004f26:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8004f2a:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8004f2e:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8004f30:	2400      	movs	r4, #0
 8004f32:	e5e5      	b.n	8004b00 <mouseDriver_sendMsg.constprop.2+0xcd4>
    uint32_t old_sz = m->sz[0];
 8004f34:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004f36:	2238      	movs	r2, #56	; 0x38
 8004f38:	18a2      	adds	r2, r4, r2
 8004f3a:	bf28      	it	cs
 8004f3c:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 8004f3e:	923a      	str	r2, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 8004f40:	b113      	cbz	r3, 8004f48 <mouseDriver_sendMsg.constprop.2+0x111c>
	++m->sz[1];
 8004f42:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8004f44:	3301      	adds	r3, #1
 8004f46:	933b      	str	r3, [sp, #236]	; 0xec
    const unsigned char *p = (const unsigned char *)v;
 8004f48:	f20d 336a 	addw	r3, sp, #874	; 0x36a
 8004f4c:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 8004f4e:	2307      	movs	r3, #7
 8004f50:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8004f54:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8004f56:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8004f5a:	e005      	b.n	8004f68 <mouseDriver_sendMsg.constprop.2+0x113c>
 8004f5c:	0800e200 	.word	0x0800e200
    while(len > 0){
 8004f60:	9b06      	ldr	r3, [sp, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8216 	beq.w	8005394 <mouseDriver_sendMsg.constprop.2+0x1568>
 8004f68:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004f6a:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8004f6c:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	bf28      	it	cs
 8004f74:	462b      	movcs	r3, r5
	len -= l;
 8004f76:	1aed      	subs	r5, r5, r3
 8004f78:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8004f7a:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8004f7c:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8004f7e:	4420      	add	r0, r4
	p += l;
 8004f80:	441d      	add	r5, r3
	offset += l;
 8004f82:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8004f84:	461a      	mov	r2, r3
 8004f86:	4631      	mov	r1, r6
	p += l;
 8004f88:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8004f8a:	f009 f91a 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8004f8e:	2c40      	cmp	r4, #64	; 0x40
 8004f90:	d1e6      	bne.n	8004f60 <mouseDriver_sendMsg.constprop.2+0x1134>
                p2[2] = p1[1];
 8004f92:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8004f96:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8004f9a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8004f9c:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8004fa0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8004fa2:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8004fa6:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8004fa8:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8004fac:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8004fb0:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8004fb4:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8004fb8:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8004fbc:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8004fc0:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8004fc4:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8004fc8:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8004fcc:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8004fd0:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8004fd4:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8004fd8:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8004fda:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8004fde:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8004fe2:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8004fe6:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8004fea:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8004fee:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8004ff2:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8004ff6:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8004ffa:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8004ffe:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8005002:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8005006:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 800500a:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 800500e:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8005012:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8005016:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 800501a:	9100      	str	r1, [sp, #0]
 800501c:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8005020:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8005024:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8005028:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 800502c:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8005030:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8005034:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8005038:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 800503c:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8005040:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8005044:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8005048:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800504c:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8005050:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8005052:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8005056:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8005058:	f88a 2010 	strb.w	r2, [sl, #16]
 800505c:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8005060:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8005064:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8005068:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 800506c:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8005070:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8005074:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8005078:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 800507c:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8005080:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8005084:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8005088:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 800508c:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 800508e:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8005092:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8005096:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 800509a:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 800509e:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 80050a2:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80050a6:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80050aa:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80050ae:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80050b2:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 80050b6:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 80050ba:	f88a 201e 	strb.w	r2, [sl, #30]
 80050be:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 80050c2:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 80050c6:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 80050ca:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 80050ce:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 80050d2:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80050d4:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80050d6:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 80050da:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 80050de:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 80050e2:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 80050e6:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 80050ea:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80050ee:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 80050f2:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 80050f6:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 80050fa:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 80050fe:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8005102:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8005106:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 800510a:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 800510e:	9c00      	ldr	r4, [sp, #0]
 8005110:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8005114:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8005118:	9c01      	ldr	r4, [sp, #4]
 800511a:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 800511e:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8005122:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8005126:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 800512a:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 800512e:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8005132:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8005136:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 800513a:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 800513e:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8005142:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8005146:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 800514a:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 800514e:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8005150:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8005152:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8005156:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 800515a:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 800515e:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8005162:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8005166:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800516a:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 800516e:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8005172:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8005176:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 800517a:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 800517e:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8005182:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8005186:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 800518a:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 800518e:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8005190:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8005194:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8005198:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 800519c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 800519e:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 80051a2:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80051a4:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80051a6:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80051aa:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80051ae:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80051b2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80051b6:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80051ba:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80051be:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80051c2:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80051c6:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 80051ca:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 80051ce:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 80051d2:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80051d6:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 80051da:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 80051de:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 80051e2:	e9c9 6708 	strd	r6, r7, [r9, #32]
 80051e6:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 80051ea:	f8da 7000 	ldr.w	r7, [sl]
 80051ee:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 80051f2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80051f6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80051fa:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 80051fe:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8005200:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8005202:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8005204:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8005206:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8005208:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 800520a:	9940      	ldr	r1, [sp, #256]	; 0x100
 800520c:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 800520e:	9941      	ldr	r1, [sp, #260]	; 0x104
 8005210:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8005212:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8005216:	9942      	ldr	r1, [sp, #264]	; 0x108
 8005218:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 800521a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 800521c:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 800521e:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8005222:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8005224:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005228:	ea4f 42f4 	mov.w	r2, r4, ror #19
 800522c:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8005230:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005234:	443a      	add	r2, r7
 8005236:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 800523a:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800523e:	ea4f 4573 	mov.w	r5, r3, ror #17
 8005242:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8005246:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800524a:	440b      	add	r3, r1
 800524c:	4422      	add	r2, r4
 800524e:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8005252:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8005256:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 800525a:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 800525e:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8005262:	4403      	add	r3, r0
 8005264:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8005268:	f10c 0c02 	add.w	ip, ip, #2
 800526c:	4414      	add	r4, r2
 800526e:	440b      	add	r3, r1
 8005270:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005274:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8005278:	f106 0608 	add.w	r6, r6, #8
 800527c:	d1d4      	bne.n	8005228 <mouseDriver_sendMsg.constprop.2+0x13fc>
 800527e:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8005282:	ea4f 4271 	mov.w	r2, r1, ror #17
 8005286:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800528a:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800528e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005292:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8005296:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800529a:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800529e:	4408      	add	r0, r1
 80052a0:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80052a4:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80052a8:	ea4f 15f6 	mov.w	r5, r6, ror #7
 80052ac:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80052b0:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 80052b4:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80052b6:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80052ba:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 80052be:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 80052c2:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 80052c6:	4410      	add	r0, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	4473      	add	r3, lr
 80052cc:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80052ce:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 80052d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052d4:	9300      	str	r3, [sp, #0]
    BB = B;
 80052d6:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 80052da:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 80052dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 80052de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 80052e0:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 80052e4:	2600      	movs	r6, #0
 80052e6:	e005      	b.n	80052f4 <mouseDriver_sendMsg.constprop.2+0x14c8>
 80052e8:	4667      	mov	r7, ip
 80052ea:	46c6      	mov	lr, r8
 80052ec:	46ac      	mov	ip, r5
 80052ee:	46a0      	mov	r8, r4
	AA = T1 + T2;
 80052f0:	4615      	mov	r5, r2
	EE = DD + T1;
 80052f2:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80052f4:	ea2e 0004 	bic.w	r0, lr, r4
 80052f8:	ea08 0204 	and.w	r2, r8, r4
 80052fc:	4042      	eors	r2, r0
 80052fe:	4842      	ldr	r0, [pc, #264]	; (8005408 <mouseDriver_sendMsg.constprop.2+0x15dc>)
 8005300:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8005304:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8005308:	9001      	str	r0, [sp, #4]
 800530a:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800530e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8005312:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8005316:	440a      	add	r2, r1
 8005318:	4402      	add	r2, r0
 800531a:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800531c:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8005320:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8005322:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8005326:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8005328:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 800532c:	9b00      	ldr	r3, [sp, #0]
 800532e:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8005330:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8005334:	ea0b 0b05 	and.w	fp, fp, r5
 8005338:	ea8b 0b00 	eor.w	fp, fp, r0
 800533c:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8005340:	3601      	adds	r6, #1
	EE = DD + T1;
 8005342:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8005344:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8005346:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8005348:	4618      	mov	r0, r3
	AA = T1 + T2;
 800534a:	440a      	add	r2, r1
 800534c:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 800534e:	d1cb      	bne.n	80052e8 <mouseDriver_sendMsg.constprop.2+0x14bc>
 8005350:	4611      	mov	r1, r2
 8005352:	4602      	mov	r2, r0
    D += DD;
 8005354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8005356:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8005358:	4438      	add	r0, r7
 800535a:	4607      	mov	r7, r0
    E += EE;
 800535c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800535e:	4410      	add	r0, r2
 8005360:	4602      	mov	r2, r0
    F += FF;
 8005362:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8005364:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8005366:	440b      	add	r3, r1
    F += FF;
 8005368:	4420      	add	r0, r4
 800536a:	4604      	mov	r4, r0
    A += AA;
 800536c:	4619      	mov	r1, r3
    G += GG;
 800536e:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8005370:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8005372:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8005374:	442b      	add	r3, r5
    G += GG;
 8005376:	4440      	add	r0, r8
    B += BB;
 8005378:	461d      	mov	r5, r3
    G += GG;
 800537a:	4606      	mov	r6, r0
    C += CC;
 800537c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 800537e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8005380:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8005382:	4463      	add	r3, ip
    H += HH;
 8005384:	4470      	add	r0, lr
    B += BB;
 8005386:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 800538a:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 800538e:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8005390:	2400      	movs	r4, #0
 8005392:	e5e5      	b.n	8004f60 <mouseDriver_sendMsg.constprop.2+0x1134>
 8005394:	461f      	mov	r7, r3
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8005396:	4639      	mov	r1, r7
    *zeros = 0x80;
 8005398:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800539a:	2247      	movs	r2, #71	; 0x47
 800539c:	f10d 00a1 	add.w	r0, sp, #161	; 0xa1
    unsigned offset = (m->sz[0] / 8) % 64;
 80053a0:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    *zeros = 0x80;
 80053a2:	f88a 3000 	strb.w	r3, [sl]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80053a6:	f008 ff17 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80053aa:	9b3b      	ldr	r3, [sp, #236]	; 0xec
	    offset = 0;
 80053ac:	f8cd a018 	str.w	sl, [sp, #24]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053b0:	0e19      	lsrs	r1, r3, #24
    unsigned offset = (m->sz[0] / 8) % 64;
 80053b2:	f3c5 04c5 	ubfx	r4, r5, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053b6:	463a      	mov	r2, r7
 80053b8:	f361 0207 	bfi	r2, r1, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80053bc:	f1c4 0677 	rsb	r6, r4, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80053c0:	0c19      	lsrs	r1, r3, #16
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80053c2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053c6:	f361 220f 	bfi	r2, r1, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80053ca:	0a19      	lsrs	r1, r3, #8
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053cc:	f361 4217 	bfi	r2, r1, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80053d0:	eb0a 0106 	add.w	r1, sl, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80053d4:	0a28      	lsrs	r0, r5, #8
 80053d6:	71c8      	strb	r0, [r1, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80053d8:	0c28      	lsrs	r0, r5, #16
    mavlink_sha256_update(m, zeros, dstart + 8);
 80053da:	f106 0709 	add.w	r7, r6, #9
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80053de:	7188      	strb	r0, [r1, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80053e0:	0e28      	lsrs	r0, r5, #24
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80053e2:	720d      	strb	r5, [r1, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80053e4:	7148      	strb	r0, [r1, #5]
    m->sz[0] += len * 8;
 80053e6:	00f9      	lsls	r1, r7, #3
 80053e8:	186d      	adds	r5, r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80053ea:	f106 0601 	add.w	r6, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053ee:	f363 621f 	bfi	r2, r3, #24, #8
	++m->sz[1];
 80053f2:	bf28      	it	cs
 80053f4:	3301      	addcs	r3, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80053f6:	f84a 2006 	str.w	r2, [sl, r6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80053fa:	9701      	str	r7, [sp, #4]
    m->sz[0] += len * 8;
 80053fc:	953a      	str	r5, [sp, #232]	; 0xe8
	++m->sz[1];
 80053fe:	bf28      	it	cs
 8005400:	933b      	strcs	r3, [sp, #236]	; 0xec
	data[i] = in[i];
 8005402:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8005406:	e005      	b.n	8005414 <mouseDriver_sendMsg.constprop.2+0x15e8>
 8005408:	0800e200 	.word	0x0800e200
    while(len > 0){
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 820a 	beq.w	8005828 <mouseDriver_sendMsg.constprop.2+0x19fc>
 8005414:	9d01      	ldr	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8005416:	9e06      	ldr	r6, [sp, #24]
	uint32_t l = 64 - offset;
 8005418:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800541c:	42ab      	cmp	r3, r5
 800541e:	bf28      	it	cs
 8005420:	462b      	movcs	r3, r5
	len -= l;
 8005422:	1aed      	subs	r5, r5, r3
 8005424:	9501      	str	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8005426:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8005428:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800542a:	4420      	add	r0, r4
	p += l;
 800542c:	441d      	add	r5, r3
	offset += l;
 800542e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8005430:	461a      	mov	r2, r3
 8005432:	4631      	mov	r1, r6
	p += l;
 8005434:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8005436:	f008 fec4 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800543a:	2c40      	cmp	r4, #64	; 0x40
 800543c:	d1e6      	bne.n	800540c <mouseDriver_sendMsg.constprop.2+0x15e0>
                p2[2] = p1[1];
 800543e:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[0] = p1[3];
 8005442:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8005446:	f89d 511a 	ldrb.w	r5, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 800544a:	9100      	str	r1, [sp, #0]
                p2[1] = p1[2];
 800544c:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8005450:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8005454:	f89d a110 	ldrb.w	sl, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8005458:	f89d 8117 	ldrb.w	r8, [sp, #279]	; 0x117
                p2[1] = p1[2];
 800545c:	f89d e116 	ldrb.w	lr, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8005460:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8005464:	f89d 7114 	ldrb.w	r7, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8005468:	f89d 611b 	ldrb.w	r6, [sp, #283]	; 0x11b
                p2[3] = p1[0];
 800546c:	f89d 4118 	ldrb.w	r4, [sp, #280]	; 0x118
                p2[0] = p1[3];
 8005470:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[1] = p1[2];
 8005474:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8005478:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
                p2[1] = p1[2];
 800547c:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
                p2[2] = p1[1];
 8005480:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
 8005484:	9d00      	ldr	r5, [sp, #0]
                p2[1] = p1[2];
 8005486:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
                p2[2] = p1[1];
 800548a:	f88d b062 	strb.w	fp, [sp, #98]	; 0x62
                p2[3] = p1[0];
 800548e:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 8005492:	f88d a063 	strb.w	sl, [sp, #99]	; 0x63
                p2[0] = p1[3];
 8005496:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
                p2[1] = p1[2];
 800549a:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
                p2[2] = p1[1];
 800549e:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
                p2[3] = p1[0];
 80054a2:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
                p2[0] = p1[3];
 80054a6:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
                p2[2] = p1[1];
 80054aa:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
                p2[3] = p1[0];
 80054ae:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
                p2[0] = p1[3];
 80054b2:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
                p2[1] = p1[2];
 80054b6:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
                p2[2] = p1[1];
 80054ba:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80054be:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 80054c2:	f89d 512a 	ldrb.w	r5, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 80054c6:	9100      	str	r1, [sp, #0]
                p2[0] = p1[3];
 80054c8:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[2] = p1[1];
 80054cc:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 80054d0:	f89d a120 	ldrb.w	sl, [sp, #288]	; 0x120
                p2[0] = p1[3];
 80054d4:	f89d 8127 	ldrb.w	r8, [sp, #295]	; 0x127
                p2[1] = p1[2];
 80054d8:	f89d e126 	ldrb.w	lr, [sp, #294]	; 0x126
                p2[2] = p1[1];
 80054dc:	f89d c125 	ldrb.w	ip, [sp, #293]	; 0x125
                p2[3] = p1[0];
 80054e0:	f89d 7124 	ldrb.w	r7, [sp, #292]	; 0x124
                p2[0] = p1[3];
 80054e4:	f89d 612b 	ldrb.w	r6, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 80054e8:	f89d 4128 	ldrb.w	r4, [sp, #296]	; 0x128
                p2[0] = p1[3];
 80054ec:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[3] = p1[0];
 80054f0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
                p2[1] = p1[2];
 80054f4:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
 80054f8:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 80054fc:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
                p2[2] = p1[1];
 8005500:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8005502:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
                p2[1] = p1[2];
 8005506:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
                p2[2] = p1[1];
 800550a:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[3] = p1[0];
 800550e:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
                p2[2] = p1[1];
 8005512:	f88d b072 	strb.w	fp, [sp, #114]	; 0x72
                p2[3] = p1[0];
 8005516:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
                p2[0] = p1[3];
 800551a:	f88d 8074 	strb.w	r8, [sp, #116]	; 0x74
                p2[1] = p1[2];
 800551e:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
                p2[2] = p1[1];
 8005522:	f88d c076 	strb.w	ip, [sp, #118]	; 0x76
                p2[3] = p1[0];
 8005526:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
                p2[0] = p1[3];
 800552a:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
                p2[2] = p1[1];
 800552e:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
                p2[3] = p1[0];
 8005532:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
                p2[0] = p1[3];
 8005536:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
                p2[1] = p1[2];
 800553a:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
                p2[2] = p1[1];
 800553e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[1] = p1[2];
 8005542:	f89d 513a 	ldrb.w	r5, [sp, #314]	; 0x13a
                p2[2] = p1[1];
 8005546:	9100      	str	r1, [sp, #0]
 8005548:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 800554c:	f89d a130 	ldrb.w	sl, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8005550:	f89d 8137 	ldrb.w	r8, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8005554:	f89d e136 	ldrb.w	lr, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8005558:	f89d c135 	ldrb.w	ip, [sp, #309]	; 0x135
                p2[3] = p1[0];
 800555c:	f89d 7134 	ldrb.w	r7, [sp, #308]	; 0x134
                p2[0] = p1[3];
 8005560:	f89d 613b 	ldrb.w	r6, [sp, #315]	; 0x13b
                p2[3] = p1[0];
 8005564:	f89d 4138 	ldrb.w	r4, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8005568:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[2] = p1[1];
 800556c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
                p2[3] = p1[0];
 8005570:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
                p2[0] = p1[3];
 8005574:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[1] = p1[2];
 8005578:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[0] = p1[3];
 800557c:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
                p2[1] = p1[2];
 8005580:	f88d 5089 	strb.w	r5, [sp, #137]	; 0x89
                p2[2] = p1[1];
 8005584:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8005586:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
                p2[1] = p1[2];
 800558a:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
                p2[2] = p1[1];
 800558e:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8005592:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8005596:	f88d b082 	strb.w	fp, [sp, #130]	; 0x82
                p2[3] = p1[0];
 800559a:	f88d a083 	strb.w	sl, [sp, #131]	; 0x83
                p2[0] = p1[3];
 800559e:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
                p2[1] = p1[2];
 80055a2:	f88d e085 	strb.w	lr, [sp, #133]	; 0x85
                p2[2] = p1[1];
 80055a6:	f88d c086 	strb.w	ip, [sp, #134]	; 0x86
                p2[3] = p1[0];
 80055aa:	f88d 7087 	strb.w	r7, [sp, #135]	; 0x87
                p2[0] = p1[3];
 80055ae:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
                p2[2] = p1[1];
 80055b2:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
                p2[3] = p1[0];
 80055b6:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
                p2[0] = p1[3];
 80055ba:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                p2[1] = p1[2];
 80055be:	f88d 108d 	strb.w	r1, [sp, #141]	; 0x8d
                p2[2] = p1[1];
 80055c2:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[1] = p1[2];
 80055c6:	f89d 514a 	ldrb.w	r5, [sp, #330]	; 0x14a
                p2[2] = p1[1];
 80055ca:	9100      	str	r1, [sp, #0]
 80055cc:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[3] = p1[0];
 80055d0:	f89d a140 	ldrb.w	sl, [sp, #320]	; 0x140
                p2[2] = p1[1];
 80055d4:	f89d c145 	ldrb.w	ip, [sp, #325]	; 0x145
                p2[3] = p1[0];
 80055d8:	f89d 7144 	ldrb.w	r7, [sp, #324]	; 0x144
                p2[0] = p1[3];
 80055dc:	f89d 614b 	ldrb.w	r6, [sp, #331]	; 0x14b
 80055e0:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
                p2[1] = p1[2];
 80055e4:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[2] = p1[1];
 80055e8:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
                p2[3] = p1[0];
 80055ec:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                p2[0] = p1[3];
 80055f0:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[1] = p1[2];
 80055f4:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[0] = p1[3];
 80055f8:	f89d 8147 	ldrb.w	r8, [sp, #327]	; 0x147
                p2[1] = p1[2];
 80055fc:	f89d e146 	ldrb.w	lr, [sp, #326]	; 0x146
                p2[3] = p1[0];
 8005600:	f89d 4148 	ldrb.w	r4, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8005604:	f88d 5099 	strb.w	r5, [sp, #153]	; 0x99
                p2[2] = p1[1];
 8005608:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 800560a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
                p2[1] = p1[2];
 800560e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
                p2[2] = p1[1];
 8005612:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8005616:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800561a:	f88d b092 	strb.w	fp, [sp, #146]	; 0x92
                p2[3] = p1[0];
 800561e:	f88d a093 	strb.w	sl, [sp, #147]	; 0x93
                p2[2] = p1[1];
 8005622:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
                p2[3] = p1[0];
 8005626:	f88d 7097 	strb.w	r7, [sp, #151]	; 0x97
                p2[0] = p1[3];
 800562a:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
                p2[2] = p1[1];
 800562e:	f88d 509a 	strb.w	r5, [sp, #154]	; 0x9a
                p2[0] = p1[3];
 8005632:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
                p2[1] = p1[2];
 8005636:	f88d e095 	strb.w	lr, [sp, #149]	; 0x95
                p2[3] = p1[0];
 800563a:	f88d 409b 	strb.w	r4, [sp, #155]	; 0x9b
                p2[0] = p1[3];
 800563e:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                p2[1] = p1[2];
 8005642:	f88d 109d 	strb.w	r1, [sp, #157]	; 0x9d
	data[i] = in[i];
 8005646:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800564a:	e9c9 0102 	strd	r0, r1, [r9, #8]
 800564e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
                p2[2] = p1[1];
 8005652:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
                p2[3] = p1[0];
 8005656:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    AA = A;
 800565a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800565c:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 800565e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005660:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8005664:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 8005668:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800566c:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8005670:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8005672:	9108      	str	r1, [sp, #32]
	data[i] = in[i];
 8005674:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
    CC = C;
 8005678:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800567a:	9109      	str	r1, [sp, #36]	; 0x24
	data[i] = in[i];
 800567c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    DD = D;
 8005680:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8005682:	910a      	str	r1, [sp, #40]	; 0x28
	data[i] = in[i];
 8005684:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8005688:	e9c9 230c 	strd	r2, r3, [r9, #48]	; 0x30
 800568c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800568e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    EE = E;
 8005690:	9940      	ldr	r1, [sp, #256]	; 0x100
	data[i] = in[i];
 8005692:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005694:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    EE = E;
 8005698:	910b      	str	r1, [sp, #44]	; 0x2c
	data[i] = in[i];
 800569a:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800569e:	e9c9 ab0a 	strd	sl, fp, [r9, #40]	; 0x28
    FF = F;
 80056a2:	9941      	ldr	r1, [sp, #260]	; 0x104
 80056a4:	910c      	str	r1, [sp, #48]	; 0x30
	data[i] = in[i];
 80056a6:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 80056aa:	9942      	ldr	r1, [sp, #264]	; 0x108
 80056ac:	910d      	str	r1, [sp, #52]	; 0x34
    HH = H;
 80056ae:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80056b0:	910e      	str	r1, [sp, #56]	; 0x38
	data[i] = in[i];
 80056b2:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 80056b6:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 80056b8:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80056bc:	ea4f 41f0 	mov.w	r1, r0, ror #19
 80056c0:	ea81 4170 	eor.w	r1, r1, r0, ror #17
 80056c4:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80056c8:	4438      	add	r0, r7
 80056ca:	e9d6 1409 	ldrd	r1, r4, [r6, #36]	; 0x24
 80056ce:	e9d6 5701 	ldrd	r5, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80056d2:	ea4f 4273 	mov.w	r2, r3, ror #17
 80056d6:	ea82 42f3 	eor.w	r2, r2, r3, ror #19
 80056da:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80056de:	4423      	add	r3, r4
 80056e0:	4401      	add	r1, r0
 80056e2:	ea4f 14f7 	mov.w	r4, r7, ror #7
 80056e6:	ea4f 40b5 	mov.w	r0, r5, ror #18
 80056ea:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 80056ee:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 80056f2:	195a      	adds	r2, r3, r5
 80056f4:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 80056f8:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 80056fc:	f10c 0c02 	add.w	ip, ip, #2
 8005700:	4408      	add	r0, r1
 8005702:	4413      	add	r3, r2
 8005704:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005708:	e9c6 0310 	strd	r0, r3, [r6, #64]	; 0x40
 800570c:	f106 0608 	add.w	r6, r6, #8
 8005710:	d1d4      	bne.n	80056bc <mouseDriver_sendMsg.constprop.2+0x1890>
 8005712:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8005716:	ea4f 45f1 	mov.w	r5, r1, ror #19
 800571a:	ea85 4571 	eor.w	r5, r5, r1, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800571e:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005722:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005726:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 800572a:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800572e:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8005732:	4408      	add	r0, r1
 8005734:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005738:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800573c:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8005740:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8005744:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8005748:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800574a:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800574e:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8005752:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8005756:	4428      	add	r0, r5
 8005758:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 800575c:	440b      	add	r3, r1
 800575e:	4473      	add	r3, lr
 8005760:	4402      	add	r2, r0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005762:	e9c9 233e 	strd	r2, r3, [r9, #248]	; 0xf8
    CC = C;
 8005766:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    AA = A;
 800576a:	e9dd 5c07 	ldrd	r5, ip, [sp, #28]
    FF = F;
 800576e:	e9dd 8e0c 	ldrd	r8, lr, [sp, #48]	; 0x30
    HH = H;
 8005772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    EE = E;
 8005774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    for (i = 0; i < 64; i++) {
 8005776:	2600      	movs	r6, #0
 8005778:	e005      	b.n	8005786 <mouseDriver_sendMsg.constprop.2+0x195a>
 800577a:	4667      	mov	r7, ip
 800577c:	46c6      	mov	lr, r8
 800577e:	46ac      	mov	ip, r5
 8005780:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8005782:	4615      	mov	r5, r2
	EE = DD + T1;
 8005784:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8005786:	ea2e 0204 	bic.w	r2, lr, r4
 800578a:	ea08 0b04 	and.w	fp, r8, r4
 800578e:	4610      	mov	r0, r2
 8005790:	465a      	mov	r2, fp
 8005792:	4042      	eors	r2, r0
 8005794:	484d      	ldr	r0, [pc, #308]	; (80058cc <mouseDriver_sendMsg.constprop.2+0x1aa0>)
 8005796:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800579a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800579e:	9000      	str	r0, [sp, #0]
 80057a0:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80057a4:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80057a8:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80057ac:	440a      	add	r2, r1
 80057ae:	4402      	add	r2, r0
 80057b0:	9800      	ldr	r0, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80057b2:	ea4f 3175 	mov.w	r1, r5, ror #13
 80057b6:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80057ba:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80057bc:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80057c0:	ea07 000c 	and.w	r0, r7, ip
 80057c4:	ea0b 0b05 	and.w	fp, fp, r5
 80057c8:	ea8b 0b00 	eor.w	fp, fp, r0
 80057cc:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80057d0:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80057d2:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80057d4:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80057d6:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80057d8:	eb02 000a 	add.w	r0, r2, sl
 80057dc:	4673      	mov	r3, lr
	AA = T1 + T2;
 80057de:	440a      	add	r2, r1
 80057e0:	46ba      	mov	sl, r7
    for (i = 0; i < 64; i++) {
 80057e2:	d1ca      	bne.n	800577a <mouseDriver_sendMsg.constprop.2+0x194e>
 80057e4:	4611      	mov	r1, r2
 80057e6:	4602      	mov	r2, r0
    D += DD;
 80057e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    A += AA;
 80057ea:	9b07      	ldr	r3, [sp, #28]
    D += DD;
 80057ec:	4438      	add	r0, r7
 80057ee:	4607      	mov	r7, r0
    E += EE;
 80057f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80057f2:	4410      	add	r0, r2
 80057f4:	4602      	mov	r2, r0
    F += FF;
 80057f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    E += EE;
 80057f8:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 80057fa:	440b      	add	r3, r1
    F += FF;
 80057fc:	4420      	add	r0, r4
 80057fe:	4604      	mov	r4, r0
    A += AA;
 8005800:	4619      	mov	r1, r3
    G += GG;
 8005802:	980d      	ldr	r0, [sp, #52]	; 0x34
    B += BB;
 8005804:	9b08      	ldr	r3, [sp, #32]
    F += FF;
 8005806:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8005808:	442b      	add	r3, r5
    G += GG;
 800580a:	4440      	add	r0, r8
    B += BB;
 800580c:	461d      	mov	r5, r3
    G += GG;
 800580e:	4606      	mov	r6, r0
    C += CC;
 8005810:	9b09      	ldr	r3, [sp, #36]	; 0x24
    H += HH;
 8005812:	980e      	ldr	r0, [sp, #56]	; 0x38
    G += GG;
 8005814:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8005816:	4463      	add	r3, ip
    H += HH;
 8005818:	4470      	add	r0, lr
    B += BB;
 800581a:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 800581e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8005822:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8005824:	2400      	movs	r4, #0
 8005826:	e5f1      	b.n	800540c <mouseDriver_sendMsg.constprop.2+0x15e0>
    result[0] = p[3];
 8005828:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
    result[1] = p[2];
 800582c:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
    result[0] = p[3];
 8005830:	f88d 3371 	strb.w	r3, [sp, #881]	; 0x371
    result[2] = p[1];
 8005834:	f89d 30f1 	ldrb.w	r3, [sp, #241]	; 0xf1
    result[1] = p[2];
 8005838:	f88d 2372 	strb.w	r2, [sp, #882]	; 0x372
    result[3] = p[0];
 800583c:	f89d 10f0 	ldrb.w	r1, [sp, #240]	; 0xf0
    result[2] = p[1];
 8005840:	f88d 3373 	strb.w	r3, [sp, #883]	; 0x373
    result[4] = p[7];
 8005844:	f89d 20f7 	ldrb.w	r2, [sp, #247]	; 0xf7
    result[5] = p[6];
 8005848:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    result[3] = p[0];
 800584c:	f88d 1374 	strb.w	r1, [sp, #884]	; 0x374
    result[4] = p[7];
 8005850:	f88d 2375 	strb.w	r2, [sp, #885]	; 0x375
    result[5] = p[6];
 8005854:	f88d 3376 	strb.w	r3, [sp, #886]	; 0x376
 8005858:	f7fe bbe4 	b.w	8004024 <mouseDriver_sendMsg.constprop.2+0x1f8>
	while (length > 1 && payload[length-1] == 0) {
 800585c:	f04f 0e0c 	mov.w	lr, #12
 8005860:	4675      	mov	r5, lr
 8005862:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 8005866:	b2b6      	uxth	r6, r6
 8005868:	f7fe bb4c 	b.w	8003f04 <mouseDriver_sendMsg.constprop.2+0xd8>
		length--;
 800586c:	f04f 0e0b 	mov.w	lr, #11
	while (length > 1 && payload[length-1] == 0) {
 8005870:	4675      	mov	r5, lr
 8005872:	e7f6      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 8005874:	f04f 0e0a 	mov.w	lr, #10
	while (length > 1 && payload[length-1] == 0) {
 8005878:	4675      	mov	r5, lr
 800587a:	e7f2      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 800587c:	f04f 0e09 	mov.w	lr, #9
	while (length > 1 && payload[length-1] == 0) {
 8005880:	4675      	mov	r5, lr
 8005882:	e7ee      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 8005884:	f04f 0e08 	mov.w	lr, #8
	while (length > 1 && payload[length-1] == 0) {
 8005888:	4675      	mov	r5, lr
 800588a:	e7ea      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 800588c:	f04f 0e07 	mov.w	lr, #7
	while (length > 1 && payload[length-1] == 0) {
 8005890:	4675      	mov	r5, lr
 8005892:	e7e6      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 8005894:	f04f 0e06 	mov.w	lr, #6
	while (length > 1 && payload[length-1] == 0) {
 8005898:	4675      	mov	r5, lr
 800589a:	e7e2      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 800589c:	f04f 0e05 	mov.w	lr, #5
	while (length > 1 && payload[length-1] == 0) {
 80058a0:	4675      	mov	r5, lr
 80058a2:	e7de      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 80058a4:	f04f 0e04 	mov.w	lr, #4
	while (length > 1 && payload[length-1] == 0) {
 80058a8:	4675      	mov	r5, lr
 80058aa:	e7da      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 80058ac:	f04f 0e03 	mov.w	lr, #3
	while (length > 1 && payload[length-1] == 0) {
 80058b0:	4675      	mov	r5, lr
 80058b2:	e7d6      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
		length--;
 80058b4:	f04f 0e02 	mov.w	lr, #2
	while (length > 1 && payload[length-1] == 0) {
 80058b8:	4675      	mov	r5, lr
 80058ba:	e7d2      	b.n	8005862 <mouseDriver_sendMsg.constprop.2+0x1a36>
	if (signing) {
 80058bc:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 80058c0:	f04f 0808 	mov.w	r8, #8
 80058c4:	f04f 0c0a 	mov.w	ip, #10
 80058c8:	f7fe bb41 	b.w	8003f4e <mouseDriver_sendMsg.constprop.2+0x122>
 80058cc:	0800e200 	.word	0x0800e200

080058d0 <mouseDriver_sendMsg.constprop.0>:
void mouseDriver_sendMsg(uint32_t msgid){
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
 80058d8:	e001      	b.n	80058de <mouseDriver_sendMsg.constprop.0+0xe>
		HAL_Delay(1);
 80058da:	f005 fdc3 	bl	800b464 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 80058de:	f003 fd07 	bl	80092f0 <main_get_huart_tx_state>
 80058e2:	2802      	cmp	r0, #2
		HAL_Delay(1);
 80058e4:	f04f 0001 	mov.w	r0, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 80058e8:	d0f7      	beq.n	80058da <mouseDriver_sendMsg.constprop.0+0xa>
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 80058ea:	4bad      	ldr	r3, [pc, #692]	; (8005ba0 <mouseDriver_sendMsg.constprop.0+0x2d0>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80058ec:	4cad      	ldr	r4, [pc, #692]	; (8005ba4 <mouseDriver_sendMsg.constprop.0+0x2d4>)
 80058ee:	6859      	ldr	r1, [r3, #4]
    packet.setpoint_x = setpoint_x;
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	9013      	str	r0, [sp, #76]	; 0x4c
 80058f4:	aa13      	add	r2, sp, #76	; 0x4c
    packet.setpoint_y = setpoint_y;
 80058f6:	9114      	str	r1, [sp, #80]	; 0x50
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 80058f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058fc:	7b23      	ldrb	r3, [r4, #12]
 80058fe:	aa98      	add	r2, sp, #608	; 0x260
 8005900:	e882 0003 	stmia.w	r2, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8005904:	2102      	movs	r1, #2
 8005906:	2200      	movs	r2, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8005908:	400b      	ands	r3, r1
 800590a:	f88d 125d 	strb.w	r1, [sp, #605]	; 0x25d
 800590e:	f88d 225e 	strb.w	r2, [sp, #606]	; 0x25e
 8005912:	f88d 225f 	strb.w	r2, [sp, #607]	; 0x25f
 8005916:	d142      	bne.n	800599e <mouseDriver_sendMsg.constprop.0+0xce>
 8005918:	6922      	ldr	r2, [r4, #16]
 800591a:	2a00      	cmp	r2, #0
 800591c:	f000 83d7 	beq.w	80060ce <mouseDriver_sendMsg.constprop.0+0x7fe>
 8005920:	7810      	ldrb	r0, [r2, #0]
 8005922:	f000 0001 	and.w	r0, r0, #1
	while (length > 1 && payload[length-1] == 0) {
 8005926:	f89d 2267 	ldrb.w	r2, [sp, #615]	; 0x267
		msg->magic = MAVLINK_STX;
 800592a:	21fd      	movs	r1, #253	; 0xfd
 800592c:	f88d 1256 	strb.w	r1, [sp, #598]	; 0x256
	while (length > 1 && payload[length-1] == 0) {
 8005930:	2a00      	cmp	r2, #0
 8005932:	f041 84cb 	bne.w	80072cc <mouseDriver_sendMsg.constprop.0+0x19fc>
 8005936:	f89d 2266 	ldrb.w	r2, [sp, #614]	; 0x266
 800593a:	2a00      	cmp	r2, #0
 800593c:	f041 84ce 	bne.w	80072dc <mouseDriver_sendMsg.constprop.0+0x1a0c>
 8005940:	f89d 2265 	ldrb.w	r2, [sp, #613]	; 0x265
 8005944:	2a00      	cmp	r2, #0
 8005946:	f041 84cd 	bne.w	80072e4 <mouseDriver_sendMsg.constprop.0+0x1a14>
 800594a:	f89d 2264 	ldrb.w	r2, [sp, #612]	; 0x264
 800594e:	2a00      	cmp	r2, #0
 8005950:	f041 84cc 	bne.w	80072ec <mouseDriver_sendMsg.constprop.0+0x1a1c>
 8005954:	f89d 2263 	ldrb.w	r2, [sp, #611]	; 0x263
 8005958:	2a00      	cmp	r2, #0
 800595a:	f041 84cb 	bne.w	80072f4 <mouseDriver_sendMsg.constprop.0+0x1a24>
 800595e:	f89d 2262 	ldrb.w	r2, [sp, #610]	; 0x262
 8005962:	2a00      	cmp	r2, #0
 8005964:	f041 84ca 	bne.w	80072fc <mouseDriver_sendMsg.constprop.0+0x1a2c>
 8005968:	f89d 6261 	ldrb.w	r6, [sp, #609]	; 0x261
 800596c:	2e00      	cmp	r6, #0
 800596e:	f041 84c9 	bne.w	8007304 <mouseDriver_sendMsg.constprop.0+0x1a34>
 8005972:	2501      	movs	r5, #1
 8005974:	46ae      	mov	lr, r5
	msg->sysid = system_id;
 8005976:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8005978:	f88d e257 	strb.w	lr, [sp, #599]	; 0x257
	msg->sysid = system_id;
 800597c:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 8005980:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
	if (signing) {
 8005984:	2800      	cmp	r0, #0
 8005986:	f001 84c1 	beq.w	800730c <mouseDriver_sendMsg.constprop.0+0x1a3c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800598a:	2101      	movs	r1, #1
 800598c:	f88d 1258 	strb.w	r1, [sp, #600]	; 0x258
 8005990:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 8005994:	f04f 0808 	mov.w	r8, #8
 8005998:	f04f 0c0a 	mov.w	ip, #10
 800599c:	e015      	b.n	80059ca <mouseDriver_sendMsg.constprop.0+0xfa>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800599e:	f640 01fe 	movw	r1, #2302	; 0x8fe
	msg->compid = component_id;
 80059a2:	2508      	movs	r5, #8
	msg->sysid = system_id;
 80059a4:	f88d 225b 	strb.w	r2, [sp, #603]	; 0x25b
	msg->compid = component_id;
 80059a8:	f88d 225c 	strb.w	r2, [sp, #604]	; 0x25c
		msg->magic = MAVLINK_STX_MAVLINK1;
 80059ac:	f8ad 1256 	strh.w	r1, [sp, #598]	; 0x256
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80059b0:	46ae      	mov	lr, r5
	msg->compid = component_id;
 80059b2:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 80059b6:	f04f 0804 	mov.w	r8, #4
 80059ba:	2607      	movs	r6, #7
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80059bc:	f04f 0c06 	mov.w	ip, #6
	msg->incompat_flags = 0;
 80059c0:	2200      	movs	r2, #0
 80059c2:	4610      	mov	r0, r2
 80059c4:	f88d 2258 	strb.w	r2, [sp, #600]	; 0x258
 80059c8:	4611      	mov	r1, r2
	msg->seq = status->current_tx_seq;
 80059ca:	79a2      	ldrb	r2, [r4, #6]
 80059cc:	f88d 225a 	strb.w	r2, [sp, #602]	; 0x25a
	status->current_tx_seq = status->current_tx_seq + 1;
 80059d0:	1c57      	adds	r7, r2, #1
 80059d2:	71a7      	strb	r7, [r4, #6]
	msg->compat_flags = 0;
 80059d4:	2700      	movs	r7, #0
	buf[0] = msg->magic;
 80059d6:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
	buf[1] = msg->len;
 80059da:	f88d e055 	strb.w	lr, [sp, #85]	; 0x55
	msg->compat_flags = 0;
 80059de:	f88d 7259 	strb.w	r7, [sp, #601]	; 0x259
	if (mavlink1) {
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80b6 	beq.w	8005b54 <mouseDriver_sendMsg.constprop.0+0x284>
		buf[5] = msg->msgid & 0xFF;
 80059e8:	2302      	movs	r3, #2
		buf[2] = msg->seq;
 80059ea:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
		buf[3] = msg->sysid;
 80059ee:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
		buf[4] = msg->compid;
 80059f2:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
		buf[5] = msg->msgid & 0xFF;
 80059f6:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 80059fa:	f108 0802 	add.w	r8, r8, #2
 80059fe:	ab15      	add	r3, sp, #84	; 0x54
 8005a00:	4498      	add	r8, r3
        *crcAccum = X25_INIT_CRC;
 8005a02:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005a06:	f10d 0e55 	add.w	lr, sp, #85	; 0x55
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8005a0a:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8005a0e:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8005a10:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8005a14:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8005a16:	091a      	lsrs	r2, r3, #4
 8005a18:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8005a1c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	while (length--) {
 8005a20:	45c6      	cmp	lr, r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8005a22:	ea87 07c3 	eor.w	r7, r7, r3, lsl #3
	while (length--) {
 8005a26:	d1f0      	bne.n	8005a0a <mouseDriver_sendMsg.constprop.0+0x13a>
 8005a28:	360d      	adds	r6, #13
 8005a2a:	ab95      	add	r3, sp, #596	; 0x254
 8005a2c:	441e      	add	r6, r3
	const uint8_t *p = (const uint8_t *)pBuffer;
 8005a2e:	a998      	add	r1, sp, #608	; 0x260
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8005a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a34:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 8005a36:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8005a3a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8005a3c:	091a      	lsrs	r2, r3, #4
 8005a3e:	ea82 2717 	eor.w	r7, r2, r7, lsr #8
 8005a42:	ea87 2703 	eor.w	r7, r7, r3, lsl #8
 8005a46:	ea87 03c3 	eor.w	r3, r7, r3, lsl #3
 8005a4a:	b21b      	sxth	r3, r3
	while (length--) {
 8005a4c:	42b1      	cmp	r1, r6
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8005a4e:	b29f      	uxth	r7, r3
	while (length--) {
 8005a50:	d1ee      	bne.n	8005a30 <mouseDriver_sendMsg.constprop.0+0x160>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8005a52:	f083 0126 	eor.w	r1, r3, #38	; 0x26
        tmp ^= (tmp<<4);
 8005a56:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8005a5a:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8005a5c:	0a3b      	lsrs	r3, r7, #8
 8005a5e:	ea83 1311 	eor.w	r3, r3, r1, lsr #4
 8005a62:	ea83 2301 	eor.w	r3, r3, r1, lsl #8
 8005a66:	ea83 01c1 	eor.w	r1, r3, r1, lsl #3
 8005a6a:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8005a6c:	aa98      	add	r2, sp, #608	; 0x260
 8005a6e:	b2cb      	uxtb	r3, r1
 8005a70:	5553      	strb	r3, [r2, r5]
 8005a72:	b289      	uxth	r1, r1
 8005a74:	9304      	str	r3, [sp, #16]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8005a76:	f20d 2261 	addw	r2, sp, #609	; 0x261
 8005a7a:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8005a7e:	0a0d      	lsrs	r5, r1, #8
 8005a80:	54d5      	strb	r5, [r2, r3]
 8005a82:	9505      	str	r5, [sp, #20]
	msg->checksum = checksum;
 8005a84:	f8ad 1254 	strh.w	r1, [sp, #596]	; 0x254
	if (signing) {
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f040 808f 	bne.w	8005bac <mouseDriver_sendMsg.constprop.0+0x2dc>
 8005a8e:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8005a92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a96:	9b97      	ldr	r3, [sp, #604]	; 0x25c
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8005a98:	f89d 2256 	ldrb.w	r2, [sp, #598]	; 0x256
 8005a9c:	f89d e25a 	ldrb.w	lr, [sp, #602]	; 0x25a
 8005aa0:	f89d c25b 	ldrb.w	ip, [sp, #603]	; 0x25b
 8005aa4:	f89d 725c 	ldrb.w	r7, [sp, #604]	; 0x25c
 8005aa8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005aac:	2afe      	cmp	r2, #254	; 0xfe
 8005aae:	b2de      	uxtb	r6, r3
 8005ab0:	f000 82f4 	beq.w	800609c <mouseDriver_sendMsg.constprop.0+0x7cc>
	while (length > 1 && payload[length-1] == 0) {
 8005ab4:	9802      	ldr	r0, [sp, #8]
 8005ab6:	2801      	cmp	r0, #1
 8005ab8:	d915      	bls.n	8005ae6 <mouseDriver_sendMsg.constprop.0+0x216>
 8005aba:	f20d 215f 	addw	r1, sp, #607	; 0x25f
 8005abe:	5c09      	ldrb	r1, [r1, r0]
 8005ac0:	b989      	cbnz	r1, 8005ae6 <mouseDriver_sendMsg.constprop.0+0x216>
 8005ac2:	1e41      	subs	r1, r0, #1
 8005ac4:	b2c8      	uxtb	r0, r1
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	310c      	adds	r1, #12
 8005aca:	ac95      	add	r4, sp, #596	; 0x254
 8005acc:	4421      	add	r1, r4
 8005ace:	e005      	b.n	8005adc <mouseDriver_sendMsg.constprop.0+0x20c>
 8005ad0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8005ad4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8005ad8:	b91d      	cbnz	r5, 8005ae2 <mouseDriver_sendMsg.constprop.0+0x212>
 8005ada:	4640      	mov	r0, r8
		length--;
 8005adc:	b2c4      	uxtb	r4, r0
	while (length > 1 && payload[length-1] == 0) {
 8005ade:	2c01      	cmp	r4, #1
 8005ae0:	d1f6      	bne.n	8005ad0 <mouseDriver_sendMsg.constprop.0+0x200>
 8005ae2:	e9cd 4002 	strd	r4, r0, [sp, #8]
		buf[0] = msg->magic;
 8005ae6:	4d30      	ldr	r5, [pc, #192]	; (8005ba8 <mouseDriver_sendMsg.constprop.0+0x2d8>)
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8005ae8:	f8dd a00c 	ldr.w	sl, [sp, #12]
		buf[2] = msg->incompat_flags;
 8005aec:	f89d 4258 	ldrb.w	r4, [sp, #600]	; 0x258
		buf[3] = msg->compat_flags;
 8005af0:	f89d 8259 	ldrb.w	r8, [sp, #601]	; 0x259
		buf[0] = msg->magic;
 8005af4:	702a      	strb	r2, [r5, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8005af6:	ea4f 2923 	mov.w	r9, r3, asr #8
		buf[1] = length;
 8005afa:	9a02      	ldr	r2, [sp, #8]
 8005afc:	706a      	strb	r2, [r5, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8005afe:	141b      	asrs	r3, r3, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8005b00:	a998      	add	r1, sp, #608	; 0x260
 8005b02:	4652      	mov	r2, sl
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8005b04:	726b      	strb	r3, [r5, #9]
		buf[4] = msg->seq;
 8005b06:	f885 e004 	strb.w	lr, [r5, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8005b0a:	f105 000a 	add.w	r0, r5, #10
		buf[5] = msg->sysid;
 8005b0e:	f885 c005 	strb.w	ip, [r5, #5]
		buf[6] = msg->compid;
 8005b12:	71af      	strb	r7, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8005b14:	71ee      	strb	r6, [r5, #7]
		buf[3] = msg->compat_flags;
 8005b16:	f885 8003 	strb.w	r8, [r5, #3]
		buf[2] = msg->incompat_flags;
 8005b1a:	70ac      	strb	r4, [r5, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8005b1c:	f885 9008 	strb.w	r9, [r5, #8]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8005b20:	f008 fb4f 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8005b24:	4653      	mov	r3, sl
 8005b26:	330a      	adds	r3, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8005b28:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 8005b2c:	eb05 0203 	add.w	r2, r5, r3
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8005b30:	d122      	bne.n	8005b78 <mouseDriver_sendMsg.constprop.0+0x2a8>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8005b32:	9804      	ldr	r0, [sp, #16]
 8005b34:	54e8      	strb	r0, [r5, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8005b36:	9b05      	ldr	r3, [sp, #20]
 8005b38:	7053      	strb	r3, [r2, #1]
 8005b3a:	2409      	movs	r4, #9
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8005b3c:	4421      	add	r1, r4
 8005b3e:	9b02      	ldr	r3, [sp, #8]
			main_transmit_buffer(outBuffer, msg_size);
 8005b40:	4819      	ldr	r0, [pc, #100]	; (8005ba8 <mouseDriver_sendMsg.constprop.0+0x2d8>)
 8005b42:	3103      	adds	r1, #3
 8005b44:	4419      	add	r1, r3
 8005b46:	b289      	uxth	r1, r1
}
 8005b48:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 8005b4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			main_transmit_buffer(outBuffer, msg_size);
 8005b50:	f003 bbd6 	b.w	8009300 <main_transmit_buffer>
		buf[7] = msg->msgid & 0xFF;
 8005b54:	2702      	movs	r7, #2
		buf[2] = msg->incompat_flags;
 8005b56:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
		buf[3] = msg->compat_flags;
 8005b5a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
		buf[4] = msg->seq;
 8005b5e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		buf[5] = msg->sysid;
 8005b62:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		buf[6] = msg->compid;
 8005b66:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8005b6a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8005b6e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		buf[7] = msg->msgid & 0xFF;
 8005b72:	f88d 705b 	strb.w	r7, [sp, #91]	; 0x5b
 8005b76:	e740      	b.n	80059fa <mouseDriver_sendMsg.constprop.0+0x12a>
		memcpy(&ck[2], msg->signature, signature_len);
 8005b78:	a9de      	add	r1, sp, #888	; 0x378
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8005b7a:	9804      	ldr	r0, [sp, #16]
		memcpy(&ck[2], msg->signature, signature_len);
 8005b7c:	f851 6d0e 	ldr.w	r6, [r1, #-14]!
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8005b80:	54e8      	strb	r0, [r5, r3]
		memcpy(&ck[2], msg->signature, signature_len);
 8005b82:	688c      	ldr	r4, [r1, #8]
 8005b84:	684d      	ldr	r5, [r1, #4]
 8005b86:	7b08      	ldrb	r0, [r1, #12]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8005b88:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ck[2], msg->signature, signature_len);
 8005b8a:	f8c2 400a 	str.w	r4, [r2, #10]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8005b8e:	7053      	strb	r3, [r2, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8005b90:	f8c2 6002 	str.w	r6, [r2, #2]
 8005b94:	210d      	movs	r1, #13
 8005b96:	f8c2 5006 	str.w	r5, [r2, #6]
 8005b9a:	7390      	strb	r0, [r2, #14]
 8005b9c:	2409      	movs	r4, #9
 8005b9e:	e7cd      	b.n	8005b3c <mouseDriver_sendMsg.constprop.0+0x26c>
 8005ba0:	20000050 	.word	0x20000050
 8005ba4:	20000058 	.word	0x20000058
 8005ba8:	200000b8 	.word	0x200000b8
		mavlink_sign_packet(status->signing,
 8005bac:	f89d 3257 	ldrb.w	r3, [sp, #599]	; 0x257
 8005bb0:	6926      	ldr	r6, [r4, #16]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8005bb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f43f af6d 	beq.w	8005a96 <mouseDriver_sendMsg.constprop.0+0x1c6>
 8005bbc:	7833      	ldrb	r3, [r6, #0]
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	f57f af69 	bpl.w	8005a96 <mouseDriver_sendMsg.constprop.0+0x1c6>
	tstamp.t64 = signing->timestamp;
 8005bc4:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
	signing->timestamp++;
 8005bc8:	1c62      	adds	r2, r4, #1
	tstamp.t64 = signing->timestamp;
 8005bca:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	signing->timestamp++;
 8005bce:	f145 0300 	adc.w	r3, r5, #0
	memcpy(&signature[1], tstamp.t8, 6);
 8005bd2:	f8cd 436b 	str.w	r4, [sp, #875]	; 0x36b
    D = 0xa54ff53a;
 8005bd6:	4d1e      	ldr	r5, [pc, #120]	; (8005c50 <mouseDriver_sendMsg.constprop.0+0x380>)
 8005bd8:	4c1e      	ldr	r4, [pc, #120]	; (8005c54 <mouseDriver_sendMsg.constprop.0+0x384>)
	mavlink_sha256_update(&ctx, header, header_len);
 8005bda:	f8cd c018 	str.w	ip, [sp, #24]
 8005bde:	e9cd 543e 	strd	r5, r4, [sp, #248]	; 0xf8
    E = 0x510e527f;
 8005be2:	4c1d      	ldr	r4, [pc, #116]	; (8005c58 <mouseDriver_sendMsg.constprop.0+0x388>)
 8005be4:	9440      	str	r4, [sp, #256]	; 0x100
	signing->timestamp++;
 8005be6:	e9c6 2302 	strd	r2, r3, [r6, #8]
    F = 0x9b05688c;
 8005bea:	4c1c      	ldr	r4, [pc, #112]	; (8005c5c <mouseDriver_sendMsg.constprop.0+0x38c>)
 8005bec:	9441      	str	r4, [sp, #260]	; 0x104
	memcpy(m->u.save_bytes + offset, p, l);
 8005bee:	4637      	mov	r7, r6
    G = 0x1f83d9ab;
 8005bf0:	4c1b      	ldr	r4, [pc, #108]	; (8005c60 <mouseDriver_sendMsg.constprop.0+0x390>)
	memcpy(m->u.save_bytes + offset, p, l);
 8005bf2:	f857 0f10 	ldr.w	r0, [r7, #16]!
    G = 0x1f83d9ab;
 8005bf6:	9442      	str	r4, [sp, #264]	; 0x108
    H = 0x5be0cd19;
 8005bf8:	f104 5474 	add.w	r4, r4, #1023410176	; 0x3d000000
    B = 0xbb67ae85;
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <mouseDriver_sendMsg.constprop.0+0x394>)
	memcpy(m->u.save_bytes + offset, p, l);
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68ba      	ldr	r2, [r7, #8]
    B = 0xbb67ae85;
 8005c02:	933d      	str	r3, [sp, #244]	; 0xf4
    H = 0x5be0cd19;
 8005c04:	f5a4 0423 	sub.w	r4, r4, #10682368	; 0xa30000
	memcpy(m->u.save_bytes + offset, p, l);
 8005c08:	68fb      	ldr	r3, [r7, #12]
	signature[0] = signing->link_id;
 8005c0a:	7876      	ldrb	r6, [r6, #1]
	memcpy(&signature[1], tstamp.t8, 6);
 8005c0c:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8005c10:	f8ad 536f 	strh.w	r5, [sp, #879]	; 0x36f
    H = 0x5be0cd19;
 8005c14:	f6a4 4492 	subw	r4, r4, #3218	; 0xc92
 8005c18:	9443      	str	r4, [sp, #268]	; 0x10c
	memcpy(m->u.save_bytes + offset, p, l);
 8005c1a:	ac44      	add	r4, sp, #272	; 0x110
 8005c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	signature[0] = signing->link_id;
 8005c1e:	f88d 636a 	strb.w	r6, [sp, #874]	; 0x36a
 8005c22:	6938      	ldr	r0, [r7, #16]
 8005c24:	6979      	ldr	r1, [r7, #20]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	69fb      	ldr	r3, [r7, #28]
    A = 0x6a09e667;
 8005c2a:	4e0f      	ldr	r6, [pc, #60]	; (8005c68 <mouseDriver_sendMsg.constprop.0+0x398>)
    const unsigned char *p = (const unsigned char *)v;
 8005c2c:	af15      	add	r7, sp, #84	; 0x54
    m->sz[0] += len * 8;
 8005c2e:	f44f 7580 	mov.w	r5, #256	; 0x100
    const unsigned char *p = (const unsigned char *)v;
 8005c32:	9707      	str	r7, [sp, #28]
    m->sz[0] += len * 8;
 8005c34:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
    A = 0x6a09e667;
 8005c38:	2700      	movs	r7, #0
 8005c3a:	e9cd 763b 	strd	r7, r6, [sp, #236]	; 0xec
 8005c3e:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
	memcpy(m->u.save_bytes + offset, p, l);
 8005c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	data[i] = in[i];
 8005c44:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    offset = (old_sz / 8) % 64;
 8005c48:	2420      	movs	r4, #32
    m->sz[0] += len * 8;
 8005c4a:	953a      	str	r5, [sp, #232]	; 0xe8
 8005c4c:	e012      	b.n	8005c74 <mouseDriver_sendMsg.constprop.0+0x3a4>
 8005c4e:	bf00      	nop
 8005c50:	3c6ef372 	.word	0x3c6ef372
 8005c54:	a54ff53a 	.word	0xa54ff53a
 8005c58:	510e527f 	.word	0x510e527f
 8005c5c:	9b05688c 	.word	0x9b05688c
 8005c60:	1f83d9ab 	.word	0x1f83d9ab
 8005c64:	bb67ae85 	.word	0xbb67ae85
 8005c68:	6a09e667 	.word	0x6a09e667
    while(len > 0){
 8005c6c:	9b06      	ldr	r3, [sp, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 822f 	beq.w	80060d2 <mouseDriver_sendMsg.constprop.0+0x802>
 8005c74:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8005c76:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8005c78:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	bf28      	it	cs
 8005c80:	462b      	movcs	r3, r5
	len -= l;
 8005c82:	1aed      	subs	r5, r5, r3
 8005c84:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8005c86:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8005c88:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8005c8a:	4420      	add	r0, r4
	p += l;
 8005c8c:	441d      	add	r5, r3
	offset += l;
 8005c8e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8005c90:	461a      	mov	r2, r3
 8005c92:	4631      	mov	r1, r6
	p += l;
 8005c94:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8005c96:	f008 fa94 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8005c9a:	2c40      	cmp	r4, #64	; 0x40
 8005c9c:	d1e6      	bne.n	8005c6c <mouseDriver_sendMsg.constprop.0+0x39c>
                p2[2] = p1[1];
 8005c9e:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8005ca2:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8005ca6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8005ca8:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8005cac:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8005cae:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8005cb2:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8005cb4:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8005cb8:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8005cbc:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8005cc0:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8005cc4:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8005cc8:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8005ccc:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8005cd0:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8005cd4:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8005cd8:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8005cdc:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8005ce0:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8005ce4:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8005ce6:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8005cea:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8005cee:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8005cf2:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8005cf6:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8005cfa:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8005cfe:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8005d02:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8005d06:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8005d0a:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8005d0e:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8005d12:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8005d16:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8005d1a:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8005d1e:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8005d22:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8005d26:	9100      	str	r1, [sp, #0]
 8005d28:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8005d2c:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8005d30:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8005d34:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8005d38:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8005d3c:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8005d40:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8005d44:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8005d48:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8005d4c:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8005d50:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8005d54:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8005d58:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8005d5c:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8005d5e:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8005d62:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8005d64:	f88a 2010 	strb.w	r2, [sl, #16]
 8005d68:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8005d6c:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8005d70:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8005d74:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8005d78:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8005d7c:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8005d80:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8005d84:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8005d88:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8005d8c:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8005d90:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8005d94:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8005d98:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8005d9a:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8005d9e:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8005da2:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8005da6:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8005daa:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8005dae:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8005db2:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8005db6:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8005dba:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8005dbe:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8005dc2:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8005dc6:	f88a 201e 	strb.w	r2, [sl, #30]
 8005dca:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8005dce:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8005dd2:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8005dd6:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8005dda:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8005dde:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8005de0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8005de2:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8005de6:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8005dea:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8005dee:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8005df2:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8005df6:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8005dfa:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8005dfe:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8005e02:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8005e06:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8005e0a:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8005e0e:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8005e12:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8005e16:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8005e1a:	9c00      	ldr	r4, [sp, #0]
 8005e1c:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8005e20:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8005e24:	9c01      	ldr	r4, [sp, #4]
 8005e26:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8005e2a:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8005e2e:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8005e32:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8005e36:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8005e3a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8005e3e:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8005e42:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8005e46:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8005e4a:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8005e4e:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8005e52:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8005e56:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8005e5a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8005e5c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8005e5e:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8005e62:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8005e66:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8005e6a:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8005e6e:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8005e72:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8005e76:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8005e7a:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8005e7e:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8005e82:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8005e86:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8005e8a:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8005e8e:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8005e92:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8005e96:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8005e9a:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8005e9c:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8005ea0:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8005ea4:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8005ea8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8005eaa:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8005eae:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8005eb0:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8005eb2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8005eb6:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8005eba:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8005ebe:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8005ec2:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8005ec6:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8005eca:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8005ece:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8005ed2:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8005ed6:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8005eda:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8005ede:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8005ee2:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8005ee6:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8005eea:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8005eee:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8005ef2:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8005ef6:	f8da 7000 	ldr.w	r7, [sl]
 8005efa:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8005efe:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005f02:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005f06:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8005f0a:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8005f0c:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8005f0e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8005f10:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8005f12:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8005f14:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8005f16:	9940      	ldr	r1, [sp, #256]	; 0x100
 8005f18:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8005f1a:	9941      	ldr	r1, [sp, #260]	; 0x104
 8005f1c:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8005f1e:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8005f22:	9942      	ldr	r1, [sp, #264]	; 0x108
 8005f24:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8005f26:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8005f28:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8005f2a:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8005f2e:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8005f30:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005f34:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8005f38:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8005f3c:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005f40:	443a      	add	r2, r7
 8005f42:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8005f46:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005f4a:	ea4f 4573 	mov.w	r5, r3, ror #17
 8005f4e:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8005f52:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005f56:	440b      	add	r3, r1
 8005f58:	4422      	add	r2, r4
 8005f5a:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8005f5e:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8005f62:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8005f66:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8005f6a:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8005f6e:	4403      	add	r3, r0
 8005f70:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8005f74:	f10c 0c02 	add.w	ip, ip, #2
 8005f78:	4414      	add	r4, r2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005f80:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8005f84:	f106 0608 	add.w	r6, r6, #8
 8005f88:	d1d4      	bne.n	8005f34 <mouseDriver_sendMsg.constprop.0+0x664>
 8005f8a:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8005f8e:	ea4f 4271 	mov.w	r2, r1, ror #17
 8005f92:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8005f96:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005f9a:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005f9e:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8005fa2:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005fa6:	ea4f 43f4 	mov.w	r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8005faa:	4408      	add	r0, r1
 8005fac:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005fb0:	ea83 4374 	eor.w	r3, r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8005fb4:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8005fb8:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8005fbc:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8005fc0:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005fc2:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8005fc6:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8005fca:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8005fce:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8005fd2:	4410      	add	r0, r2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	4473      	add	r3, lr
 8005fd8:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005fda:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8005fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe0:	9300      	str	r3, [sp, #0]
    BB = B;
 8005fe2:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8005fe6:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8005fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8005fea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8005fec:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	e005      	b.n	8006000 <mouseDriver_sendMsg.constprop.0+0x730>
 8005ff4:	4667      	mov	r7, ip
 8005ff6:	46c6      	mov	lr, r8
 8005ff8:	46ac      	mov	ip, r5
 8005ffa:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8005ffc:	4615      	mov	r5, r2
	EE = DD + T1;
 8005ffe:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006000:	ea2e 0004 	bic.w	r0, lr, r4
 8006004:	ea04 0208 	and.w	r2, r4, r8
 8006008:	4042      	eors	r2, r0
 800600a:	483d      	ldr	r0, [pc, #244]	; (8006100 <mouseDriver_sendMsg.constprop.0+0x830>)
 800600c:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8006010:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8006014:	9001      	str	r0, [sp, #4]
 8006016:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800601a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 800601e:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8006022:	440a      	add	r2, r1
 8006024:	4402      	add	r2, r0
 8006026:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006028:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800602c:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800602e:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006032:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006034:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800603c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8006040:	ea0b 0b05 	and.w	fp, fp, r5
 8006044:	ea8b 0b00 	eor.w	fp, fp, r0
 8006048:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800604c:	3601      	adds	r6, #1
	EE = DD + T1;
 800604e:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006050:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8006052:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8006054:	4618      	mov	r0, r3
	AA = T1 + T2;
 8006056:	440a      	add	r2, r1
 8006058:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 800605a:	d1cb      	bne.n	8005ff4 <mouseDriver_sendMsg.constprop.0+0x724>
 800605c:	4611      	mov	r1, r2
 800605e:	4602      	mov	r2, r0
    D += DD;
 8006060:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8006062:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8006064:	4438      	add	r0, r7
 8006066:	4607      	mov	r7, r0
    E += EE;
 8006068:	980c      	ldr	r0, [sp, #48]	; 0x30
 800606a:	4410      	add	r0, r2
 800606c:	4602      	mov	r2, r0
    F += FF;
 800606e:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8006070:	9240      	str	r2, [sp, #256]	; 0x100
    F += FF;
 8006072:	4404      	add	r4, r0
    A += AA;
 8006074:	440b      	add	r3, r1
    G += GG;
 8006076:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 8006078:	9441      	str	r4, [sp, #260]	; 0x104
    A += AA;
 800607a:	4619      	mov	r1, r3
    B += BB;
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 800607e:	4440      	add	r0, r8
    B += BB;
 8006080:	441d      	add	r5, r3
    G += GG;
 8006082:	4606      	mov	r6, r0
    C += CC;
 8006084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8006086:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8006088:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 800608a:	4463      	add	r3, ip
    H += HH;
 800608c:	4470      	add	r0, lr
    B += BB;
 800608e:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8006092:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8006096:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8006098:	2400      	movs	r4, #0
 800609a:	e5e7      	b.n	8005c6c <mouseDriver_sendMsg.constprop.0+0x39c>
		buf[0] = msg->magic;
 800609c:	4c19      	ldr	r4, [pc, #100]	; (8006104 <mouseDriver_sendMsg.constprop.0+0x834>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800609e:	9d02      	ldr	r5, [sp, #8]
		buf[0] = msg->magic;
 80060a0:	7022      	strb	r2, [r4, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80060a2:	a998      	add	r1, sp, #608	; 0x260
 80060a4:	1da0      	adds	r0, r4, #6
 80060a6:	462a      	mov	r2, r5
		buf[1] = length;
 80060a8:	7065      	strb	r5, [r4, #1]
		buf[2] = msg->seq;
 80060aa:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 80060ae:	f884 c003 	strb.w	ip, [r4, #3]
		buf[4] = msg->compid;
 80060b2:	7127      	strb	r7, [r4, #4]
		buf[5] = msg->msgid & 0xFF;
 80060b4:	7166      	strb	r6, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80060b6:	f008 f884 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80060ba:	462b      	mov	r3, r5
 80060bc:	3306      	adds	r3, #6
 80060be:	18e2      	adds	r2, r4, r3
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80060c0:	9904      	ldr	r1, [sp, #16]
 80060c2:	54e1      	strb	r1, [r4, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	7053      	strb	r3, [r2, #1]
 80060c8:	2100      	movs	r1, #0
 80060ca:	2405      	movs	r4, #5
 80060cc:	e536      	b.n	8005b3c <mouseDriver_sendMsg.constprop.0+0x26c>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80060ce:	4618      	mov	r0, r3
 80060d0:	e429      	b.n	8005926 <mouseDriver_sendMsg.constprop.0+0x56>
    uint32_t old_sz = m->sz[0];
 80060d2:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    m->sz[0] += len * 8;
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
    if (m->sz[0] < old_sz)
 80060da:	42a5      	cmp	r5, r4
    m->sz[0] += len * 8;
 80060dc:	943a      	str	r4, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 80060de:	d903      	bls.n	80060e8 <mouseDriver_sendMsg.constprop.0+0x818>
	++m->sz[1];
 80060e0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80060e2:	3301      	adds	r3, #1
 80060e4:	933b      	str	r3, [sp, #236]	; 0xec
 80060e6:	9b02      	ldr	r3, [sp, #8]
    offset = (old_sz / 8) % 64;
 80060e8:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    while(len > 0){
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8226 	beq.w	800653e <mouseDriver_sendMsg.constprop.0+0xc6e>
 80060f2:	9306      	str	r3, [sp, #24]
    const unsigned char *p = (const unsigned char *)v;
 80060f4:	ab98      	add	r3, sp, #608	; 0x260
 80060f6:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 80060f8:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 80060fc:	e008      	b.n	8006110 <mouseDriver_sendMsg.constprop.0+0x840>
 80060fe:	bf00      	nop
 8006100:	0800e200 	.word	0x0800e200
 8006104:	200000b8 	.word	0x200000b8
    while(len > 0){
 8006108:	9b06      	ldr	r3, [sp, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8216 	beq.w	800653c <mouseDriver_sendMsg.constprop.0+0xc6c>
 8006110:	9c06      	ldr	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8006112:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 8006114:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
 8006118:	42a3      	cmp	r3, r4
 800611a:	bf28      	it	cs
 800611c:	4623      	movcs	r3, r4
	len -= l;
 800611e:	1ae4      	subs	r4, r4, r3
 8006120:	9406      	str	r4, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8006122:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8006124:	4634      	mov	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8006126:	4428      	add	r0, r5
	p += l;
 8006128:	441c      	add	r4, r3
	offset += l;
 800612a:	441d      	add	r5, r3
	memcpy(m->u.save_bytes + offset, p, l);
 800612c:	461a      	mov	r2, r3
 800612e:	4631      	mov	r1, r6
	p += l;
 8006130:	9407      	str	r4, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 8006132:	f008 f846 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8006136:	2d40      	cmp	r5, #64	; 0x40
 8006138:	d1e6      	bne.n	8006108 <mouseDriver_sendMsg.constprop.0+0x838>
                p2[2] = p1[1];
 800613a:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 800613e:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8006142:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8006144:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8006148:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800614a:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 800614e:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8006150:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8006154:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8006158:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 800615c:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8006160:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8006164:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8006168:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 800616c:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8006170:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8006174:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8006178:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 800617c:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8006180:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8006182:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8006186:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 800618a:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 800618e:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8006192:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8006196:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 800619a:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 800619e:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 80061a2:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 80061a6:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 80061aa:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 80061ae:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 80061b2:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 80061b6:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 80061ba:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 80061be:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 80061c2:	9100      	str	r1, [sp, #0]
 80061c4:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 80061c8:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 80061cc:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 80061d0:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 80061d4:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 80061d8:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 80061dc:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 80061e0:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 80061e4:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 80061e8:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 80061ec:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 80061f0:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 80061f4:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 80061f8:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80061fa:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 80061fe:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8006200:	f88a 2010 	strb.w	r2, [sl, #16]
 8006204:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8006208:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 800620c:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8006210:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8006214:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8006218:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 800621c:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8006220:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8006224:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8006228:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 800622c:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8006230:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8006234:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8006236:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 800623a:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 800623e:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8006242:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8006246:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 800624a:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 800624e:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8006252:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8006256:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 800625a:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 800625e:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8006262:	f88a 201e 	strb.w	r2, [sl, #30]
 8006266:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 800626a:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 800626e:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8006272:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8006276:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 800627a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 800627c:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 800627e:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8006282:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8006286:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 800628a:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 800628e:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8006292:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8006296:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 800629a:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 800629e:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 80062a2:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 80062a6:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 80062aa:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 80062ae:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 80062b2:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 80062b6:	9c00      	ldr	r4, [sp, #0]
 80062b8:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 80062bc:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 80062c0:	9c01      	ldr	r4, [sp, #4]
 80062c2:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 80062c6:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 80062ca:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 80062ce:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 80062d2:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 80062d6:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 80062da:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 80062de:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 80062e2:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 80062e6:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 80062ea:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 80062ee:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 80062f2:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 80062f6:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80062f8:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80062fa:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 80062fe:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8006302:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8006306:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 800630a:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 800630e:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8006312:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8006316:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 800631a:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 800631e:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8006322:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8006326:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 800632a:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 800632e:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8006332:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8006336:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8006338:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 800633c:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8006340:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8006344:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8006346:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 800634a:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 800634c:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 800634e:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8006352:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8006356:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 800635a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800635e:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8006362:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8006366:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800636a:	e9c9 2302 	strd	r2, r3, [r9, #8]
 800636e:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8006372:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8006376:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 800637a:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 800637e:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8006382:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8006386:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 800638a:	e9c9 6708 	strd	r6, r7, [r9, #32]
 800638e:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8006392:	f8da 7000 	ldr.w	r7, [sl]
 8006396:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800639a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800639e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80063a2:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 80063a6:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80063a8:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 80063aa:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80063ac:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 80063ae:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80063b0:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 80063b2:	9940      	ldr	r1, [sp, #256]	; 0x100
 80063b4:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 80063b6:	9941      	ldr	r1, [sp, #260]	; 0x104
 80063b8:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 80063ba:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 80063be:	9942      	ldr	r1, [sp, #264]	; 0x108
 80063c0:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 80063c2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80063c4:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 80063c6:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 80063ca:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 80063cc:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80063d0:	ea4f 42f4 	mov.w	r2, r4, ror #19
 80063d4:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 80063d8:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80063dc:	443a      	add	r2, r7
 80063de:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 80063e2:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80063e6:	ea4f 4573 	mov.w	r5, r3, ror #17
 80063ea:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80063ee:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80063f2:	440b      	add	r3, r1
 80063f4:	4422      	add	r2, r4
 80063f6:	ea4f 11f7 	mov.w	r1, r7, ror #7
 80063fa:	ea4f 44b0 	mov.w	r4, r0, ror #18
 80063fe:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8006402:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8006406:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 800640a:	4403      	add	r3, r0
 800640c:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8006410:	f10c 0c02 	add.w	ip, ip, #2
 8006414:	4414      	add	r4, r2
 8006416:	440b      	add	r3, r1
 8006418:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800641c:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8006420:	f106 0608 	add.w	r6, r6, #8
 8006424:	d1d4      	bne.n	80063d0 <mouseDriver_sendMsg.constprop.0+0xb00>
 8006426:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 800642a:	ea4f 4271 	mov.w	r2, r1, ror #17
 800642e:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8006432:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006436:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800643a:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 800643e:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006442:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8006446:	4408      	add	r0, r1
 8006448:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800644c:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8006450:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8006454:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8006458:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 800645c:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800645e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006462:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8006466:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 800646a:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800646e:	4410      	add	r0, r2
 8006470:	440b      	add	r3, r1
 8006472:	4473      	add	r3, lr
 8006474:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006476:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 800647a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647c:	9300      	str	r3, [sp, #0]
    BB = B;
 800647e:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8006482:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8006484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8006486:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8006488:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 800648c:	2600      	movs	r6, #0
 800648e:	e005      	b.n	800649c <mouseDriver_sendMsg.constprop.0+0xbcc>
 8006490:	4667      	mov	r7, ip
 8006492:	46c6      	mov	lr, r8
 8006494:	46ac      	mov	ip, r5
 8006496:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8006498:	4615      	mov	r5, r2
	EE = DD + T1;
 800649a:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800649c:	ea2e 0004 	bic.w	r0, lr, r4
 80064a0:	ea08 0204 	and.w	r2, r8, r4
 80064a4:	4042      	eors	r2, r0
 80064a6:	4831      	ldr	r0, [pc, #196]	; (800656c <mouseDriver_sendMsg.constprop.0+0xc9c>)
 80064a8:	ea4f 21f4 	mov.w	r1, r4, ror #11
 80064ac:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80064b0:	9001      	str	r0, [sp, #4]
 80064b2:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 80064b6:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80064ba:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80064be:	440a      	add	r2, r1
 80064c0:	4402      	add	r2, r0
 80064c2:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80064c4:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80064c8:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80064ca:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80064ce:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80064d0:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80064d8:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80064dc:	ea0b 0b05 	and.w	fp, fp, r5
 80064e0:	ea8b 0b00 	eor.w	fp, fp, r0
 80064e4:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 80064e8:	3601      	adds	r6, #1
	EE = DD + T1;
 80064ea:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80064ec:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 80064ee:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 80064f0:	4618      	mov	r0, r3
	AA = T1 + T2;
 80064f2:	440a      	add	r2, r1
 80064f4:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 80064f6:	d1cb      	bne.n	8006490 <mouseDriver_sendMsg.constprop.0+0xbc0>
 80064f8:	4611      	mov	r1, r2
 80064fa:	4602      	mov	r2, r0
    D += DD;
 80064fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 80064fe:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8006500:	4438      	add	r0, r7
 8006502:	4607      	mov	r7, r0
    E += EE;
 8006504:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006506:	4410      	add	r0, r2
 8006508:	4602      	mov	r2, r0
    F += FF;
 800650a:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 800650c:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 800650e:	440b      	add	r3, r1
    F += FF;
 8006510:	4420      	add	r0, r4
    A += AA;
 8006512:	4619      	mov	r1, r3
    F += FF;
 8006514:	4604      	mov	r4, r0
    B += BB;
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
    G += GG;
 8006518:	980e      	ldr	r0, [sp, #56]	; 0x38
    F += FF;
 800651a:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 800651c:	442b      	add	r3, r5
    G += GG;
 800651e:	4440      	add	r0, r8
    B += BB;
 8006520:	461d      	mov	r5, r3
    G += GG;
 8006522:	4606      	mov	r6, r0
    C += CC;
 8006524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8006526:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8006528:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 800652a:	4463      	add	r3, ip
    H += HH;
 800652c:	4470      	add	r0, lr
    B += BB;
 800652e:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8006532:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8006536:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8006538:	2500      	movs	r5, #0
 800653a:	e5e5      	b.n	8006108 <mouseDriver_sendMsg.constprop.0+0x838>
 800653c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800653e:	2310      	movs	r3, #16
 8006540:	18e3      	adds	r3, r4, r3
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	bf28      	it	cs
 8006548:	2201      	movcs	r2, #1
    m->sz[0] += len * 8;
 800654a:	933a      	str	r3, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 800654c:	b112      	cbz	r2, 8006554 <mouseDriver_sendMsg.constprop.0+0xc84>
	++m->sz[1];
 800654e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8006550:	3301      	adds	r3, #1
 8006552:	933b      	str	r3, [sp, #236]	; 0xec
		mavlink_sign_packet(status->signing,
 8006554:	9a02      	ldr	r2, [sp, #8]
 8006556:	ab98      	add	r3, sp, #608	; 0x260
 8006558:	4413      	add	r3, r2
 800655a:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 800655c:	2302      	movs	r3, #2
 800655e:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8006562:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 8006564:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8006568:	e006      	b.n	8006578 <mouseDriver_sendMsg.constprop.0+0xca8>
 800656a:	bf00      	nop
 800656c:	0800e200 	.word	0x0800e200
    while(len > 0){
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8215 	beq.w	80069a2 <mouseDriver_sendMsg.constprop.0+0x10d2>
 8006578:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 800657a:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 800657c:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8006580:	42ab      	cmp	r3, r5
 8006582:	bf28      	it	cs
 8006584:	462b      	movcs	r3, r5
	len -= l;
 8006586:	1aed      	subs	r5, r5, r3
 8006588:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 800658a:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 800658c:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800658e:	4420      	add	r0, r4
	p += l;
 8006590:	441d      	add	r5, r3
	offset += l;
 8006592:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8006594:	461a      	mov	r2, r3
 8006596:	4631      	mov	r1, r6
	p += l;
 8006598:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 800659a:	f007 fe12 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800659e:	2c40      	cmp	r4, #64	; 0x40
 80065a0:	d1e6      	bne.n	8006570 <mouseDriver_sendMsg.constprop.0+0xca0>
                p2[2] = p1[1];
 80065a2:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 80065a6:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 80065aa:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80065ac:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 80065b0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80065b2:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 80065b6:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 80065b8:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 80065bc:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 80065c0:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 80065c4:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 80065c8:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 80065cc:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 80065d0:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 80065d4:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 80065d8:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 80065dc:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 80065e0:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 80065e4:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 80065e8:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 80065ea:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 80065ee:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 80065f2:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 80065f6:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 80065fa:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 80065fe:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8006602:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8006606:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 800660a:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 800660e:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8006612:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8006616:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 800661a:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 800661e:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8006622:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8006626:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 800662a:	9100      	str	r1, [sp, #0]
 800662c:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8006630:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8006634:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8006638:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 800663c:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8006640:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8006644:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8006648:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 800664c:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8006650:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8006654:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8006658:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800665c:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8006660:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8006662:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8006666:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8006668:	f88a 2010 	strb.w	r2, [sl, #16]
 800666c:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8006670:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8006674:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8006678:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 800667c:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8006680:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8006684:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8006688:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 800668c:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8006690:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8006694:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8006698:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 800669c:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 800669e:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 80066a2:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 80066a6:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 80066aa:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 80066ae:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 80066b2:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 80066b6:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 80066ba:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 80066be:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 80066c2:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 80066c6:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 80066ca:	f88a 201e 	strb.w	r2, [sl, #30]
 80066ce:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 80066d2:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 80066d6:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 80066da:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 80066de:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 80066e2:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 80066e4:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 80066e6:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 80066ea:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 80066ee:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 80066f2:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 80066f6:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 80066fa:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 80066fe:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8006702:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8006706:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 800670a:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 800670e:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8006712:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8006716:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 800671a:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 800671e:	9c00      	ldr	r4, [sp, #0]
 8006720:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8006724:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8006728:	9c01      	ldr	r4, [sp, #4]
 800672a:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 800672e:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8006732:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8006736:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 800673a:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 800673e:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8006742:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8006746:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 800674a:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 800674e:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8006752:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8006756:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 800675a:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 800675e:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8006760:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8006762:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8006766:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 800676a:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 800676e:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8006772:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8006776:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800677a:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 800677e:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8006782:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8006786:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 800678a:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 800678e:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8006792:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8006796:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 800679a:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 800679e:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 80067a0:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 80067a4:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 80067a8:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 80067ac:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 80067ae:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 80067b2:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 80067b4:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 80067b6:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 80067ba:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 80067be:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 80067c2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80067c6:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80067ca:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80067ce:	e9c9 4506 	strd	r4, r5, [r9, #24]
 80067d2:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80067d6:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 80067da:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 80067de:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 80067e2:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80067e6:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 80067ea:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 80067ee:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 80067f2:	e9c9 6708 	strd	r6, r7, [r9, #32]
 80067f6:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 80067fa:	f8da 7000 	ldr.w	r7, [sl]
 80067fe:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8006802:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006806:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800680a:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 800680e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8006810:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8006812:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8006814:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8006816:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8006818:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 800681a:	9940      	ldr	r1, [sp, #256]	; 0x100
 800681c:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 800681e:	9941      	ldr	r1, [sp, #260]	; 0x104
 8006820:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8006822:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8006826:	9942      	ldr	r1, [sp, #264]	; 0x108
 8006828:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 800682a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 800682c:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 800682e:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8006832:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8006834:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006838:	ea4f 42f4 	mov.w	r2, r4, ror #19
 800683c:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8006840:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006844:	443a      	add	r2, r7
 8006846:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 800684a:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800684e:	ea4f 4573 	mov.w	r5, r3, ror #17
 8006852:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8006856:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800685a:	440b      	add	r3, r1
 800685c:	4422      	add	r2, r4
 800685e:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8006862:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8006866:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 800686a:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 800686e:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8006872:	4403      	add	r3, r0
 8006874:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8006878:	f10c 0c02 	add.w	ip, ip, #2
 800687c:	4414      	add	r4, r2
 800687e:	440b      	add	r3, r1
 8006880:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006884:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8006888:	f106 0608 	add.w	r6, r6, #8
 800688c:	d1d4      	bne.n	8006838 <mouseDriver_sendMsg.constprop.0+0xf68>
 800688e:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8006892:	ea4f 4271 	mov.w	r2, r1, ror #17
 8006896:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800689a:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800689e:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80068a2:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 80068a6:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80068aa:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 80068ae:	4408      	add	r0, r1
 80068b0:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80068b4:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80068b8:	ea4f 15f6 	mov.w	r5, r6, ror #7
 80068bc:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80068c0:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 80068c4:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80068c6:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80068ca:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 80068ce:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 80068d2:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 80068d6:	4410      	add	r0, r2
 80068d8:	440b      	add	r3, r1
 80068da:	4473      	add	r3, lr
 80068dc:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80068de:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 80068e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e4:	9300      	str	r3, [sp, #0]
    BB = B;
 80068e6:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 80068ea:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 80068ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 80068ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 80068f0:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 80068f4:	2600      	movs	r6, #0
 80068f6:	e005      	b.n	8006904 <mouseDriver_sendMsg.constprop.0+0x1034>
 80068f8:	4667      	mov	r7, ip
 80068fa:	46c6      	mov	lr, r8
 80068fc:	46ac      	mov	ip, r5
 80068fe:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8006900:	4615      	mov	r5, r2
	EE = DD + T1;
 8006902:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006904:	ea2e 0004 	bic.w	r0, lr, r4
 8006908:	ea04 0208 	and.w	r2, r4, r8
 800690c:	4042      	eors	r2, r0
 800690e:	482f      	ldr	r0, [pc, #188]	; (80069cc <mouseDriver_sendMsg.constprop.0+0x10fc>)
 8006910:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8006914:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8006918:	9001      	str	r0, [sp, #4]
 800691a:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800691e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8006922:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8006926:	440a      	add	r2, r1
 8006928:	4402      	add	r2, r0
 800692a:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800692c:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006930:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006932:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006936:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006938:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006940:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8006944:	ea0b 0b05 	and.w	fp, fp, r5
 8006948:	ea8b 0b00 	eor.w	fp, fp, r0
 800694c:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8006950:	3601      	adds	r6, #1
	EE = DD + T1;
 8006952:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006954:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8006956:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8006958:	4618      	mov	r0, r3
	AA = T1 + T2;
 800695a:	440a      	add	r2, r1
 800695c:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 800695e:	d1cb      	bne.n	80068f8 <mouseDriver_sendMsg.constprop.0+0x1028>
 8006960:	4611      	mov	r1, r2
 8006962:	4602      	mov	r2, r0
    D += DD;
 8006964:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8006966:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8006968:	4438      	add	r0, r7
 800696a:	4607      	mov	r7, r0
    E += EE;
 800696c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800696e:	4410      	add	r0, r2
 8006970:	4602      	mov	r2, r0
    F += FF;
 8006972:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8006974:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8006976:	440b      	add	r3, r1
    F += FF;
 8006978:	4404      	add	r4, r0
    A += AA;
 800697a:	4619      	mov	r1, r3
    G += GG;
 800697c:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 800697e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8006980:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8006982:	442b      	add	r3, r5
    G += GG;
 8006984:	4440      	add	r0, r8
    B += BB;
 8006986:	461d      	mov	r5, r3
    G += GG;
 8006988:	4606      	mov	r6, r0
    C += CC;
 800698a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 800698c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 800698e:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8006990:	4463      	add	r3, ip
    H += HH;
 8006992:	4470      	add	r0, lr
    B += BB;
 8006994:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8006998:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 800699c:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 800699e:	2400      	movs	r4, #0
 80069a0:	e5e6      	b.n	8006570 <mouseDriver_sendMsg.constprop.0+0xca0>
    uint32_t old_sz = m->sz[0];
 80069a2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80069a4:	2238      	movs	r2, #56	; 0x38
 80069a6:	18a2      	adds	r2, r4, r2
 80069a8:	bf28      	it	cs
 80069aa:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 80069ac:	923a      	str	r2, [sp, #232]	; 0xe8
    if (m->sz[0] < old_sz)
 80069ae:	b113      	cbz	r3, 80069b6 <mouseDriver_sendMsg.constprop.0+0x10e6>
	++m->sz[1];
 80069b0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80069b2:	3301      	adds	r3, #1
 80069b4:	933b      	str	r3, [sp, #236]	; 0xec
    const unsigned char *p = (const unsigned char *)v;
 80069b6:	f20d 336a 	addw	r3, sp, #874	; 0x36a
 80069ba:	9307      	str	r3, [sp, #28]
    offset = (old_sz / 8) % 64;
 80069bc:	2307      	movs	r3, #7
 80069be:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 80069c2:	9306      	str	r3, [sp, #24]
	data[i] = in[i];
 80069c4:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 80069c8:	e006      	b.n	80069d8 <mouseDriver_sendMsg.constprop.0+0x1108>
 80069ca:	bf00      	nop
 80069cc:	0800e200 	.word	0x0800e200
    while(len > 0){
 80069d0:	9b06      	ldr	r3, [sp, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8216 	beq.w	8006e04 <mouseDriver_sendMsg.constprop.0+0x1534>
 80069d8:	9d06      	ldr	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80069da:	9e07      	ldr	r6, [sp, #28]
	uint32_t l = 64 - offset;
 80069dc:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	bf28      	it	cs
 80069e4:	462b      	movcs	r3, r5
	len -= l;
 80069e6:	1aed      	subs	r5, r5, r3
 80069e8:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 80069ea:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 80069ec:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80069ee:	4420      	add	r0, r4
	p += l;
 80069f0:	441d      	add	r5, r3
	offset += l;
 80069f2:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 80069f4:	461a      	mov	r2, r3
 80069f6:	4631      	mov	r1, r6
	p += l;
 80069f8:	9507      	str	r5, [sp, #28]
	memcpy(m->u.save_bytes + offset, p, l);
 80069fa:	f007 fbe2 	bl	800e1c2 <memcpy>
	if(offset == 64){
 80069fe:	2c40      	cmp	r4, #64	; 0x40
 8006a00:	d1e6      	bne.n	80069d0 <mouseDriver_sendMsg.constprop.0+0x1100>
                p2[2] = p1[1];
 8006a02:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[1] = p1[2];
 8006a06:	f89d 411a 	ldrb.w	r4, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8006a0a:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8006a0c:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 8006a10:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8006a12:	f88a 4009 	strb.w	r4, [sl, #9]
                p2[2] = p1[1];
 8006a16:	9c00      	ldr	r4, [sp, #0]
                p2[0] = p1[3];
 8006a18:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8006a1c:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8006a20:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8006a24:	f89d 8110 	ldrb.w	r8, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8006a28:	f89d e117 	ldrb.w	lr, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8006a2c:	f89d c116 	ldrb.w	ip, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8006a30:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8006a34:	f89d 6114 	ldrb.w	r6, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8006a38:	f89d 511b 	ldrb.w	r5, [sp, #283]	; 0x11b
                p2[1] = p1[2];
 8006a3c:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8006a40:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[2] = p1[1];
 8006a44:	f88a 400a 	strb.w	r4, [sl, #10]
                p2[3] = p1[0];
 8006a48:	9c01      	ldr	r4, [sp, #4]
                p2[0] = p1[3];
 8006a4a:	f88a 2000 	strb.w	r2, [sl]
                p2[1] = p1[2];
 8006a4e:	f88a 3001 	strb.w	r3, [sl, #1]
                p2[2] = p1[1];
 8006a52:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
                p2[3] = p1[0];
 8006a56:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
                p2[2] = p1[1];
 8006a5a:	f88a b002 	strb.w	fp, [sl, #2]
                p2[3] = p1[0];
 8006a5e:	f88a 8003 	strb.w	r8, [sl, #3]
                p2[0] = p1[3];
 8006a62:	f88a e004 	strb.w	lr, [sl, #4]
                p2[1] = p1[2];
 8006a66:	f88a c005 	strb.w	ip, [sl, #5]
                p2[2] = p1[1];
 8006a6a:	f88a 7006 	strb.w	r7, [sl, #6]
                p2[3] = p1[0];
 8006a6e:	f88a 6007 	strb.w	r6, [sl, #7]
                p2[0] = p1[3];
 8006a72:	f88a 5008 	strb.w	r5, [sl, #8]
                p2[3] = p1[0];
 8006a76:	f88a 400b 	strb.w	r4, [sl, #11]
                p2[0] = p1[3];
 8006a7a:	f88a 000c 	strb.w	r0, [sl, #12]
                p2[1] = p1[2];
 8006a7e:	f88a 100d 	strb.w	r1, [sl, #13]
                p2[2] = p1[1];
 8006a82:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8006a86:	f89d 412a 	ldrb.w	r4, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8006a8a:	9100      	str	r1, [sp, #0]
 8006a8c:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8006a90:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8006a94:	f89d e127 	ldrb.w	lr, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8006a98:	f89d c126 	ldrb.w	ip, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8006a9c:	f89d 7125 	ldrb.w	r7, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8006aa0:	f89d 6124 	ldrb.w	r6, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8006aa4:	f89d 512b 	ldrb.w	r5, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8006aa8:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
                p2[2] = p1[1];
 8006aac:	f88a 200e 	strb.w	r2, [sl, #14]
                p2[3] = p1[0];
 8006ab0:	f88a 300f 	strb.w	r3, [sl, #15]
                p2[0] = p1[3];
 8006ab4:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[1] = p1[2];
 8006ab8:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8006abc:	f88a 4019 	strb.w	r4, [sl, #25]
                p2[2] = p1[1];
 8006ac0:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8006ac2:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
                p2[3] = p1[0];
 8006ac6:	9001      	str	r0, [sp, #4]
                p2[0] = p1[3];
 8006ac8:	f88a 2010 	strb.w	r2, [sl, #16]
 8006acc:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[2] = p1[1];
 8006ad0:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[1] = p1[2];
 8006ad4:	f88a 3011 	strb.w	r3, [sl, #17]
                p2[2] = p1[1];
 8006ad8:	f88a b012 	strb.w	fp, [sl, #18]
                p2[3] = p1[0];
 8006adc:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
 8006ae0:	f88a 8013 	strb.w	r8, [sl, #19]
                p2[0] = p1[3];
 8006ae4:	f88a e014 	strb.w	lr, [sl, #20]
                p2[1] = p1[2];
 8006ae8:	f88a c015 	strb.w	ip, [sl, #21]
                p2[2] = p1[1];
 8006aec:	f88a 7016 	strb.w	r7, [sl, #22]
                p2[3] = p1[0];
 8006af0:	f88a 6017 	strb.w	r6, [sl, #23]
                p2[0] = p1[3];
 8006af4:	f88a 5018 	strb.w	r5, [sl, #24]
                p2[2] = p1[1];
 8006af8:	f88a 401a 	strb.w	r4, [sl, #26]
                p2[3] = p1[0];
 8006afc:	9c01      	ldr	r4, [sp, #4]
                p2[2] = p1[1];
 8006afe:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8006b02:	f89d 8130 	ldrb.w	r8, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8006b06:	f89d e137 	ldrb.w	lr, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8006b0a:	f89d c136 	ldrb.w	ip, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8006b0e:	f89d 7135 	ldrb.w	r7, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8006b12:	f89d 6134 	ldrb.w	r6, [sp, #308]	; 0x134
 8006b16:	f88a 401b 	strb.w	r4, [sl, #27]
                p2[0] = p1[3];
 8006b1a:	f88a 001c 	strb.w	r0, [sl, #28]
                p2[1] = p1[2];
 8006b1e:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
                p2[3] = p1[0];
 8006b22:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8006b26:	f88a 101d 	strb.w	r1, [sl, #29]
                p2[2] = p1[1];
 8006b2a:	f88a 201e 	strb.w	r2, [sl, #30]
 8006b2e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[0] = p1[3];
 8006b32:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[3] = p1[0];
 8006b36:	f88a 301f 	strb.w	r3, [sl, #31]
                p2[0] = p1[3];
 8006b3a:	f89d 513b 	ldrb.w	r5, [sp, #315]	; 0x13b
                p2[1] = p1[2];
 8006b3e:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[2] = p1[1];
 8006b42:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8006b44:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8006b46:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[0] = p1[3];
 8006b4a:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
 8006b4e:	f88a 2020 	strb.w	r2, [sl, #32]
                p2[1] = p1[2];
 8006b52:	f88a 3021 	strb.w	r3, [sl, #33]	; 0x21
                p2[2] = p1[1];
 8006b56:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8006b5a:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8006b5e:	f88a b022 	strb.w	fp, [sl, #34]	; 0x22
                p2[3] = p1[0];
 8006b62:	f88a 8023 	strb.w	r8, [sl, #35]	; 0x23
                p2[0] = p1[3];
 8006b66:	f88a e024 	strb.w	lr, [sl, #36]	; 0x24
                p2[1] = p1[2];
 8006b6a:	f88a c025 	strb.w	ip, [sl, #37]	; 0x25
                p2[2] = p1[1];
 8006b6e:	f88a 7026 	strb.w	r7, [sl, #38]	; 0x26
                p2[3] = p1[0];
 8006b72:	f88a 6027 	strb.w	r6, [sl, #39]	; 0x27
                p2[0] = p1[3];
 8006b76:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
                p2[1] = p1[2];
 8006b7a:	f88a 4029 	strb.w	r4, [sl, #41]	; 0x29
                p2[2] = p1[1];
 8006b7e:	9c00      	ldr	r4, [sp, #0]
 8006b80:	f88a 402a 	strb.w	r4, [sl, #42]	; 0x2a
                p2[0] = p1[3];
 8006b84:	f88a 002c 	strb.w	r0, [sl, #44]	; 0x2c
                p2[3] = p1[0];
 8006b88:	9c01      	ldr	r4, [sp, #4]
 8006b8a:	f89d 0148 	ldrb.w	r0, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8006b8e:	f88a 102d 	strb.w	r1, [sl, #45]	; 0x2d
                p2[2] = p1[1];
 8006b92:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
 8006b96:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[0] = p1[3];
 8006b9a:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[3] = p1[0];
 8006b9e:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
                p2[1] = p1[2];
 8006ba2:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[3] = p1[0];
 8006ba6:	f88a 402b 	strb.w	r4, [sl, #43]	; 0x2b
                p2[2] = p1[1];
 8006baa:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[1] = p1[2];
 8006bae:	f89d 414a 	ldrb.w	r4, [sp, #330]	; 0x14a
                p2[3] = p1[0];
 8006bb2:	f89d 8140 	ldrb.w	r8, [sp, #320]	; 0x140
                p2[0] = p1[3];
 8006bb6:	f89d e147 	ldrb.w	lr, [sp, #327]	; 0x147
                p2[1] = p1[2];
 8006bba:	f89d c146 	ldrb.w	ip, [sp, #326]	; 0x146
                p2[2] = p1[1];
 8006bbe:	9100      	str	r1, [sp, #0]
                p2[3] = p1[0];
 8006bc0:	9001      	str	r0, [sp, #4]
                p2[1] = p1[2];
 8006bc2:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[0] = p1[3];
 8006bc6:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
 8006bca:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
                p2[1] = p1[2];
 8006bce:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
                p2[2] = p1[1];
 8006bd2:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8006bd6:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 8006bda:	f89d 7145 	ldrb.w	r7, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8006bde:	f89d 6144 	ldrb.w	r6, [sp, #324]	; 0x144
                p2[0] = p1[3];
 8006be2:	f89d 514b 	ldrb.w	r5, [sp, #331]	; 0x14b
                p2[2] = p1[1];
 8006be6:	f88a b032 	strb.w	fp, [sl, #50]	; 0x32
                p2[3] = p1[0];
 8006bea:	f88a 8033 	strb.w	r8, [sl, #51]	; 0x33
                p2[0] = p1[3];
 8006bee:	f88a e034 	strb.w	lr, [sl, #52]	; 0x34
                p2[1] = p1[2];
 8006bf2:	f88a c035 	strb.w	ip, [sl, #53]	; 0x35
 8006bf6:	f88a 4039 	strb.w	r4, [sl, #57]	; 0x39
                p2[0] = p1[3];
 8006bfa:	f88a 003c 	strb.w	r0, [sl, #60]	; 0x3c
                p2[2] = p1[1];
 8006bfe:	9c00      	ldr	r4, [sp, #0]
                p2[1] = p1[2];
 8006c00:	f88a 103d 	strb.w	r1, [sl, #61]	; 0x3d
                p2[2] = p1[1];
 8006c04:	f88a 203e 	strb.w	r2, [sl, #62]	; 0x3e
                p2[3] = p1[0];
 8006c08:	f88a 303f 	strb.w	r3, [sl, #63]	; 0x3f
    AA = A;
 8006c0c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                p2[2] = p1[1];
 8006c0e:	f88a 403a 	strb.w	r4, [sl, #58]	; 0x3a
    AA = A;
 8006c12:	9308      	str	r3, [sp, #32]
                p2[3] = p1[0];
 8006c14:	9c01      	ldr	r4, [sp, #4]
	data[i] = in[i];
 8006c16:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
                p2[0] = p1[3];
 8006c1a:	f88a 5038 	strb.w	r5, [sl, #56]	; 0x38
                p2[3] = p1[0];
 8006c1e:	f88a 403b 	strb.w	r4, [sl, #59]	; 0x3b
	data[i] = in[i];
 8006c22:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8006c26:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8006c2a:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8006c2e:	e9c9 4506 	strd	r4, r5, [r9, #24]
 8006c32:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8006c36:	e9da 340a 	ldrd	r3, r4, [sl, #40]	; 0x28
                p2[2] = p1[1];
 8006c3a:	f88a 7036 	strb.w	r7, [sl, #54]	; 0x36
                p2[3] = p1[0];
 8006c3e:	f88a 6037 	strb.w	r6, [sl, #55]	; 0x37
	data[i] = in[i];
 8006c42:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8006c46:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 8006c4a:	e9c9 340a 	strd	r3, r4, [r9, #40]	; 0x28
 8006c4e:	e9da 340c 	ldrd	r3, r4, [sl, #48]	; 0x30
 8006c52:	e9c9 6708 	strd	r6, r7, [r9, #32]
 8006c56:	e9c9 340c 	strd	r3, r4, [r9, #48]	; 0x30
 8006c5a:	f8da 7000 	ldr.w	r7, [sl]
 8006c5e:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8006c62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006c66:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8006c6a:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 8006c6e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8006c70:	9109      	str	r1, [sp, #36]	; 0x24
    CC = C;
 8006c72:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8006c74:	910a      	str	r1, [sp, #40]	; 0x28
    DD = D;
 8006c76:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8006c78:	910b      	str	r1, [sp, #44]	; 0x2c
    EE = E;
 8006c7a:	9940      	ldr	r1, [sp, #256]	; 0x100
 8006c7c:	910c      	str	r1, [sp, #48]	; 0x30
    FF = F;
 8006c7e:	9941      	ldr	r1, [sp, #260]	; 0x104
 8006c80:	910d      	str	r1, [sp, #52]	; 0x34
	data[i] = in[i];
 8006c82:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 8006c86:	9942      	ldr	r1, [sp, #264]	; 0x108
 8006c88:	910e      	str	r1, [sp, #56]	; 0x38
    HH = H;
 8006c8a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8006c8c:	910f      	str	r1, [sp, #60]	; 0x3c
	data[i] = in[i];
 8006c8e:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
 8006c92:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8006c94:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006c98:	ea4f 42f4 	mov.w	r2, r4, ror #19
 8006c9c:	ea82 4274 	eor.w	r2, r2, r4, ror #17
 8006ca0:	ea82 2294 	eor.w	r2, r2, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006ca4:	443a      	add	r2, r7
 8006ca6:	e9d6 4109 	ldrd	r4, r1, [r6, #36]	; 0x24
 8006caa:	e9d6 0701 	ldrd	r0, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006cae:	ea4f 4573 	mov.w	r5, r3, ror #17
 8006cb2:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8006cb6:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006cba:	440b      	add	r3, r1
 8006cbc:	4422      	add	r2, r4
 8006cbe:	ea4f 11f7 	mov.w	r1, r7, ror #7
 8006cc2:	ea4f 44b0 	mov.w	r4, r0, ror #18
 8006cc6:	ea84 14f0 	eor.w	r4, r4, r0, ror #7
 8006cca:	ea81 41b7 	eor.w	r1, r1, r7, ror #18
 8006cce:	ea84 04d0 	eor.w	r4, r4, r0, lsr #3
 8006cd2:	4403      	add	r3, r0
 8006cd4:	ea81 01d7 	eor.w	r1, r1, r7, lsr #3
 8006cd8:	f10c 0c02 	add.w	ip, ip, #2
 8006cdc:	4414      	add	r4, r2
 8006cde:	440b      	add	r3, r1
 8006ce0:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006ce4:	e9c6 4310 	strd	r4, r3, [r6, #64]	; 0x40
 8006ce8:	f106 0608 	add.w	r6, r6, #8
 8006cec:	d1d4      	bne.n	8006c98 <mouseDriver_sendMsg.constprop.0+0x13c8>
 8006cee:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8006cf2:	ea4f 4271 	mov.w	r2, r1, ror #17
 8006cf6:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8006cfa:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006cfe:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006d02:	f8d9 00dc 	ldr.w	r0, [r9, #220]	; 0xdc
 8006d06:	f8d9 10b8 	ldr.w	r1, [r9, #184]	; 0xb8
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006d0a:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8006d0e:	4408      	add	r0, r1
 8006d10:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006d14:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8006d18:	ea4f 15f6 	mov.w	r5, r6, ror #7
 8006d1c:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 8006d20:	ea85 45b6 	eor.w	r5, r5, r6, ror #18
 8006d24:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006d26:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8006d2a:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 8006d2e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 8006d32:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8006d36:	4410      	add	r0, r2
 8006d38:	440b      	add	r3, r1
 8006d3a:	4473      	add	r3, lr
 8006d3c:	4428      	add	r0, r5
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8006d3e:	e9c9 033e 	strd	r0, r3, [r9, #248]	; 0xf8
    DD = D;
 8006d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d44:	9300      	str	r3, [sp, #0]
    BB = B;
 8006d46:	e9dd c709 	ldrd	ip, r7, [sp, #36]	; 0x24
    AA = A;
 8006d4a:	9d08      	ldr	r5, [sp, #32]
    HH = H;
 8006d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    EE = E;
 8006d4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    FF = F;
 8006d50:	e9dd 8e0d 	ldrd	r8, lr, [sp, #52]	; 0x34
    for (i = 0; i < 64; i++) {
 8006d54:	2600      	movs	r6, #0
 8006d56:	e005      	b.n	8006d64 <mouseDriver_sendMsg.constprop.0+0x1494>
 8006d58:	4667      	mov	r7, ip
 8006d5a:	46c6      	mov	lr, r8
 8006d5c:	46ac      	mov	ip, r5
 8006d5e:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8006d60:	4615      	mov	r5, r2
	EE = DD + T1;
 8006d62:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006d64:	ea2e 0004 	bic.w	r0, lr, r4
 8006d68:	ea08 0204 	and.w	r2, r8, r4
 8006d6c:	4042      	eors	r2, r0
 8006d6e:	4842      	ldr	r0, [pc, #264]	; (8006e78 <mouseDriver_sendMsg.constprop.0+0x15a8>)
 8006d70:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8006d74:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8006d7e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8006d82:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8006d86:	440a      	add	r2, r1
 8006d88:	4402      	add	r2, r0
 8006d8a:	9801      	ldr	r0, [sp, #4]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006d8c:	ea4f 3175 	mov.w	r1, r5, ror #13
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006d90:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006d92:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8006d96:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006d98:	ea07 000c 	and.w	r0, r7, ip
	EE = DD + T1;
 8006d9c:	9b00      	ldr	r3, [sp, #0]
 8006d9e:	9700      	str	r7, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006da0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8006da4:	ea0b 0b05 	and.w	fp, fp, r5
 8006da8:	ea8b 0b00 	eor.w	fp, fp, r0
 8006dac:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8006db0:	3601      	adds	r6, #1
	EE = DD + T1;
 8006db2:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006db4:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8006db6:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8006db8:	4618      	mov	r0, r3
	AA = T1 + T2;
 8006dba:	440a      	add	r2, r1
 8006dbc:	4673      	mov	r3, lr
    for (i = 0; i < 64; i++) {
 8006dbe:	d1cb      	bne.n	8006d58 <mouseDriver_sendMsg.constprop.0+0x1488>
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4602      	mov	r2, r0
    D += DD;
 8006dc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    A += AA;
 8006dc6:	9b08      	ldr	r3, [sp, #32]
    D += DD;
 8006dc8:	4438      	add	r0, r7
 8006dca:	4607      	mov	r7, r0
    E += EE;
 8006dcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006dce:	4410      	add	r0, r2
 8006dd0:	4602      	mov	r2, r0
    F += FF;
 8006dd2:	980d      	ldr	r0, [sp, #52]	; 0x34
    E += EE;
 8006dd4:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 8006dd6:	440b      	add	r3, r1
    F += FF;
 8006dd8:	4420      	add	r0, r4
 8006dda:	4604      	mov	r4, r0
    A += AA;
 8006ddc:	4619      	mov	r1, r3
    G += GG;
 8006dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    B += BB;
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    F += FF;
 8006de2:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8006de4:	442b      	add	r3, r5
    G += GG;
 8006de6:	4440      	add	r0, r8
    B += BB;
 8006de8:	461d      	mov	r5, r3
    G += GG;
 8006dea:	4606      	mov	r6, r0
    C += CC;
 8006dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    H += HH;
 8006dee:	980f      	ldr	r0, [sp, #60]	; 0x3c
    G += GG;
 8006df0:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8006df2:	4463      	add	r3, ip
    H += HH;
 8006df4:	4470      	add	r0, lr
    B += BB;
 8006df6:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 8006dfa:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8006dfe:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8006e00:	2400      	movs	r4, #0
 8006e02:	e5e5      	b.n	80069d0 <mouseDriver_sendMsg.constprop.0+0x1100>
 8006e04:	461f      	mov	r7, r3
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8006e06:	4639      	mov	r1, r7
    *zeros = 0x80;
 8006e08:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8006e0a:	2247      	movs	r2, #71	; 0x47
 8006e0c:	f10d 00a1 	add.w	r0, sp, #161	; 0xa1
    unsigned offset = (m->sz[0] / 8) % 64;
 8006e10:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
    *zeros = 0x80;
 8006e12:	f88a 3000 	strb.w	r3, [sl]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8006e16:	f007 f9df 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8006e1a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
	    offset = 0;
 8006e1c:	f8cd a018 	str.w	sl, [sp, #24]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e20:	0e19      	lsrs	r1, r3, #24
    unsigned offset = (m->sz[0] / 8) % 64;
 8006e22:	f3c5 04c5 	ubfx	r4, r5, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e26:	463a      	mov	r2, r7
 8006e28:	f361 0207 	bfi	r2, r1, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8006e2c:	f1c4 0677 	rsb	r6, r4, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8006e30:	0c19      	lsrs	r1, r3, #16
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8006e32:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e36:	f361 220f 	bfi	r2, r1, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8006e3a:	0a19      	lsrs	r1, r3, #8
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e3c:	f361 4217 	bfi	r2, r1, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8006e40:	eb0a 0106 	add.w	r1, sl, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8006e44:	0a28      	lsrs	r0, r5, #8
 8006e46:	71c8      	strb	r0, [r1, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8006e48:	0c28      	lsrs	r0, r5, #16
    mavlink_sha256_update(m, zeros, dstart + 8);
 8006e4a:	f106 0709 	add.w	r7, r6, #9
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8006e4e:	7188      	strb	r0, [r1, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8006e50:	0e28      	lsrs	r0, r5, #24
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8006e52:	720d      	strb	r5, [r1, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8006e54:	7148      	strb	r0, [r1, #5]
    m->sz[0] += len * 8;
 8006e56:	00f9      	lsls	r1, r7, #3
 8006e58:	186d      	adds	r5, r5, r1
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8006e5a:	f106 0601 	add.w	r6, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e5e:	f363 621f 	bfi	r2, r3, #24, #8
	++m->sz[1];
 8006e62:	bf28      	it	cs
 8006e64:	3301      	addcs	r3, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006e66:	f84a 2006 	str.w	r2, [sl, r6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8006e6a:	9701      	str	r7, [sp, #4]
    m->sz[0] += len * 8;
 8006e6c:	953a      	str	r5, [sp, #232]	; 0xe8
	++m->sz[1];
 8006e6e:	bf28      	it	cs
 8006e70:	933b      	strcs	r3, [sp, #236]	; 0xec
	data[i] = in[i];
 8006e72:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
 8006e76:	e005      	b.n	8006e84 <mouseDriver_sendMsg.constprop.0+0x15b4>
 8006e78:	0800e200 	.word	0x0800e200
    while(len > 0){
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 820a 	beq.w	8007298 <mouseDriver_sendMsg.constprop.0+0x19c8>
 8006e84:	9d01      	ldr	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8006e86:	9e06      	ldr	r6, [sp, #24]
	uint32_t l = 64 - offset;
 8006e88:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	bf28      	it	cs
 8006e90:	462b      	movcs	r3, r5
	len -= l;
 8006e92:	1aed      	subs	r5, r5, r3
 8006e94:	9501      	str	r5, [sp, #4]
	memcpy(m->u.save_bytes + offset, p, l);
 8006e96:	a844      	add	r0, sp, #272	; 0x110
	p += l;
 8006e98:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8006e9a:	4420      	add	r0, r4
	p += l;
 8006e9c:	441d      	add	r5, r3
	offset += l;
 8006e9e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4631      	mov	r1, r6
	p += l;
 8006ea4:	9506      	str	r5, [sp, #24]
	memcpy(m->u.save_bytes + offset, p, l);
 8006ea6:	f007 f98c 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8006eaa:	2c40      	cmp	r4, #64	; 0x40
 8006eac:	d1e6      	bne.n	8006e7c <mouseDriver_sendMsg.constprop.0+0x15ac>
                p2[2] = p1[1];
 8006eae:	f89d 1119 	ldrb.w	r1, [sp, #281]	; 0x119
                p2[0] = p1[3];
 8006eb2:	f89d 2113 	ldrb.w	r2, [sp, #275]	; 0x113
                p2[1] = p1[2];
 8006eb6:	f89d 511a 	ldrb.w	r5, [sp, #282]	; 0x11a
                p2[2] = p1[1];
 8006eba:	9100      	str	r1, [sp, #0]
                p2[1] = p1[2];
 8006ebc:	f89d 3112 	ldrb.w	r3, [sp, #274]	; 0x112
                p2[2] = p1[1];
 8006ec0:	f89d b111 	ldrb.w	fp, [sp, #273]	; 0x111
                p2[3] = p1[0];
 8006ec4:	f89d a110 	ldrb.w	sl, [sp, #272]	; 0x110
                p2[0] = p1[3];
 8006ec8:	f89d 8117 	ldrb.w	r8, [sp, #279]	; 0x117
                p2[1] = p1[2];
 8006ecc:	f89d e116 	ldrb.w	lr, [sp, #278]	; 0x116
                p2[2] = p1[1];
 8006ed0:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
                p2[3] = p1[0];
 8006ed4:	f89d 7114 	ldrb.w	r7, [sp, #276]	; 0x114
                p2[0] = p1[3];
 8006ed8:	f89d 611b 	ldrb.w	r6, [sp, #283]	; 0x11b
                p2[3] = p1[0];
 8006edc:	f89d 4118 	ldrb.w	r4, [sp, #280]	; 0x118
                p2[0] = p1[3];
 8006ee0:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
                p2[1] = p1[2];
 8006ee4:	f89d 111e 	ldrb.w	r1, [sp, #286]	; 0x11e
                p2[0] = p1[3];
 8006ee8:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
                p2[1] = p1[2];
 8006eec:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
                p2[2] = p1[1];
 8006ef0:	f89d 211d 	ldrb.w	r2, [sp, #285]	; 0x11d
 8006ef4:	9d00      	ldr	r5, [sp, #0]
                p2[1] = p1[2];
 8006ef6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
                p2[2] = p1[1];
 8006efa:	f88d b062 	strb.w	fp, [sp, #98]	; 0x62
                p2[3] = p1[0];
 8006efe:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 8006f02:	f88d a063 	strb.w	sl, [sp, #99]	; 0x63
                p2[0] = p1[3];
 8006f06:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
                p2[1] = p1[2];
 8006f0a:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
                p2[2] = p1[1];
 8006f0e:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
                p2[3] = p1[0];
 8006f12:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
                p2[0] = p1[3];
 8006f16:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
                p2[2] = p1[1];
 8006f1a:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
                p2[3] = p1[0];
 8006f1e:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
                p2[0] = p1[3];
 8006f22:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
                p2[1] = p1[2];
 8006f26:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
                p2[2] = p1[1];
 8006f2a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8006f2e:	f89d 1129 	ldrb.w	r1, [sp, #297]	; 0x129
                p2[1] = p1[2];
 8006f32:	f89d 512a 	ldrb.w	r5, [sp, #298]	; 0x12a
                p2[2] = p1[1];
 8006f36:	9100      	str	r1, [sp, #0]
                p2[0] = p1[3];
 8006f38:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
                p2[2] = p1[1];
 8006f3c:	f89d b121 	ldrb.w	fp, [sp, #289]	; 0x121
                p2[3] = p1[0];
 8006f40:	f89d a120 	ldrb.w	sl, [sp, #288]	; 0x120
                p2[0] = p1[3];
 8006f44:	f89d 8127 	ldrb.w	r8, [sp, #295]	; 0x127
                p2[1] = p1[2];
 8006f48:	f89d e126 	ldrb.w	lr, [sp, #294]	; 0x126
                p2[2] = p1[1];
 8006f4c:	f89d c125 	ldrb.w	ip, [sp, #293]	; 0x125
                p2[3] = p1[0];
 8006f50:	f89d 7124 	ldrb.w	r7, [sp, #292]	; 0x124
                p2[0] = p1[3];
 8006f54:	f89d 612b 	ldrb.w	r6, [sp, #299]	; 0x12b
                p2[3] = p1[0];
 8006f58:	f89d 4128 	ldrb.w	r4, [sp, #296]	; 0x128
                p2[0] = p1[3];
 8006f5c:	f89d 012f 	ldrb.w	r0, [sp, #303]	; 0x12f
                p2[3] = p1[0];
 8006f60:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
                p2[1] = p1[2];
 8006f64:	f89d 112e 	ldrb.w	r1, [sp, #302]	; 0x12e
 8006f68:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8006f6c:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
                p2[2] = p1[1];
 8006f70:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8006f72:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
                p2[1] = p1[2];
 8006f76:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
                p2[2] = p1[1];
 8006f7a:	f89d 212d 	ldrb.w	r2, [sp, #301]	; 0x12d
                p2[3] = p1[0];
 8006f7e:	f89d 312c 	ldrb.w	r3, [sp, #300]	; 0x12c
                p2[2] = p1[1];
 8006f82:	f88d b072 	strb.w	fp, [sp, #114]	; 0x72
                p2[3] = p1[0];
 8006f86:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
                p2[0] = p1[3];
 8006f8a:	f88d 8074 	strb.w	r8, [sp, #116]	; 0x74
                p2[1] = p1[2];
 8006f8e:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
                p2[2] = p1[1];
 8006f92:	f88d c076 	strb.w	ip, [sp, #118]	; 0x76
                p2[3] = p1[0];
 8006f96:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
                p2[0] = p1[3];
 8006f9a:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
                p2[2] = p1[1];
 8006f9e:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
                p2[3] = p1[0];
 8006fa2:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
                p2[0] = p1[3];
 8006fa6:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
                p2[1] = p1[2];
 8006faa:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
                p2[2] = p1[1];
 8006fae:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
                p2[1] = p1[2];
 8006fb2:	f89d 513a 	ldrb.w	r5, [sp, #314]	; 0x13a
                p2[2] = p1[1];
 8006fb6:	9100      	str	r1, [sp, #0]
 8006fb8:	f89d b131 	ldrb.w	fp, [sp, #305]	; 0x131
                p2[3] = p1[0];
 8006fbc:	f89d a130 	ldrb.w	sl, [sp, #304]	; 0x130
                p2[0] = p1[3];
 8006fc0:	f89d 8137 	ldrb.w	r8, [sp, #311]	; 0x137
                p2[1] = p1[2];
 8006fc4:	f89d e136 	ldrb.w	lr, [sp, #310]	; 0x136
                p2[2] = p1[1];
 8006fc8:	f89d c135 	ldrb.w	ip, [sp, #309]	; 0x135
                p2[3] = p1[0];
 8006fcc:	f89d 7134 	ldrb.w	r7, [sp, #308]	; 0x134
                p2[0] = p1[3];
 8006fd0:	f89d 613b 	ldrb.w	r6, [sp, #315]	; 0x13b
                p2[3] = p1[0];
 8006fd4:	f89d 4138 	ldrb.w	r4, [sp, #312]	; 0x138
                p2[1] = p1[2];
 8006fd8:	f89d 113e 	ldrb.w	r1, [sp, #318]	; 0x13e
                p2[2] = p1[1];
 8006fdc:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
                p2[3] = p1[0];
 8006fe0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
                p2[0] = p1[3];
 8006fe4:	f89d 2133 	ldrb.w	r2, [sp, #307]	; 0x133
                p2[1] = p1[2];
 8006fe8:	f89d 3132 	ldrb.w	r3, [sp, #306]	; 0x132
                p2[0] = p1[3];
 8006fec:	f89d 013f 	ldrb.w	r0, [sp, #319]	; 0x13f
                p2[1] = p1[2];
 8006ff0:	f88d 5089 	strb.w	r5, [sp, #137]	; 0x89
                p2[2] = p1[1];
 8006ff4:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 8006ff6:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
                p2[1] = p1[2];
 8006ffa:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
                p2[2] = p1[1];
 8006ffe:	f89d 213d 	ldrb.w	r2, [sp, #317]	; 0x13d
                p2[3] = p1[0];
 8007002:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
                p2[2] = p1[1];
 8007006:	f88d b082 	strb.w	fp, [sp, #130]	; 0x82
                p2[3] = p1[0];
 800700a:	f88d a083 	strb.w	sl, [sp, #131]	; 0x83
                p2[0] = p1[3];
 800700e:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
                p2[1] = p1[2];
 8007012:	f88d e085 	strb.w	lr, [sp, #133]	; 0x85
                p2[2] = p1[1];
 8007016:	f88d c086 	strb.w	ip, [sp, #134]	; 0x86
                p2[3] = p1[0];
 800701a:	f88d 7087 	strb.w	r7, [sp, #135]	; 0x87
                p2[0] = p1[3];
 800701e:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
                p2[2] = p1[1];
 8007022:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
                p2[3] = p1[0];
 8007026:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
                p2[0] = p1[3];
 800702a:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                p2[1] = p1[2];
 800702e:	f88d 108d 	strb.w	r1, [sp, #141]	; 0x8d
                p2[2] = p1[1];
 8007032:	f89d 1149 	ldrb.w	r1, [sp, #329]	; 0x149
                p2[1] = p1[2];
 8007036:	f89d 514a 	ldrb.w	r5, [sp, #330]	; 0x14a
                p2[2] = p1[1];
 800703a:	9100      	str	r1, [sp, #0]
 800703c:	f89d b141 	ldrb.w	fp, [sp, #321]	; 0x141
                p2[3] = p1[0];
 8007040:	f89d a140 	ldrb.w	sl, [sp, #320]	; 0x140
                p2[2] = p1[1];
 8007044:	f89d c145 	ldrb.w	ip, [sp, #325]	; 0x145
                p2[3] = p1[0];
 8007048:	f89d 7144 	ldrb.w	r7, [sp, #324]	; 0x144
                p2[0] = p1[3];
 800704c:	f89d 614b 	ldrb.w	r6, [sp, #331]	; 0x14b
 8007050:	f89d 014f 	ldrb.w	r0, [sp, #335]	; 0x14f
                p2[1] = p1[2];
 8007054:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
                p2[2] = p1[1];
 8007058:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
                p2[3] = p1[0];
 800705c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                p2[0] = p1[3];
 8007060:	f89d 2143 	ldrb.w	r2, [sp, #323]	; 0x143
                p2[1] = p1[2];
 8007064:	f89d 3142 	ldrb.w	r3, [sp, #322]	; 0x142
                p2[0] = p1[3];
 8007068:	f89d 8147 	ldrb.w	r8, [sp, #327]	; 0x147
                p2[1] = p1[2];
 800706c:	f89d e146 	ldrb.w	lr, [sp, #326]	; 0x146
                p2[3] = p1[0];
 8007070:	f89d 4148 	ldrb.w	r4, [sp, #328]	; 0x148
                p2[1] = p1[2];
 8007074:	f88d 5099 	strb.w	r5, [sp, #153]	; 0x99
                p2[2] = p1[1];
 8007078:	9d00      	ldr	r5, [sp, #0]
                p2[0] = p1[3];
 800707a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
                p2[1] = p1[2];
 800707e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
                p2[2] = p1[1];
 8007082:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
                p2[3] = p1[0];
 8007086:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
                p2[2] = p1[1];
 800708a:	f88d b092 	strb.w	fp, [sp, #146]	; 0x92
                p2[3] = p1[0];
 800708e:	f88d a093 	strb.w	sl, [sp, #147]	; 0x93
                p2[2] = p1[1];
 8007092:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
                p2[3] = p1[0];
 8007096:	f88d 7097 	strb.w	r7, [sp, #151]	; 0x97
                p2[0] = p1[3];
 800709a:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
                p2[2] = p1[1];
 800709e:	f88d 509a 	strb.w	r5, [sp, #154]	; 0x9a
                p2[0] = p1[3];
 80070a2:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
                p2[1] = p1[2];
 80070a6:	f88d e095 	strb.w	lr, [sp, #149]	; 0x95
                p2[3] = p1[0];
 80070aa:	f88d 409b 	strb.w	r4, [sp, #155]	; 0x9b
                p2[0] = p1[3];
 80070ae:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                p2[1] = p1[2];
 80070b2:	f88d 109d 	strb.w	r1, [sp, #157]	; 0x9d
	data[i] = in[i];
 80070b6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80070ba:	e9c9 0102 	strd	r0, r1, [r9, #8]
 80070be:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
                p2[2] = p1[1];
 80070c2:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
                p2[3] = p1[0];
 80070c6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    AA = A;
 80070ca:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80070cc:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 80070ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80070d0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80070d4:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 80070d8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80070dc:	e9c9 0104 	strd	r0, r1, [r9, #16]
    BB = B;
 80070e0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80070e2:	9108      	str	r1, [sp, #32]
	data[i] = in[i];
 80070e4:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
    CC = C;
 80070e8:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80070ea:	9109      	str	r1, [sp, #36]	; 0x24
	data[i] = in[i];
 80070ec:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    DD = D;
 80070f0:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80070f2:	910a      	str	r1, [sp, #40]	; 0x28
	data[i] = in[i];
 80070f4:	e9c9 6708 	strd	r6, r7, [r9, #32]
 80070f8:	e9c9 230c 	strd	r2, r3, [r9, #48]	; 0x30
 80070fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80070fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
    EE = E;
 8007100:	9940      	ldr	r1, [sp, #256]	; 0x100
	data[i] = in[i];
 8007102:	9826      	ldr	r0, [sp, #152]	; 0x98
 8007104:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    EE = E;
 8007108:	910b      	str	r1, [sp, #44]	; 0x2c
	data[i] = in[i];
 800710a:	e9c9 4506 	strd	r4, r5, [r9, #24]
 800710e:	e9c9 ab0a 	strd	sl, fp, [r9, #40]	; 0x28
    FF = F;
 8007112:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007114:	910c      	str	r1, [sp, #48]	; 0x30
	data[i] = in[i];
 8007116:	e9c9 7200 	strd	r7, r2, [r9]
    GG = G;
 800711a:	9942      	ldr	r1, [sp, #264]	; 0x108
 800711c:	910d      	str	r1, [sp, #52]	; 0x34
    HH = H;
 800711e:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007120:	910e      	str	r1, [sp, #56]	; 0x38
	data[i] = in[i];
 8007122:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 8007126:	464e      	mov	r6, r9
    for (i = 16; i < 64; ++i)
 8007128:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800712c:	ea4f 41f0 	mov.w	r1, r0, ror #19
 8007130:	ea81 4170 	eor.w	r1, r1, r0, ror #17
 8007134:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8007138:	4438      	add	r0, r7
 800713a:	e9d6 1409 	ldrd	r1, r4, [r6, #36]	; 0x24
 800713e:	e9d6 5701 	ldrd	r5, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007142:	ea4f 4273 	mov.w	r2, r3, ror #17
 8007146:	ea82 42f3 	eor.w	r2, r2, r3, ror #19
 800714a:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800714e:	4423      	add	r3, r4
 8007150:	4401      	add	r1, r0
 8007152:	ea4f 14f7 	mov.w	r4, r7, ror #7
 8007156:	ea4f 40b5 	mov.w	r0, r5, ror #18
 800715a:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 800715e:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 8007162:	195a      	adds	r2, r3, r5
 8007164:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 8007168:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 800716c:	f10c 0c02 	add.w	ip, ip, #2
 8007170:	4408      	add	r0, r1
 8007172:	4413      	add	r3, r2
 8007174:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007178:	e9c6 0310 	strd	r0, r3, [r6, #64]	; 0x40
 800717c:	f106 0608 	add.w	r6, r6, #8
 8007180:	d1d4      	bne.n	800712c <mouseDriver_sendMsg.constprop.0+0x185c>
 8007182:	e9d9 143c 	ldrd	r1, r4, [r9, #240]	; 0xf0
 8007186:	ea4f 45f1 	mov.w	r5, r1, ror #19
 800718a:	ea85 4571 	eor.w	r5, r5, r1, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800718e:	e9d9 672f 	ldrd	r6, r7, [r9, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007192:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8007196:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 800719a:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800719e:	ea4f 4374 	mov.w	r3, r4, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 80071a2:	4408      	add	r0, r1
 80071a4:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80071a8:	ea83 43f4 	eor.w	r3, r3, r4, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 80071ac:	ea4f 42b6 	mov.w	r2, r6, ror #18
 80071b0:	ea4f 1ef7 	mov.w	lr, r7, ror #7
 80071b4:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 80071b8:	1871      	adds	r1, r6, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80071ba:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80071be:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
 80071c2:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 80071c6:	4428      	add	r0, r5
 80071c8:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 80071cc:	440b      	add	r3, r1
 80071ce:	4473      	add	r3, lr
 80071d0:	4402      	add	r2, r0
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80071d2:	e9c9 233e 	strd	r2, r3, [r9, #248]	; 0xf8
    CC = C;
 80071d6:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    AA = A;
 80071da:	e9dd 5c07 	ldrd	r5, ip, [sp, #28]
    FF = F;
 80071de:	e9dd 8e0c 	ldrd	r8, lr, [sp, #48]	; 0x30
    HH = H;
 80071e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    EE = E;
 80071e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    for (i = 0; i < 64; i++) {
 80071e6:	2600      	movs	r6, #0
 80071e8:	e005      	b.n	80071f6 <mouseDriver_sendMsg.constprop.0+0x1926>
 80071ea:	4667      	mov	r7, ip
 80071ec:	46c6      	mov	lr, r8
 80071ee:	46ac      	mov	ip, r5
 80071f0:	46a0      	mov	r8, r4
	AA = T1 + T2;
 80071f2:	4615      	mov	r5, r2
	EE = DD + T1;
 80071f4:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80071f6:	ea2e 0204 	bic.w	r2, lr, r4
 80071fa:	ea08 0b04 	and.w	fp, r8, r4
 80071fe:	4610      	mov	r0, r2
 8007200:	465a      	mov	r2, fp
 8007202:	4042      	eors	r2, r0
 8007204:	4845      	ldr	r0, [pc, #276]	; (800731c <mouseDriver_sendMsg.constprop.0+0x1a4c>)
 8007206:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800720a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800720e:	9000      	str	r0, [sp, #0]
 8007210:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8007214:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8007218:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 800721c:	440a      	add	r2, r1
 800721e:	4402      	add	r2, r0
 8007220:	9800      	ldr	r0, [sp, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8007222:	ea4f 3175 	mov.w	r1, r5, ror #13
 8007226:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800722a:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800722c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8007230:	ea07 000c 	and.w	r0, r7, ip
 8007234:	ea0b 0b05 	and.w	fp, fp, r5
 8007238:	ea8b 0b00 	eor.w	fp, fp, r0
 800723c:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8007240:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8007242:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8007244:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8007246:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8007248:	eb02 000a 	add.w	r0, r2, sl
 800724c:	4673      	mov	r3, lr
	AA = T1 + T2;
 800724e:	440a      	add	r2, r1
 8007250:	46ba      	mov	sl, r7
    for (i = 0; i < 64; i++) {
 8007252:	d1ca      	bne.n	80071ea <mouseDriver_sendMsg.constprop.0+0x191a>
 8007254:	4611      	mov	r1, r2
 8007256:	4602      	mov	r2, r0
    D += DD;
 8007258:	980a      	ldr	r0, [sp, #40]	; 0x28
    A += AA;
 800725a:	9b07      	ldr	r3, [sp, #28]
    D += DD;
 800725c:	4438      	add	r0, r7
 800725e:	4607      	mov	r7, r0
    E += EE;
 8007260:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007262:	4410      	add	r0, r2
 8007264:	4602      	mov	r2, r0
    F += FF;
 8007266:	980c      	ldr	r0, [sp, #48]	; 0x30
    E += EE;
 8007268:	9240      	str	r2, [sp, #256]	; 0x100
    A += AA;
 800726a:	440b      	add	r3, r1
    F += FF;
 800726c:	4420      	add	r0, r4
 800726e:	4604      	mov	r4, r0
    A += AA;
 8007270:	4619      	mov	r1, r3
    G += GG;
 8007272:	980d      	ldr	r0, [sp, #52]	; 0x34
    B += BB;
 8007274:	9b08      	ldr	r3, [sp, #32]
    F += FF;
 8007276:	9441      	str	r4, [sp, #260]	; 0x104
    B += BB;
 8007278:	442b      	add	r3, r5
    G += GG;
 800727a:	4440      	add	r0, r8
    B += BB;
 800727c:	461d      	mov	r5, r3
    G += GG;
 800727e:	4606      	mov	r6, r0
    C += CC;
 8007280:	9b09      	ldr	r3, [sp, #36]	; 0x24
    H += HH;
 8007282:	980e      	ldr	r0, [sp, #56]	; 0x38
    G += GG;
 8007284:	9642      	str	r6, [sp, #264]	; 0x108
    C += CC;
 8007286:	4463      	add	r3, ip
    H += HH;
 8007288:	4470      	add	r0, lr
    B += BB;
 800728a:	e9cd 153c 	strd	r1, r5, [sp, #240]	; 0xf0
    D += DD;
 800728e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
    H += HH;
 8007292:	9043      	str	r0, [sp, #268]	; 0x10c
	    offset = 0;
 8007294:	2400      	movs	r4, #0
 8007296:	e5f1      	b.n	8006e7c <mouseDriver_sendMsg.constprop.0+0x15ac>
    result[0] = p[3];
 8007298:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
    result[1] = p[2];
 800729c:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
    result[0] = p[3];
 80072a0:	f88d 3371 	strb.w	r3, [sp, #881]	; 0x371
    result[2] = p[1];
 80072a4:	f89d 30f1 	ldrb.w	r3, [sp, #241]	; 0xf1
    result[1] = p[2];
 80072a8:	f88d 2372 	strb.w	r2, [sp, #882]	; 0x372
    result[3] = p[0];
 80072ac:	f89d 10f0 	ldrb.w	r1, [sp, #240]	; 0xf0
    result[2] = p[1];
 80072b0:	f88d 3373 	strb.w	r3, [sp, #883]	; 0x373
    result[4] = p[7];
 80072b4:	f89d 20f7 	ldrb.w	r2, [sp, #247]	; 0xf7
    result[5] = p[6];
 80072b8:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    result[3] = p[0];
 80072bc:	f88d 1374 	strb.w	r1, [sp, #884]	; 0x374
    result[4] = p[7];
 80072c0:	f88d 2375 	strb.w	r2, [sp, #885]	; 0x375
    result[5] = p[6];
 80072c4:	f88d 3376 	strb.w	r3, [sp, #886]	; 0x376
 80072c8:	f7fe bbe5 	b.w	8005a96 <mouseDriver_sendMsg.constprop.0+0x1c6>
	while (length > 1 && payload[length-1] == 0) {
 80072cc:	f04f 0e08 	mov.w	lr, #8
 80072d0:	4675      	mov	r5, lr
 80072d2:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 80072d6:	b2b6      	uxth	r6, r6
 80072d8:	f7fe bb4d 	b.w	8005976 <mouseDriver_sendMsg.constprop.0+0xa6>
		length--;
 80072dc:	f04f 0e07 	mov.w	lr, #7
	while (length > 1 && payload[length-1] == 0) {
 80072e0:	4675      	mov	r5, lr
 80072e2:	e7f6      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
		length--;
 80072e4:	f04f 0e06 	mov.w	lr, #6
	while (length > 1 && payload[length-1] == 0) {
 80072e8:	4675      	mov	r5, lr
 80072ea:	e7f2      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
		length--;
 80072ec:	f04f 0e05 	mov.w	lr, #5
	while (length > 1 && payload[length-1] == 0) {
 80072f0:	4675      	mov	r5, lr
 80072f2:	e7ee      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
		length--;
 80072f4:	f04f 0e04 	mov.w	lr, #4
	while (length > 1 && payload[length-1] == 0) {
 80072f8:	4675      	mov	r5, lr
 80072fa:	e7ea      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
		length--;
 80072fc:	f04f 0e03 	mov.w	lr, #3
	while (length > 1 && payload[length-1] == 0) {
 8007300:	4675      	mov	r5, lr
 8007302:	e7e6      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
		length--;
 8007304:	f04f 0e02 	mov.w	lr, #2
	while (length > 1 && payload[length-1] == 0) {
 8007308:	4675      	mov	r5, lr
 800730a:	e7e2      	b.n	80072d2 <mouseDriver_sendMsg.constprop.0+0x1a02>
	if (signing) {
 800730c:	f04f 09fd 	mov.w	r9, #253	; 0xfd
 8007310:	f04f 0808 	mov.w	r8, #8
 8007314:	f04f 0c0a 	mov.w	ip, #10
 8007318:	f7fe bb52 	b.w	80059c0 <mouseDriver_sendMsg.constprop.0+0xf0>
 800731c:	0800e200 	.word	0x0800e200

08007320 <mouseDriver_sendMsg>:
void mouseDriver_sendMsg(uint32_t msgid){
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	while (main_get_huart_tx_state() == HAL_BUSY){
 800732a:	e001      	b.n	8007330 <mouseDriver_sendMsg+0x10>
		HAL_Delay(1);
 800732c:	f004 f89a 	bl	800b464 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 8007330:	f001 ffde 	bl	80092f0 <main_get_huart_tx_state>
 8007334:	2802      	cmp	r0, #2
		HAL_Delay(1);
 8007336:	f04f 0001 	mov.w	r0, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 800733a:	d0f7      	beq.n	800732c <mouseDriver_sendMsg+0xc>
	switch(msgid){
 800733c:	2c07      	cmp	r4, #7
 800733e:	f200 80dd 	bhi.w	80074fc <mouseDriver_sendMsg+0x1dc>
 8007342:	e8df f014 	tbh	[pc, r4, lsl #1]
 8007346:	0127      	.short	0x0127
 8007348:	01d70171 	.word	0x01d70171
 800734c:	02e100db 	.word	0x02e100db
 8007350:	03450235 	.word	0x03450235
 8007354:	00df      	.short	0x00df
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007356:	f640 50fe 	movw	r0, #3582	; 0xdfe
	msg->compid = component_id;
 800735a:	f04f 080d 	mov.w	r8, #13
	msg->sysid = system_id;
 800735e:	71e3      	strb	r3, [r4, #7]
	msg->compid = component_id;
 8007360:	7223      	strb	r3, [r4, #8]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007362:	9200      	str	r2, [sp, #0]
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007364:	8060      	strh	r0, [r4, #2]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007366:	4647      	mov	r7, r8
	msg->compid = component_id;
 8007368:	230c      	movs	r3, #12
 800736a:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
 800736e:	2204      	movs	r2, #4
	msg->incompat_flags = 0;
 8007370:	2000      	movs	r0, #0
 8007372:	4686      	mov	lr, r0
 8007374:	7120      	strb	r0, [r4, #4]
 8007376:	4681      	mov	r9, r0
	msg->seq = status->current_tx_seq;
 8007378:	79b0      	ldrb	r0, [r6, #6]
 800737a:	71a0      	strb	r0, [r4, #6]
	buf[0] = msg->magic;
 800737c:	f10d 0c10 	add.w	ip, sp, #16
	status->current_tx_seq = status->current_tx_seq + 1;
 8007380:	f100 0a01 	add.w	sl, r0, #1
 8007384:	f886 a006 	strb.w	sl, [r6, #6]
	msg->compat_flags = 0;
 8007388:	f04f 0a00 	mov.w	sl, #0
	buf[0] = msg->magic;
 800738c:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 8007390:	f88c 7001 	strb.w	r7, [ip, #1]
	msg->compat_flags = 0;
 8007394:	f884 a005 	strb.w	sl, [r4, #5]
	if (mavlink1) {
 8007398:	2900      	cmp	r1, #0
 800739a:	f000 87c5 	beq.w	8008328 <mouseDriver_sendMsg+0x1008>
		buf[5] = msg->msgid & 0xFF;
 800739e:	2106      	movs	r1, #6
		buf[2] = msg->seq;
 80073a0:	f88c 0002 	strb.w	r0, [ip, #2]
		buf[3] = msg->sysid;
 80073a4:	f88c a003 	strb.w	sl, [ip, #3]
		buf[4] = msg->compid;
 80073a8:	f88c a004 	strb.w	sl, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 80073ac:	f88c 1005 	strb.w	r1, [ip, #5]
 80073b0:	3202      	adds	r2, #2
 80073b2:	4462      	add	r2, ip
        *crcAccum = X25_INIT_CRC;
 80073b4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80073b8:	f10d 0911 	add.w	r9, sp, #17
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80073bc:	f819 1b01 	ldrb.w	r1, [r9], #1
 80073c0:	4079      	eors	r1, r7
        tmp ^= (tmp<<4);
 80073c2:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 80073c6:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80073c8:	0908      	lsrs	r0, r1, #4
 80073ca:	ea80 2017 	eor.w	r0, r0, r7, lsr #8
 80073ce:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 80073d2:	4591      	cmp	r9, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80073d4:	ea80 07c1 	eor.w	r7, r0, r1, lsl #3
	while (length--) {
 80073d8:	d1f0      	bne.n	80073bc <mouseDriver_sendMsg+0x9c>
 80073da:	330d      	adds	r3, #13
 80073dc:	4423      	add	r3, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 80073de:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80073e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e4:	407a      	eors	r2, r7
        tmp ^= (tmp<<4);
 80073e6:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80073ea:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80073ec:	0911      	lsrs	r1, r2, #4
 80073ee:	ea81 2117 	eor.w	r1, r1, r7, lsr #8
 80073f2:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80073f6:	ea81 02c2 	eor.w	r2, r1, r2, lsl #3
 80073fa:	b212      	sxth	r2, r2
	while (length--) {
 80073fc:	4298      	cmp	r0, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80073fe:	b297      	uxth	r7, r2
	while (length--) {
 8007400:	d1ee      	bne.n	80073e0 <mouseDriver_sendMsg+0xc0>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007402:	f082 024b 	eor.w	r2, r2, #75	; 0x4b
        tmp ^= (tmp<<4);
 8007406:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800740a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800740c:	0911      	lsrs	r1, r2, #4
 800740e:	ea81 2117 	eor.w	r1, r1, r7, lsr #8
 8007412:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007416:	ea81 01c2 	eor.w	r1, r1, r2, lsl #3
 800741a:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800741c:	f805 1008 	strb.w	r1, [r5, r8]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8007420:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 8007424:	b289      	uxth	r1, r1
 8007426:	78e3      	ldrb	r3, [r4, #3]
 8007428:	ea4f 2911 	mov.w	r9, r1, lsr #8
 800742c:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 8007430:	8021      	strh	r1, [r4, #0]
	if (signing) {
 8007432:	f1be 0f00 	cmp.w	lr, #0
 8007436:	f041 838d 	bne.w	8008b54 <mouseDriver_sendMsg+0x1834>
 800743a:	78e7      	ldrb	r7, [r4, #3]
 800743c:	463e      	mov	r6, r7
 800743e:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8007440:	78a2      	ldrb	r2, [r4, #2]
 8007442:	f894 e006 	ldrb.w	lr, [r4, #6]
 8007446:	f894 c007 	ldrb.w	ip, [r4, #7]
 800744a:	7a23      	ldrb	r3, [r4, #8]
 800744c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8007450:	b2c9      	uxtb	r1, r1
 8007452:	2afe      	cmp	r2, #254	; 0xfe
 8007454:	9100      	str	r1, [sp, #0]
 8007456:	fa5f fb80 	uxtb.w	fp, r0
 800745a:	f000 8348 	beq.w	8007aee <mouseDriver_sendMsg+0x7ce>
	while (length > 1 && payload[length-1] == 0) {
 800745e:	2f01      	cmp	r7, #1
 8007460:	d914      	bls.n	800748c <mouseDriver_sendMsg+0x16c>
 8007462:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 8007466:	5dc9      	ldrb	r1, [r1, r7]
 8007468:	b981      	cbnz	r1, 800748c <mouseDriver_sendMsg+0x16c>
 800746a:	1e7e      	subs	r6, r7, #1
 800746c:	b2f6      	uxtb	r6, r6
 800746e:	f106 010c 	add.w	r1, r6, #12
 8007472:	4421      	add	r1, r4
 8007474:	469a      	mov	sl, r3
 8007476:	e005      	b.n	8007484 <mouseDriver_sendMsg+0x164>
 8007478:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 800747c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007480:	b91b      	cbnz	r3, 800748a <mouseDriver_sendMsg+0x16a>
 8007482:	4646      	mov	r6, r8
		length--;
 8007484:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8007486:	2f01      	cmp	r7, #1
 8007488:	d1f6      	bne.n	8007478 <mouseDriver_sendMsg+0x158>
 800748a:	4653      	mov	r3, sl
		buf[0] = msg->magic;
 800748c:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8007798 <mouseDriver_sendMsg+0x478>
		buf[3] = msg->compat_flags;
 8007490:	f894 a005 	ldrb.w	sl, [r4, #5]
		buf[0] = msg->magic;
 8007494:	f888 2000 	strb.w	r2, [r8]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007498:	1202      	asrs	r2, r0, #8
 800749a:	9201      	str	r2, [sp, #4]
		buf[2] = msg->incompat_flags;
 800749c:	7924      	ldrb	r4, [r4, #4]
		buf[6] = msg->compid;
 800749e:	f888 3006 	strb.w	r3, [r8, #6]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80074a2:	4629      	mov	r1, r5
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80074a4:	9b01      	ldr	r3, [sp, #4]
		buf[1] = length;
 80074a6:	f888 7001 	strb.w	r7, [r8, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80074aa:	1405      	asrs	r5, r0, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80074ac:	4632      	mov	r2, r6
		buf[4] = msg->seq;
 80074ae:	f888 e004 	strb.w	lr, [r8, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80074b2:	f108 000a 	add.w	r0, r8, #10
		buf[5] = msg->sysid;
 80074b6:	f888 c005 	strb.w	ip, [r8, #5]
		buf[7] = msg->msgid & 0xFF;
 80074ba:	f888 b007 	strb.w	fp, [r8, #7]
		buf[3] = msg->compat_flags;
 80074be:	f888 a003 	strb.w	sl, [r8, #3]
		buf[2] = msg->incompat_flags;
 80074c2:	f888 4002 	strb.w	r4, [r8, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80074c6:	f888 3008 	strb.w	r3, [r8, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80074ca:	f888 5009 	strb.w	r5, [r8, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80074ce:	f006 fe78 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80074d2:	360a      	adds	r6, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80074d4:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 80074d8:	eb08 0006 	add.w	r0, r8, r6
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80074dc:	f040 82f2 	bne.w	8007ac4 <mouseDriver_sendMsg+0x7a4>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80074e0:	9b00      	ldr	r3, [sp, #0]
 80074e2:	f808 3006 	strb.w	r3, [r8, r6]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80074e6:	460c      	mov	r4, r1
 80074e8:	f880 9001 	strb.w	r9, [r0, #1]
 80074ec:	2109      	movs	r1, #9
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80074ee:	4421      	add	r1, r4
 80074f0:	3103      	adds	r1, #3
 80074f2:	4439      	add	r1, r7
			main_transmit_buffer(outBuffer, msg_size);
 80074f4:	b289      	uxth	r1, r1
 80074f6:	48a8      	ldr	r0, [pc, #672]	; (8007798 <mouseDriver_sendMsg+0x478>)
 80074f8:	f001 ff02 	bl	8009300 <main_transmit_buffer>
}
 80074fc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param msg The MAVLink message to compress the data into
 * @param error C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_error_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_error_t* error)
{
    return mavlink_msg_error_pack(system_id, component_id, msg, error->time, error->error);
 8007504:	4aa5      	ldr	r2, [pc, #660]	; (800779c <mouseDriver_sendMsg+0x47c>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8007506:	4ea6      	ldr	r6, [pc, #664]	; (80077a0 <mouseDriver_sendMsg+0x480>)
 8007508:	6813      	ldr	r3, [r2, #0]
 800750a:	f892 c004 	ldrb.w	ip, [r2, #4]
    packet.time = time;
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	aa02      	add	r2, sp, #8
    packet.error = error;
 8007512:	f88d c00c 	strb.w	ip, [sp, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ERROR_LEN);
 8007516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800751a:	ad3a      	add	r5, sp, #232	; 0xe8
 800751c:	ac37      	add	r4, sp, #220	; 0xdc
 800751e:	7b37      	ldrb	r7, [r6, #12]
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
    msg->msgid = MAVLINK_MSG_ID_ERROR;
 8007526:	2107      	movs	r1, #7
 8007528:	2200      	movs	r2, #0
 800752a:	7261      	strb	r1, [r4, #9]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800752c:	f017 0102 	ands.w	r1, r7, #2
 8007530:	72a2      	strb	r2, [r4, #10]
 8007532:	72e2      	strb	r2, [r4, #11]
 8007534:	f040 8404 	bne.w	8007d40 <mouseDriver_sendMsg+0xa20>
 8007538:	6932      	ldr	r2, [r6, #16]
 800753a:	2a00      	cmp	r2, #0
 800753c:	f000 8724 	beq.w	8008388 <mouseDriver_sendMsg+0x1068>
 8007540:	7817      	ldrb	r7, [r2, #0]
		msg->magic = MAVLINK_STX;
 8007542:	22fd      	movs	r2, #253	; 0xfd
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8007544:	f007 0701 	and.w	r7, r7, #1
		msg->magic = MAVLINK_STX;
 8007548:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 800754a:	f1bc 0f00 	cmp.w	ip, #0
 800754e:	f041 84a2 	bne.w	8008e96 <mouseDriver_sendMsg+0x1b76>
 8007552:	0e1a      	lsrs	r2, r3, #24
 8007554:	f041 8499 	bne.w	8008e8a <mouseDriver_sendMsg+0x1b6a>
 8007558:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800755c:	f041 84b0 	bne.w	8008ec0 <mouseDriver_sendMsg+0x1ba0>
 8007560:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	f041 84a5 	bne.w	8008eb4 <mouseDriver_sendMsg+0x1b94>
 800756a:	f04f 0e01 	mov.w	lr, #1
		length--;
 800756e:	46f2      	mov	sl, lr
	msg->sysid = system_id;
 8007570:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007572:	f884 a003 	strb.w	sl, [r4, #3]
	msg->sysid = system_id;
 8007576:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 8007578:	7222      	strb	r2, [r4, #8]
	if (signing) {
 800757a:	2f00      	cmp	r7, #0
 800757c:	f001 8539 	beq.w	8008ff2 <mouseDriver_sendMsg+0x1cd2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8007580:	220a      	movs	r2, #10
 8007582:	f04f 0801 	mov.w	r8, #1
 8007586:	9200      	str	r2, [sp, #0]
 8007588:	f884 8004 	strb.w	r8, [r4, #4]
 800758c:	2208      	movs	r2, #8
 800758e:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8007592:	e3e7      	b.n	8007d64 <mouseDriver_sendMsg+0xa44>
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 8007594:	4b83      	ldr	r3, [pc, #524]	; (80077a4 <mouseDriver_sendMsg+0x484>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8007596:	4e82      	ldr	r6, [pc, #520]	; (80077a0 <mouseDriver_sendMsg+0x480>)
 8007598:	f893 8000 	ldrb.w	r8, [r3]
	return (HAL_GetTick());
 800759c:	f003 ff5c 	bl	800b458 <HAL_GetTick>
    packet.time = time;
 80075a0:	aa02      	add	r2, sp, #8
    packet.mode = mode;
 80075a2:	f88d 800c 	strb.w	r8, [sp, #12]
    packet.time = time;
 80075a6:	9002      	str	r0, [sp, #8]
 80075a8:	4603      	mov	r3, r0
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80075aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075ae:	ad3a      	add	r5, sp, #232	; 0xe8
 80075b0:	7b32      	ldrb	r2, [r6, #12]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	ac37      	add	r4, sp, #220	; 0xdc
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80075b6:	2000      	movs	r0, #0
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80075b8:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80075bc:	f012 0102 	ands.w	r1, r2, #2
    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80075c0:	7260      	strb	r0, [r4, #9]
 80075c2:	72a0      	strb	r0, [r4, #10]
 80075c4:	72e0      	strb	r0, [r4, #11]
 80075c6:	f040 8472 	bne.w	8007eae <mouseDriver_sendMsg+0xb8e>
 80075ca:	6932      	ldr	r2, [r6, #16]
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	f000 86c1 	beq.w	8008354 <mouseDriver_sendMsg+0x1034>
 80075d2:	7817      	ldrb	r7, [r2, #0]
		msg->magic = MAVLINK_STX;
 80075d4:	22fd      	movs	r2, #253	; 0xfd
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80075d6:	f007 0701 	and.w	r7, r7, #1
		msg->magic = MAVLINK_STX;
 80075da:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 80075dc:	f1b8 0f00 	cmp.w	r8, #0
 80075e0:	f041 8444 	bne.w	8008e6c <mouseDriver_sendMsg+0x1b4c>
 80075e4:	0e1a      	lsrs	r2, r3, #24
 80075e6:	f041 843b 	bne.w	8008e60 <mouseDriver_sendMsg+0x1b40>
 80075ea:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80075ee:	f041 8487 	bne.w	8008f00 <mouseDriver_sendMsg+0x1be0>
 80075f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f041 847c 	bne.w	8008ef4 <mouseDriver_sendMsg+0x1bd4>
 80075fc:	f04f 0801 	mov.w	r8, #1
		length--;
 8007600:	46c2      	mov	sl, r8
	msg->sysid = system_id;
 8007602:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007604:	f884 a003 	strb.w	sl, [r4, #3]
	msg->sysid = system_id;
 8007608:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 800760a:	7222      	strb	r2, [r4, #8]
	if (signing) {
 800760c:	2f00      	cmp	r7, #0
 800760e:	f001 84f7 	beq.w	8009000 <mouseDriver_sendMsg+0x1ce0>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8007612:	220a      	movs	r2, #10
 8007614:	f04f 0901 	mov.w	r9, #1
 8007618:	9200      	str	r2, [sp, #0]
 800761a:	f884 9004 	strb.w	r9, [r4, #4]
 800761e:	2208      	movs	r2, #8
 8007620:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8007624:	f000 bc55 	b.w	8007ed2 <mouseDriver_sendMsg+0xbb2>
 8007628:	f003 ff16 	bl	800b458 <HAL_GetTick>
				actual_speed_measure.time = mouseDriver_getTime();
 800762c:	4b5e      	ldr	r3, [pc, #376]	; (80077a8 <mouseDriver_sendMsg+0x488>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800762e:	4e5c      	ldr	r6, [pc, #368]	; (80077a0 <mouseDriver_sendMsg+0x480>)
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y);
 8007630:	6859      	ldr	r1, [r3, #4]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	6018      	str	r0, [r3, #0]
    packet.speed_x = speed_x;
 8007636:	9108      	str	r1, [sp, #32]
    packet.time = time;
 8007638:	ab07      	add	r3, sp, #28
 800763a:	9007      	str	r0, [sp, #28]
    packet.speed_y = speed_y;
 800763c:	9209      	str	r2, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 800763e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007642:	7b37      	ldrb	r7, [r6, #12]
 8007644:	ac37      	add	r4, sp, #220	; 0xdc
 8007646:	ad3a      	add	r5, sp, #232	; 0xe8
 8007648:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 800764c:	2300      	movs	r3, #0
 800764e:	2201      	movs	r2, #1
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8007650:	f017 0102 	ands.w	r1, r7, #2
 8007654:	7262      	strb	r2, [r4, #9]
 8007656:	72a3      	strb	r3, [r4, #10]
 8007658:	72e3      	strb	r3, [r4, #11]
 800765a:	f040 8260 	bne.w	8007b1e <mouseDriver_sendMsg+0x7fe>
 800765e:	6933      	ldr	r3, [r6, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8674 	beq.w	800834e <mouseDriver_sendMsg+0x102e>
 8007666:	f893 e000 	ldrb.w	lr, [r3]
 800766a:	ea0e 0e02 	and.w	lr, lr, r2
	while (length > 1 && payload[length-1] == 0) {
 800766e:	7de3      	ldrb	r3, [r4, #23]
		msg->magic = MAVLINK_STX;
 8007670:	22fd      	movs	r2, #253	; 0xfd
 8007672:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8007674:	2b00      	cmp	r3, #0
 8007676:	f041 841a 	bne.w	8008eae <mouseDriver_sendMsg+0x1b8e>
 800767a:	7da3      	ldrb	r3, [r4, #22]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f041 8410 	bne.w	8008ea2 <mouseDriver_sendMsg+0x1b82>
 8007682:	7d63      	ldrb	r3, [r4, #21]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f041 8424 	bne.w	8008ed2 <mouseDriver_sendMsg+0x1bb2>
 800768a:	7d23      	ldrb	r3, [r4, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f041 841d 	bne.w	8008ecc <mouseDriver_sendMsg+0x1bac>
 8007692:	7ce3      	ldrb	r3, [r4, #19]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f041 8456 	bne.w	8008f46 <mouseDriver_sendMsg+0x1c26>
 800769a:	7ca3      	ldrb	r3, [r4, #18]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f041 844f 	bne.w	8008f40 <mouseDriver_sendMsg+0x1c20>
 80076a2:	7c63      	ldrb	r3, [r4, #17]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f041 8464 	bne.w	8008f72 <mouseDriver_sendMsg+0x1c52>
 80076aa:	7c23      	ldrb	r3, [r4, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f041 845d 	bne.w	8008f6c <mouseDriver_sendMsg+0x1c4c>
 80076b2:	7be3      	ldrb	r3, [r4, #15]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f041 8462 	bne.w	8008f7e <mouseDriver_sendMsg+0x1c5e>
 80076ba:	7ba3      	ldrb	r3, [r4, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f041 845b 	bne.w	8008f78 <mouseDriver_sendMsg+0x1c58>
 80076c2:	7b63      	ldrb	r3, [r4, #13]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f041 846c 	bne.w	8008fa2 <mouseDriver_sendMsg+0x1c82>
 80076ca:	f04f 0801 	mov.w	r8, #1
 80076ce:	4647      	mov	r7, r8
	msg->sysid = system_id;
 80076d0:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80076d2:	70e7      	strb	r7, [r4, #3]
	msg->sysid = system_id;
 80076d4:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 80076d6:	7222      	strb	r2, [r4, #8]
	if (signing) {
 80076d8:	f1be 0f00 	cmp.w	lr, #0
 80076dc:	f001 846a 	beq.w	8008fb4 <mouseDriver_sendMsg+0x1c94>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80076e0:	220a      	movs	r2, #10
 80076e2:	f04f 0901 	mov.w	r9, #1
 80076e6:	9200      	str	r2, [sp, #0]
 80076e8:	f884 9004 	strb.w	r9, [r4, #4]
 80076ec:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 80076f0:	2208      	movs	r2, #8
 80076f2:	e226      	b.n	8007b42 <mouseDriver_sendMsg+0x822>
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 80076f4:	4b2d      	ldr	r3, [pc, #180]	; (80077ac <mouseDriver_sendMsg+0x48c>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80076f6:	4e2a      	ldr	r6, [pc, #168]	; (80077a0 <mouseDriver_sendMsg+0x480>)
 80076f8:	6859      	ldr	r1, [r3, #4]
    packet.setpoint_x = setpoint_x;
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	9004      	str	r0, [sp, #16]
 80076fe:	ab04      	add	r3, sp, #16
    packet.setpoint_y = setpoint_y;
 8007700:	9105      	str	r1, [sp, #20]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8007702:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007706:	ac37      	add	r4, sp, #220	; 0xdc
 8007708:	7b32      	ldrb	r2, [r6, #12]
 800770a:	ad3a      	add	r5, sp, #232	; 0xe8
 800770c:	e885 0003 	stmia.w	r5, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8007710:	2102      	movs	r1, #2
 8007712:	2300      	movs	r3, #0
 8007714:	7261      	strb	r1, [r4, #9]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8007716:	4011      	ands	r1, r2
 8007718:	72a3      	strb	r3, [r4, #10]
 800771a:	72e3      	strb	r3, [r4, #11]
 800771c:	f040 847a 	bne.w	8008014 <mouseDriver_sendMsg+0xcf4>
 8007720:	6933      	ldr	r3, [r6, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 862d 	beq.w	8008382 <mouseDriver_sendMsg+0x1062>
 8007728:	781f      	ldrb	r7, [r3, #0]
 800772a:	f007 0701 	and.w	r7, r7, #1
	while (length > 1 && payload[length-1] == 0) {
 800772e:	7ce3      	ldrb	r3, [r4, #19]
		msg->magic = MAVLINK_STX;
 8007730:	22fd      	movs	r2, #253	; 0xfd
 8007732:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8007734:	2b00      	cmp	r3, #0
 8007736:	f041 8386 	bne.w	8008e46 <mouseDriver_sendMsg+0x1b26>
 800773a:	7ca3      	ldrb	r3, [r4, #18]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f041 837a 	bne.w	8008e36 <mouseDriver_sendMsg+0x1b16>
 8007742:	7c63      	ldrb	r3, [r4, #17]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f041 83cb 	bne.w	8008ee0 <mouseDriver_sendMsg+0x1bc0>
 800774a:	7c23      	ldrb	r3, [r4, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f041 83c3 	bne.w	8008ed8 <mouseDriver_sendMsg+0x1bb8>
 8007752:	7be3      	ldrb	r3, [r4, #15]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f041 83ef 	bne.w	8008f38 <mouseDriver_sendMsg+0x1c18>
 800775a:	7ba3      	ldrb	r3, [r4, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f041 83e7 	bne.w	8008f30 <mouseDriver_sendMsg+0x1c10>
 8007762:	7b63      	ldrb	r3, [r4, #13]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f041 83fd 	bne.w	8008f64 <mouseDriver_sendMsg+0x1c44>
 800776a:	f04f 0a01 	mov.w	sl, #1
 800776e:	46d6      	mov	lr, sl
	msg->sysid = system_id;
 8007770:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007772:	f884 e003 	strb.w	lr, [r4, #3]
	msg->sysid = system_id;
 8007776:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 8007778:	7222      	strb	r2, [r4, #8]
	if (signing) {
 800777a:	2f00      	cmp	r7, #0
 800777c:	f001 8421 	beq.w	8008fc2 <mouseDriver_sendMsg+0x1ca2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8007780:	220a      	movs	r2, #10
 8007782:	f04f 0801 	mov.w	r8, #1
 8007786:	9200      	str	r2, [sp, #0]
 8007788:	f884 8004 	strb.w	r8, [r4, #4]
 800778c:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8007790:	2208      	movs	r2, #8
 8007792:	f000 bc51 	b.w	8008038 <mouseDriver_sendMsg+0xd18>
 8007796:	bf00      	nop
 8007798:	200000b8 	.word	0x200000b8
 800779c:	20000028 	.word	0x20000028
 80077a0:	20000058 	.word	0x20000058
 80077a4:	2000002d 	.word	0x2000002d
 80077a8:	20000044 	.word	0x20000044
 80077ac:	20000050 	.word	0x20000050
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80077b0:	4ec0      	ldr	r6, [pc, #768]	; (8007ab4 <mouseDriver_sendMsg+0x794>)
			mavlink_msg_point_loaded_pack(SYS_ID,COMP_ID,&msg,actual_point);
 80077b2:	4bc1      	ldr	r3, [pc, #772]	; (8007ab8 <mouseDriver_sendMsg+0x798>)
 80077b4:	7b30      	ldrb	r0, [r6, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_POINT_LOADED_LEN);
#else
    mavlink_point_loaded_t packet;
    packet.point_id = point_id;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LOADED_LEN);
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	f88d 10e8 	strb.w	r1, [sp, #232]	; 0xe8
 80077bc:	ac37      	add	r4, sp, #220	; 0xdc
#endif

    msg->msgid = MAVLINK_MSG_ID_POINT_LOADED;
 80077be:	2300      	movs	r3, #0
 80077c0:	2205      	movs	r2, #5
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80077c2:	f010 0102 	ands.w	r1, r0, #2
 80077c6:	7262      	strb	r2, [r4, #9]
 80077c8:	72a3      	strb	r3, [r4, #10]
 80077ca:	72e3      	strb	r3, [r4, #11]
 80077cc:	f040 8588 	bne.w	80082e0 <mouseDriver_sendMsg+0xfc0>
 80077d0:	6933      	ldr	r3, [r6, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 85ef 	beq.w	80083b6 <mouseDriver_sendMsg+0x1096>
 80077d8:	781b      	ldrb	r3, [r3, #0]
	msg->sysid = system_id;
 80077da:	71e1      	strb	r1, [r4, #7]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80077dc:	f240 12fd 	movw	r2, #509	; 0x1fd
	if (signing) {
 80077e0:	07d8      	lsls	r0, r3, #31
	msg->compid = component_id;
 80077e2:	7221      	strb	r1, [r4, #8]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80077e4:	8062      	strh	r2, [r4, #2]
	if (signing) {
 80077e6:	f140 85eb 	bpl.w	80083c0 <mouseDriver_sendMsg+0x10a0>
	msg->seq = status->current_tx_seq;
 80077ea:	79b7      	ldrb	r7, [r6, #6]
 80077ec:	71a7      	strb	r7, [r4, #6]
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80077ee:	2301      	movs	r3, #1
	buf[0] = msg->magic;
 80077f0:	f10d 0c1c 	add.w	ip, sp, #28
	status->current_tx_seq = status->current_tx_seq + 1;
 80077f4:	18f9      	adds	r1, r7, r3
 80077f6:	71b1      	strb	r1, [r6, #6]
	buf[0] = msg->magic;
 80077f8:	4618      	mov	r0, r3
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80077fa:	80a3      	strh	r3, [r4, #4]
	buf[0] = msg->magic;
 80077fc:	4619      	mov	r1, r3
 80077fe:	f8ac 2000 	strh.w	r2, [ip]
 8007802:	2508      	movs	r5, #8
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8007804:	f04f 0e0a 	mov.w	lr, #10
		buf[3] = msg->compat_flags;
 8007808:	2300      	movs	r3, #0
		buf[7] = msg->msgid & 0xFF;
 800780a:	2205      	movs	r2, #5
		buf[2] = msg->incompat_flags;
 800780c:	f88c 1002 	strb.w	r1, [ip, #2]
		buf[4] = msg->seq;
 8007810:	f88c 7004 	strb.w	r7, [ip, #4]
		buf[3] = msg->compat_flags;
 8007814:	f88c 3003 	strb.w	r3, [ip, #3]
		buf[5] = msg->sysid;
 8007818:	f88c 3005 	strb.w	r3, [ip, #5]
		buf[6] = msg->compid;
 800781c:	f88c 3006 	strb.w	r3, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007820:	f88c 3008 	strb.w	r3, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8007824:	f88c 3009 	strb.w	r3, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 8007828:	f88c 2007 	strb.w	r2, [ip, #7]
 800782c:	3502      	adds	r5, #2
 800782e:	4465      	add	r5, ip
        *crcAccum = X25_INIT_CRC;
 8007830:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8007834:	f10d 011d 	add.w	r1, sp, #29
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783c:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 800783e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8007842:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007844:	091a      	lsrs	r2, r3, #4
 8007846:	ea82 2217 	eor.w	r2, r2, r7, lsr #8
 800784a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800784e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8007852:	b21b      	sxth	r3, r3
	while (length--) {
 8007854:	42a9      	cmp	r1, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007856:	b29f      	uxth	r7, r3
	while (length--) {
 8007858:	d1ee      	bne.n	8007838 <mouseDriver_sendMsg+0x518>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800785a:	7b22      	ldrb	r2, [r4, #12]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800785c:	78e5      	ldrb	r5, [r4, #3]
 800785e:	4053      	eors	r3, r2
        tmp ^= (tmp<<4);
 8007860:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8007864:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007866:	0913      	lsrs	r3, r2, #4
 8007868:	ea83 2317 	eor.w	r3, r3, r7, lsr #8
 800786c:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8007870:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8007874:	b21b      	sxth	r3, r3
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007876:	f083 029b 	eor.w	r2, r3, #155	; 0x9b
        tmp ^= (tmp<<4);
 800787a:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800787e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007880:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007884:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 8007888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800788c:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8007890:	b21b      	sxth	r3, r3
 8007892:	b299      	uxth	r1, r3
 8007894:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 8007898:	ea4f 2911 	mov.w	r9, r1, lsr #8
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800789c:	7363      	strb	r3, [r4, #13]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800789e:	f802 9005 	strb.w	r9, [r2, r5]
	msg->checksum = checksum;
 80078a2:	8021      	strh	r1, [r4, #0]
	if (signing) {
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f040 8646 	bne.w	8008536 <mouseDriver_sendMsg+0x1216>
 80078aa:	78e7      	ldrb	r7, [r4, #3]
 80078ac:	ad3a      	add	r5, sp, #232	; 0xe8
 80078ae:	463e      	mov	r6, r7
 80078b0:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80078b2:	78a2      	ldrb	r2, [r4, #2]
 80078b4:	f894 e006 	ldrb.w	lr, [r4, #6]
 80078b8:	f894 c007 	ldrb.w	ip, [r4, #7]
 80078bc:	7a23      	ldrb	r3, [r4, #8]
 80078be:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80078c2:	b2c9      	uxtb	r1, r1
 80078c4:	2afe      	cmp	r2, #254	; 0xfe
 80078c6:	9100      	str	r1, [sp, #0]
 80078c8:	fa5f fb80 	uxtb.w	fp, r0
 80078cc:	f000 810f 	beq.w	8007aee <mouseDriver_sendMsg+0x7ce>
	while (length > 1 && payload[length-1] == 0) {
 80078d0:	2f01      	cmp	r7, #1
 80078d2:	f67f addb 	bls.w	800748c <mouseDriver_sendMsg+0x16c>
 80078d6:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 80078da:	5dc9      	ldrb	r1, [r1, r7]
 80078dc:	2900      	cmp	r1, #0
 80078de:	f47f add5 	bne.w	800748c <mouseDriver_sendMsg+0x16c>
 80078e2:	1e7e      	subs	r6, r7, #1
 80078e4:	b2f6      	uxtb	r6, r6
 80078e6:	f106 010c 	add.w	r1, r6, #12
 80078ea:	4421      	add	r1, r4
 80078ec:	469a      	mov	sl, r3
 80078ee:	e007      	b.n	8007900 <mouseDriver_sendMsg+0x5e0>
 80078f0:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 80078f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f47f adc6 	bne.w	800748a <mouseDriver_sendMsg+0x16a>
 80078fe:	4646      	mov	r6, r8
		length--;
 8007900:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8007902:	2f01      	cmp	r7, #1
 8007904:	d1f4      	bne.n	80078f0 <mouseDriver_sendMsg+0x5d0>
 8007906:	e5c0      	b.n	800748a <mouseDriver_sendMsg+0x16a>
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8007908:	4b6c      	ldr	r3, [pc, #432]	; (8007abc <mouseDriver_sendMsg+0x79c>)
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800790a:	4e6a      	ldr	r6, [pc, #424]	; (8007ab4 <mouseDriver_sendMsg+0x794>)
 800790c:	6858      	ldr	r0, [r3, #4]
 800790e:	689a      	ldr	r2, [r3, #8]
    packet.time = time;
 8007910:	6819      	ldr	r1, [r3, #0]
    packet.motor_x = motor_x;
 8007912:	9008      	str	r0, [sp, #32]
    packet.time = time;
 8007914:	ab07      	add	r3, sp, #28
 8007916:	9107      	str	r1, [sp, #28]
    packet.motor_y = motor_y;
 8007918:	9209      	str	r2, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 800791a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800791e:	7b37      	ldrb	r7, [r6, #12]
 8007920:	ac37      	add	r4, sp, #220	; 0xdc
 8007922:	ad3a      	add	r5, sp, #232	; 0xe8
 8007924:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 8007928:	2304      	movs	r3, #4
 800792a:	2200      	movs	r2, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800792c:	f017 0102 	ands.w	r1, r7, #2
 8007930:	7263      	strb	r3, [r4, #9]
 8007932:	72a2      	strb	r2, [r4, #10]
 8007934:	72e2      	strb	r2, [r4, #11]
 8007936:	f040 8423 	bne.w	8008180 <mouseDriver_sendMsg+0xe60>
 800793a:	6933      	ldr	r3, [r6, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 851d 	beq.w	800837c <mouseDriver_sendMsg+0x105c>
 8007942:	f893 e000 	ldrb.w	lr, [r3]
 8007946:	f00e 0e01 	and.w	lr, lr, #1
	while (length > 1 && payload[length-1] == 0) {
 800794a:	7de3      	ldrb	r3, [r4, #23]
		msg->magic = MAVLINK_STX;
 800794c:	22fd      	movs	r2, #253	; 0xfd
 800794e:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8007950:	2b00      	cmp	r3, #0
 8007952:	f041 8282 	bne.w	8008e5a <mouseDriver_sendMsg+0x1b3a>
 8007956:	7da3      	ldrb	r3, [r4, #22]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f041 8278 	bne.w	8008e4e <mouseDriver_sendMsg+0x1b2e>
 800795e:	7d63      	ldrb	r3, [r4, #21]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f041 82c4 	bne.w	8008eee <mouseDriver_sendMsg+0x1bce>
 8007966:	7d23      	ldrb	r3, [r4, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f041 82bd 	bne.w	8008ee8 <mouseDriver_sendMsg+0x1bc8>
 800796e:	7ce3      	ldrb	r3, [r4, #19]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f041 82d4 	bne.w	8008f1e <mouseDriver_sendMsg+0x1bfe>
 8007976:	7ca3      	ldrb	r3, [r4, #18]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f041 82cd 	bne.w	8008f18 <mouseDriver_sendMsg+0x1bf8>
 800797e:	7c63      	ldrb	r3, [r4, #17]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f041 82e6 	bne.w	8008f52 <mouseDriver_sendMsg+0x1c32>
 8007986:	7c23      	ldrb	r3, [r4, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f041 82df 	bne.w	8008f4c <mouseDriver_sendMsg+0x1c2c>
 800798e:	7be3      	ldrb	r3, [r4, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f041 8300 	bne.w	8008f96 <mouseDriver_sendMsg+0x1c76>
 8007996:	7ba3      	ldrb	r3, [r4, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f041 82f9 	bne.w	8008f90 <mouseDriver_sendMsg+0x1c70>
 800799e:	7b62      	ldrb	r2, [r4, #13]
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f041 82fb 	bne.w	8008f9c <mouseDriver_sendMsg+0x1c7c>
 80079a6:	f04f 0a01 	mov.w	sl, #1
 80079aa:	4650      	mov	r0, sl
	msg->sysid = system_id;
 80079ac:	2300      	movs	r3, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80079ae:	70e0      	strb	r0, [r4, #3]
	msg->sysid = system_id;
 80079b0:	71e3      	strb	r3, [r4, #7]
	msg->compid = component_id;
 80079b2:	7223      	strb	r3, [r4, #8]
	if (signing) {
 80079b4:	f1be 0f00 	cmp.w	lr, #0
 80079b8:	f001 830a 	beq.w	8008fd0 <mouseDriver_sendMsg+0x1cb0>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80079bc:	230a      	movs	r3, #10
 80079be:	f04f 0801 	mov.w	r8, #1
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f884 8004 	strb.w	r8, [r4, #4]
 80079c8:	2308      	movs	r3, #8
 80079ca:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 80079ce:	e3e7      	b.n	80081a0 <mouseDriver_sendMsg+0xe80>
			mavlink_msg_point_encode(SYS_ID,COMP_ID,&msg,&points[actual_point]);
 80079d0:	4b39      	ldr	r3, [pc, #228]	; (8007ab8 <mouseDriver_sendMsg+0x798>)
 * @param msg The MAVLink message to compress the data into
 * @param point C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_point_t* point)
{
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80079d2:	4a3b      	ldr	r2, [pc, #236]	; (8007ac0 <mouseDriver_sendMsg+0x7a0>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80079d6:	4e37      	ldr	r6, [pc, #220]	; (8007ab4 <mouseDriver_sendMsg+0x794>)
 80079d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80079dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80079e0:	441a      	add	r2, r3
    packet.duration = duration;
 80079e2:	ab07      	add	r3, sp, #28
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80079e4:	6854      	ldr	r4, [r2, #4]
 80079e6:	6891      	ldr	r1, [r2, #8]
 80079e8:	6810      	ldr	r0, [r2, #0]
 80079ea:	7b12      	ldrb	r2, [r2, #12]
    packet.setpoint_x = setpoint_x;
 80079ec:	9408      	str	r4, [sp, #32]
    packet.duration = duration;
 80079ee:	9007      	str	r0, [sp, #28]
    packet.setpoint_y = setpoint_y;
 80079f0:	9109      	str	r1, [sp, #36]	; 0x24
    packet.point_id = point_id;
 80079f2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LEN);
 80079f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079f8:	ad3a      	add	r5, sp, #232	; 0xe8
 80079fa:	462c      	mov	r4, r5
 80079fc:	c407      	stmia	r4!, {r0, r1, r2}
 80079fe:	7b31      	ldrb	r1, [r6, #12]
 8007a00:	7023      	strb	r3, [r4, #0]
 8007a02:	ac37      	add	r4, sp, #220	; 0xdc
    msg->msgid = MAVLINK_MSG_ID_POINT;
 8007a04:	2300      	movs	r3, #0
 8007a06:	2206      	movs	r2, #6
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8007a08:	f011 0102 	ands.w	r1, r1, #2
 8007a0c:	7262      	strb	r2, [r4, #9]
 8007a0e:	72a3      	strb	r3, [r4, #10]
 8007a10:	72e3      	strb	r3, [r4, #11]
 8007a12:	f47f aca0 	bne.w	8007356 <mouseDriver_sendMsg+0x36>
 8007a16:	6933      	ldr	r3, [r6, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 84c9 	beq.w	80083b0 <mouseDriver_sendMsg+0x1090>
 8007a1e:	f893 e000 	ldrb.w	lr, [r3]
 8007a22:	f00e 0e01 	and.w	lr, lr, #1
	while (length > 1 && payload[length-1] == 0) {
 8007a26:	7e23      	ldrb	r3, [r4, #24]
		msg->magic = MAVLINK_STX;
 8007a28:	22fd      	movs	r2, #253	; 0xfd
 8007a2a:	70a2      	strb	r2, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f041 8229 	bne.w	8008e84 <mouseDriver_sendMsg+0x1b64>
 8007a32:	7de3      	ldrb	r3, [r4, #23]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f041 821f 	bne.w	8008e78 <mouseDriver_sendMsg+0x1b58>
 8007a3a:	7da3      	ldrb	r3, [r4, #22]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f041 8268 	bne.w	8008f12 <mouseDriver_sendMsg+0x1bf2>
 8007a42:	7d63      	ldrb	r3, [r4, #21]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f041 8261 	bne.w	8008f0c <mouseDriver_sendMsg+0x1bec>
 8007a4a:	7d23      	ldrb	r3, [r4, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f041 826c 	bne.w	8008f2a <mouseDriver_sendMsg+0x1c0a>
 8007a52:	7ce3      	ldrb	r3, [r4, #19]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f041 8265 	bne.w	8008f24 <mouseDriver_sendMsg+0x1c04>
 8007a5a:	7ca3      	ldrb	r3, [r4, #18]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f041 827e 	bne.w	8008f5e <mouseDriver_sendMsg+0x1c3e>
 8007a62:	7c63      	ldrb	r3, [r4, #17]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f041 8277 	bne.w	8008f58 <mouseDriver_sendMsg+0x1c38>
 8007a6a:	7c23      	ldrb	r3, [r4, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f041 828c 	bne.w	8008f8a <mouseDriver_sendMsg+0x1c6a>
 8007a72:	7be3      	ldrb	r3, [r4, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f041 8285 	bne.w	8008f84 <mouseDriver_sendMsg+0x1c64>
 8007a7a:	7ba3      	ldrb	r3, [r4, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f041 8296 	bne.w	8008fae <mouseDriver_sendMsg+0x1c8e>
 8007a82:	7b63      	ldrb	r3, [r4, #13]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f041 828f 	bne.w	8008fa8 <mouseDriver_sendMsg+0x1c88>
 8007a8a:	f04f 0801 	mov.w	r8, #1
 8007a8e:	4647      	mov	r7, r8
	msg->sysid = system_id;
 8007a90:	2200      	movs	r2, #0
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007a92:	70e7      	strb	r7, [r4, #3]
	msg->sysid = system_id;
 8007a94:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 8007a96:	7222      	strb	r2, [r4, #8]
	if (signing) {
 8007a98:	f1be 0f00 	cmp.w	lr, #0
 8007a9c:	f001 82a2 	beq.w	8008fe4 <mouseDriver_sendMsg+0x1cc4>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	f04f 0901 	mov.w	r9, #1
 8007aa6:	9200      	str	r2, [sp, #0]
 8007aa8:	f884 9004 	strb.w	r9, [r4, #4]
 8007aac:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	e461      	b.n	8007378 <mouseDriver_sendMsg+0x58>
 8007ab4:	20000058 	.word	0x20000058
 8007ab8:	2000003c 	.word	0x2000003c
 8007abc:	20000030 	.word	0x20000030
 8007ac0:	200002ac 	.word	0x200002ac
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8007ac4:	9a00      	ldr	r2, [sp, #0]
 8007ac6:	f808 2006 	strb.w	r2, [r8, r6]
		memcpy(&ck[2], msg->signature, signature_len);
 8007aca:	ab80      	add	r3, sp, #512	; 0x200
 8007acc:	f853 4d0e 	ldr.w	r4, [r3, #-14]!
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007ad0:	f880 9001 	strb.w	r9, [r0, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8007ad4:	6899      	ldr	r1, [r3, #8]
 8007ad6:	685d      	ldr	r5, [r3, #4]
 8007ad8:	7b1b      	ldrb	r3, [r3, #12]
 8007ada:	7383      	strb	r3, [r0, #14]
 8007adc:	f8c0 4002 	str.w	r4, [r0, #2]
 8007ae0:	f8c0 100a 	str.w	r1, [r0, #10]
 8007ae4:	240d      	movs	r4, #13
 8007ae6:	f8c0 5006 	str.w	r5, [r0, #6]
 8007aea:	2109      	movs	r1, #9
 8007aec:	e4ff      	b.n	80074ee <mouseDriver_sendMsg+0x1ce>
		buf[0] = msg->magic;
 8007aee:	4c93      	ldr	r4, [pc, #588]	; (8007d3c <mouseDriver_sendMsg+0xa1c>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007af0:	4629      	mov	r1, r5
		buf[0] = msg->magic;
 8007af2:	7022      	strb	r2, [r4, #0]
		buf[4] = msg->compid;
 8007af4:	7123      	strb	r3, [r4, #4]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007af6:	1da0      	adds	r0, r4, #6
 8007af8:	463a      	mov	r2, r7
		buf[1] = length;
 8007afa:	7067      	strb	r7, [r4, #1]
		buf[2] = msg->seq;
 8007afc:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 8007b00:	f884 c003 	strb.w	ip, [r4, #3]
		buf[5] = msg->msgid & 0xFF;
 8007b04:	f884 b005 	strb.w	fp, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007b08:	f006 fb5b 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8007b0c:	1dbb      	adds	r3, r7, #6
 8007b0e:	18e2      	adds	r2, r4, r3
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8007b10:	9900      	ldr	r1, [sp, #0]
 8007b12:	54e1      	strb	r1, [r4, r3]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007b14:	2400      	movs	r4, #0
 8007b16:	f882 9001 	strb.w	r9, [r2, #1]
 8007b1a:	2105      	movs	r1, #5
 8007b1c:	e4e7      	b.n	80074ee <mouseDriver_sendMsg+0x1ce>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007b1e:	f640 42fe 	movw	r2, #3326	; 0xcfe
	msg->compid = component_id;
 8007b22:	f04f 080c 	mov.w	r8, #12
	msg->sysid = system_id;
 8007b26:	71e3      	strb	r3, [r4, #7]
	msg->compid = component_id;
 8007b28:	7223      	strb	r3, [r4, #8]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007b2a:	2306      	movs	r3, #6
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007b2c:	8062      	strh	r2, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007b2e:	9300      	str	r3, [sp, #0]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007b30:	4647      	mov	r7, r8
	msg->compid = component_id;
 8007b32:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
 8007b36:	2204      	movs	r2, #4
 8007b38:	230b      	movs	r3, #11
	msg->incompat_flags = 0;
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	4686      	mov	lr, r0
 8007b3e:	7120      	strb	r0, [r4, #4]
 8007b40:	4681      	mov	r9, r0
	msg->seq = status->current_tx_seq;
 8007b42:	79b0      	ldrb	r0, [r6, #6]
 8007b44:	71a0      	strb	r0, [r4, #6]
	buf[0] = msg->magic;
 8007b46:	f10d 0c10 	add.w	ip, sp, #16
	status->current_tx_seq = status->current_tx_seq + 1;
 8007b4a:	f100 0a01 	add.w	sl, r0, #1
 8007b4e:	f886 a006 	strb.w	sl, [r6, #6]
	msg->compat_flags = 0;
 8007b52:	f04f 0a00 	mov.w	sl, #0
	buf[0] = msg->magic;
 8007b56:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 8007b5a:	f88c 7001 	strb.w	r7, [ip, #1]
	msg->compat_flags = 0;
 8007b5e:	f884 a005 	strb.w	sl, [r4, #5]
	if (mavlink1) {
 8007b62:	2900      	cmp	r1, #0
 8007b64:	f000 80d7 	beq.w	8007d16 <mouseDriver_sendMsg+0x9f6>
		buf[5] = msg->msgid & 0xFF;
 8007b68:	2101      	movs	r1, #1
		buf[2] = msg->seq;
 8007b6a:	f88c 0002 	strb.w	r0, [ip, #2]
		buf[3] = msg->sysid;
 8007b6e:	f88c a003 	strb.w	sl, [ip, #3]
		buf[4] = msg->compid;
 8007b72:	f88c a004 	strb.w	sl, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 8007b76:	f88c 1005 	strb.w	r1, [ip, #5]
 8007b7a:	3202      	adds	r2, #2
 8007b7c:	4462      	add	r2, ip
        *crcAccum = X25_INIT_CRC;
 8007b7e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8007b82:	f10d 0911 	add.w	r9, sp, #17
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007b86:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007b8a:	4079      	eors	r1, r7
        tmp ^= (tmp<<4);
 8007b8c:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8007b90:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007b92:	0908      	lsrs	r0, r1, #4
 8007b94:	ea80 2017 	eor.w	r0, r0, r7, lsr #8
 8007b98:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 8007b9c:	4591      	cmp	r9, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007b9e:	ea80 07c1 	eor.w	r7, r0, r1, lsl #3
	while (length--) {
 8007ba2:	d1f0      	bne.n	8007b86 <mouseDriver_sendMsg+0x866>
 8007ba4:	330d      	adds	r3, #13
 8007ba6:	4423      	add	r3, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 8007ba8:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bae:	407a      	eors	r2, r7
        tmp ^= (tmp<<4);
 8007bb0:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007bb4:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007bb6:	0911      	lsrs	r1, r2, #4
 8007bb8:	ea81 2117 	eor.w	r1, r1, r7, lsr #8
 8007bbc:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007bc0:	ea81 02c2 	eor.w	r2, r1, r2, lsl #3
 8007bc4:	b212      	sxth	r2, r2
	while (length--) {
 8007bc6:	4298      	cmp	r0, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007bc8:	b297      	uxth	r7, r2
	while (length--) {
 8007bca:	d1ee      	bne.n	8007baa <mouseDriver_sendMsg+0x88a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007bcc:	f082 024c 	eor.w	r2, r2, #76	; 0x4c
        tmp ^= (tmp<<4);
 8007bd0:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007bd4:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007bd6:	0a39      	lsrs	r1, r7, #8
 8007bd8:	ea81 1112 	eor.w	r1, r1, r2, lsr #4
 8007bdc:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007be0:	ea81 01c2 	eor.w	r1, r1, r2, lsl #3
 8007be4:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8007be6:	f805 1008 	strb.w	r1, [r5, r8]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8007bea:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 8007bee:	b289      	uxth	r1, r1
 8007bf0:	78e3      	ldrb	r3, [r4, #3]
 8007bf2:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8007bf6:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 8007bfa:	8021      	strh	r1, [r4, #0]
	if (signing) {
 8007bfc:	f1be 0f00 	cmp.w	lr, #0
 8007c00:	f040 83e3 	bne.w	80083ca <mouseDriver_sendMsg+0x10aa>
 8007c04:	78e7      	ldrb	r7, [r4, #3]
 8007c06:	463e      	mov	r6, r7
 8007c08:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8007c0a:	78a2      	ldrb	r2, [r4, #2]
 8007c0c:	f894 e006 	ldrb.w	lr, [r4, #6]
 8007c10:	f894 c007 	ldrb.w	ip, [r4, #7]
 8007c14:	7a23      	ldrb	r3, [r4, #8]
 8007c16:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8007c1a:	b2c9      	uxtb	r1, r1
 8007c1c:	2afe      	cmp	r2, #254	; 0xfe
 8007c1e:	9100      	str	r1, [sp, #0]
 8007c20:	fa5f fb80 	uxtb.w	fp, r0
 8007c24:	d05d      	beq.n	8007ce2 <mouseDriver_sendMsg+0x9c2>
	while (length > 1 && payload[length-1] == 0) {
 8007c26:	2f01      	cmp	r7, #1
 8007c28:	d914      	bls.n	8007c54 <mouseDriver_sendMsg+0x934>
 8007c2a:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 8007c2e:	5dc9      	ldrb	r1, [r1, r7]
 8007c30:	b981      	cbnz	r1, 8007c54 <mouseDriver_sendMsg+0x934>
 8007c32:	1e7e      	subs	r6, r7, #1
 8007c34:	b2f6      	uxtb	r6, r6
 8007c36:	f106 010c 	add.w	r1, r6, #12
 8007c3a:	4421      	add	r1, r4
 8007c3c:	469a      	mov	sl, r3
 8007c3e:	e005      	b.n	8007c4c <mouseDriver_sendMsg+0x92c>
 8007c40:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8007c44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007c48:	b91b      	cbnz	r3, 8007c52 <mouseDriver_sendMsg+0x932>
 8007c4a:	4646      	mov	r6, r8
		length--;
 8007c4c:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8007c4e:	2f01      	cmp	r7, #1
 8007c50:	d1f6      	bne.n	8007c40 <mouseDriver_sendMsg+0x920>
 8007c52:	4653      	mov	r3, sl
		buf[0] = msg->magic;
 8007c54:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8007d3c <mouseDriver_sendMsg+0xa1c>
		buf[3] = msg->compat_flags;
 8007c58:	f894 a005 	ldrb.w	sl, [r4, #5]
		buf[0] = msg->magic;
 8007c5c:	f888 2000 	strb.w	r2, [r8]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007c60:	1202      	asrs	r2, r0, #8
 8007c62:	9201      	str	r2, [sp, #4]
		buf[2] = msg->incompat_flags;
 8007c64:	7924      	ldrb	r4, [r4, #4]
		buf[6] = msg->compid;
 8007c66:	f888 3006 	strb.w	r3, [r8, #6]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8007c6a:	4629      	mov	r1, r5
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007c6c:	9b01      	ldr	r3, [sp, #4]
		buf[1] = length;
 8007c6e:	f888 7001 	strb.w	r7, [r8, #1]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8007c72:	1405      	asrs	r5, r0, #16
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8007c74:	4632      	mov	r2, r6
		buf[4] = msg->seq;
 8007c76:	f888 e004 	strb.w	lr, [r8, #4]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8007c7a:	f108 000a 	add.w	r0, r8, #10
		buf[5] = msg->sysid;
 8007c7e:	f888 c005 	strb.w	ip, [r8, #5]
		buf[7] = msg->msgid & 0xFF;
 8007c82:	f888 b007 	strb.w	fp, [r8, #7]
		buf[3] = msg->compat_flags;
 8007c86:	f888 a003 	strb.w	sl, [r8, #3]
		buf[2] = msg->incompat_flags;
 8007c8a:	f888 4002 	strb.w	r4, [r8, #2]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007c8e:	f888 3008 	strb.w	r3, [r8, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8007c92:	f888 5009 	strb.w	r5, [r8, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8007c96:	f006 fa94 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8007c9a:	360a      	adds	r6, #10
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8007c9c:	f014 0101 	ands.w	r1, r4, #1
		ck = buf + header_len + 1 + (uint16_t)length;
 8007ca0:	eb08 0006 	add.w	r0, r8, r6
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8007ca4:	d107      	bne.n	8007cb6 <mouseDriver_sendMsg+0x996>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8007ca6:	9b00      	ldr	r3, [sp, #0]
 8007ca8:	f808 3006 	strb.w	r3, [r8, r6]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007cac:	2309      	movs	r3, #9
 8007cae:	f880 9001 	strb.w	r9, [r0, #1]
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8007cb2:	4419      	add	r1, r3
 8007cb4:	e41c      	b.n	80074f0 <mouseDriver_sendMsg+0x1d0>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8007cb6:	9a00      	ldr	r2, [sp, #0]
 8007cb8:	f808 2006 	strb.w	r2, [r8, r6]
		memcpy(&ck[2], msg->signature, signature_len);
 8007cbc:	ab80      	add	r3, sp, #512	; 0x200
 8007cbe:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007cc2:	f880 9001 	strb.w	r9, [r0, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8007cc6:	685d      	ldr	r5, [r3, #4]
 8007cc8:	689c      	ldr	r4, [r3, #8]
 8007cca:	7b1b      	ldrb	r3, [r3, #12]
 8007ccc:	7383      	strb	r3, [r0, #14]
 8007cce:	f8c0 1002 	str.w	r1, [r0, #2]
 8007cd2:	2309      	movs	r3, #9
 8007cd4:	210d      	movs	r1, #13
 8007cd6:	f8c0 5006 	str.w	r5, [r0, #6]
 8007cda:	f8c0 400a 	str.w	r4, [r0, #10]
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8007cde:	4419      	add	r1, r3
 8007ce0:	e406      	b.n	80074f0 <mouseDriver_sendMsg+0x1d0>
		buf[0] = msg->magic;
 8007ce2:	4c16      	ldr	r4, [pc, #88]	; (8007d3c <mouseDriver_sendMsg+0xa1c>)
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007ce4:	4629      	mov	r1, r5
		buf[0] = msg->magic;
 8007ce6:	7022      	strb	r2, [r4, #0]
		buf[4] = msg->compid;
 8007ce8:	7123      	strb	r3, [r4, #4]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007cea:	463a      	mov	r2, r7
 8007cec:	1da0      	adds	r0, r4, #6
		buf[1] = length;
 8007cee:	7067      	strb	r7, [r4, #1]
		buf[2] = msg->seq;
 8007cf0:	f884 e002 	strb.w	lr, [r4, #2]
		buf[3] = msg->sysid;
 8007cf4:	f884 c003 	strb.w	ip, [r4, #3]
		buf[5] = msg->msgid & 0xFF;
 8007cf8:	f884 b005 	strb.w	fp, [r4, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8007cfc:	f006 fa61 	bl	800e1c2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8007d00:	1dbb      	adds	r3, r7, #6
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8007d02:	9900      	ldr	r1, [sp, #0]
 8007d04:	54e1      	strb	r1, [r4, r3]
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8007d06:	18e2      	adds	r2, r4, r3
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2305      	movs	r3, #5
 8007d0c:	f882 9001 	strb.w	r9, [r2, #1]
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8007d10:	4419      	add	r1, r3
 8007d12:	f7ff bbed 	b.w	80074f0 <mouseDriver_sendMsg+0x1d0>
		buf[7] = msg->msgid & 0xFF;
 8007d16:	2701      	movs	r7, #1
		buf[2] = msg->incompat_flags;
 8007d18:	f88c 9002 	strb.w	r9, [ip, #2]
		buf[3] = msg->compat_flags;
 8007d1c:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 8007d20:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->sysid;
 8007d24:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 8007d28:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007d2c:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8007d30:	f88c 1009 	strb.w	r1, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 8007d34:	f88c 7007 	strb.w	r7, [ip, #7]
 8007d38:	e71f      	b.n	8007b7a <mouseDriver_sendMsg+0x85a>
 8007d3a:	bf00      	nop
 8007d3c:	200000b8 	.word	0x200000b8
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007d40:	f240 50fe 	movw	r0, #1534	; 0x5fe
	msg->compid = component_id;
 8007d44:	2304      	movs	r3, #4
 8007d46:	f04f 0e05 	mov.w	lr, #5
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007d4a:	8060      	strh	r0, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007d4c:	2006      	movs	r0, #6
	msg->sysid = system_id;
 8007d4e:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 8007d50:	7222      	strb	r2, [r4, #8]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007d52:	46f2      	mov	sl, lr
	msg->compid = component_id;
 8007d54:	461a      	mov	r2, r3
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007d56:	9000      	str	r0, [sp, #0]
	msg->compid = component_id;
 8007d58:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
	msg->incompat_flags = 0;
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4607      	mov	r7, r0
 8007d60:	7120      	strb	r0, [r4, #4]
 8007d62:	4680      	mov	r8, r0
	msg->seq = status->current_tx_seq;
 8007d64:	79b0      	ldrb	r0, [r6, #6]
 8007d66:	71a0      	strb	r0, [r4, #6]
	buf[0] = msg->magic;
 8007d68:	f10d 0c1c 	add.w	ip, sp, #28
	status->current_tx_seq = status->current_tx_seq + 1;
 8007d6c:	f100 0901 	add.w	r9, r0, #1
 8007d70:	f886 9006 	strb.w	r9, [r6, #6]
	msg->compat_flags = 0;
 8007d74:	f04f 0900 	mov.w	r9, #0
	buf[0] = msg->magic;
 8007d78:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 8007d7c:	f88c a001 	strb.w	sl, [ip, #1]
	msg->compat_flags = 0;
 8007d80:	f884 9005 	strb.w	r9, [r4, #5]
	if (mavlink1) {
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d07f      	beq.n	8007e88 <mouseDriver_sendMsg+0xb68>
		buf[5] = msg->msgid & 0xFF;
 8007d88:	2107      	movs	r1, #7
		buf[2] = msg->seq;
 8007d8a:	f88c 0002 	strb.w	r0, [ip, #2]
		buf[3] = msg->sysid;
 8007d8e:	f88c 9003 	strb.w	r9, [ip, #3]
		buf[4] = msg->compid;
 8007d92:	f88c 9004 	strb.w	r9, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 8007d96:	f88c 1005 	strb.w	r1, [ip, #5]
 8007d9a:	3202      	adds	r2, #2
 8007d9c:	4462      	add	r2, ip
        *crcAccum = X25_INIT_CRC;
 8007d9e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8007da2:	f10d 091d 	add.w	r9, sp, #29
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007da6:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007daa:	ea81 0108 	eor.w	r1, r1, r8
        tmp ^= (tmp<<4);
 8007dae:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8007db2:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007db4:	0908      	lsrs	r0, r1, #4
 8007db6:	ea80 2018 	eor.w	r0, r0, r8, lsr #8
 8007dba:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 8007dbe:	4591      	cmp	r9, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007dc0:	ea80 08c1 	eor.w	r8, r0, r1, lsl #3
	while (length--) {
 8007dc4:	d1ef      	bne.n	8007da6 <mouseDriver_sendMsg+0xa86>
 8007dc6:	330d      	adds	r3, #13
 8007dc8:	4423      	add	r3, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 8007dca:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd0:	ea82 0208 	eor.w	r2, r2, r8
        tmp ^= (tmp<<4);
 8007dd4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007dd8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007dda:	0911      	lsrs	r1, r2, #4
 8007ddc:	ea81 2118 	eor.w	r1, r1, r8, lsr #8
 8007de0:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007de4:	ea81 02c2 	eor.w	r2, r1, r2, lsl #3
 8007de8:	b212      	sxth	r2, r2
	while (length--) {
 8007dea:	4298      	cmp	r0, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007dec:	fa1f f882 	uxth.w	r8, r2
	while (length--) {
 8007df0:	d1ec      	bne.n	8007dcc <mouseDriver_sendMsg+0xaac>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007df2:	f082 0216 	eor.w	r2, r2, #22
        tmp ^= (tmp<<4);
 8007df6:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007dfa:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007dfc:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8007e00:	ea81 1112 	eor.w	r1, r1, r2, lsr #4
 8007e04:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007e08:	ea81 01c2 	eor.w	r1, r1, r2, lsl #3
 8007e0c:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8007e0e:	f805 100e 	strb.w	r1, [r5, lr]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8007e12:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 8007e16:	b289      	uxth	r1, r1
 8007e18:	78e3      	ldrb	r3, [r4, #3]
 8007e1a:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8007e1e:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 8007e22:	8021      	strh	r1, [r4, #0]
	if (signing) {
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	f040 85d9 	bne.w	80089dc <mouseDriver_sendMsg+0x16bc>
 8007e2a:	78e7      	ldrb	r7, [r4, #3]
 8007e2c:	463e      	mov	r6, r7
 8007e2e:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8007e30:	78a2      	ldrb	r2, [r4, #2]
 8007e32:	f894 e006 	ldrb.w	lr, [r4, #6]
 8007e36:	f894 c007 	ldrb.w	ip, [r4, #7]
 8007e3a:	7a23      	ldrb	r3, [r4, #8]
 8007e3c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8007e40:	b2c9      	uxtb	r1, r1
 8007e42:	2afe      	cmp	r2, #254	; 0xfe
 8007e44:	9100      	str	r1, [sp, #0]
 8007e46:	fa5f fb80 	uxtb.w	fp, r0
 8007e4a:	f43f ae50 	beq.w	8007aee <mouseDriver_sendMsg+0x7ce>
	while (length > 1 && payload[length-1] == 0) {
 8007e4e:	2f01      	cmp	r7, #1
 8007e50:	f67f ab1c 	bls.w	800748c <mouseDriver_sendMsg+0x16c>
 8007e54:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 8007e58:	5dc9      	ldrb	r1, [r1, r7]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	f47f ab16 	bne.w	800748c <mouseDriver_sendMsg+0x16c>
 8007e60:	1e7e      	subs	r6, r7, #1
 8007e62:	b2f6      	uxtb	r6, r6
 8007e64:	f106 010c 	add.w	r1, r6, #12
 8007e68:	4421      	add	r1, r4
 8007e6a:	469a      	mov	sl, r3
 8007e6c:	e007      	b.n	8007e7e <mouseDriver_sendMsg+0xb5e>
 8007e6e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8007e72:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f47f ab07 	bne.w	800748a <mouseDriver_sendMsg+0x16a>
 8007e7c:	4646      	mov	r6, r8
		length--;
 8007e7e:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8007e80:	2f01      	cmp	r7, #1
 8007e82:	d1f4      	bne.n	8007e6e <mouseDriver_sendMsg+0xb4e>
 8007e84:	f7ff bb01 	b.w	800748a <mouseDriver_sendMsg+0x16a>
		buf[7] = msg->msgid & 0xFF;
 8007e88:	f04f 0907 	mov.w	r9, #7
		buf[2] = msg->incompat_flags;
 8007e8c:	f88c 8002 	strb.w	r8, [ip, #2]
		buf[3] = msg->compat_flags;
 8007e90:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 8007e94:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->sysid;
 8007e98:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 8007e9c:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8007ea0:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8007ea4:	f88c 1009 	strb.w	r1, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 8007ea8:	f88c 9007 	strb.w	r9, [ip, #7]
 8007eac:	e775      	b.n	8007d9a <mouseDriver_sendMsg+0xa7a>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007eae:	f240 53fe 	movw	r3, #1534	; 0x5fe
	msg->compid = component_id;
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f04f 0805 	mov.w	r8, #5
	msg->sysid = system_id;
 8007eb8:	71e0      	strb	r0, [r4, #7]
	msg->compid = component_id;
 8007eba:	7220      	strb	r0, [r4, #8]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007ebc:	2006      	movs	r0, #6
		msg->magic = MAVLINK_STX_MAVLINK1;
 8007ebe:	8063      	strh	r3, [r4, #2]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8007ec0:	46c2      	mov	sl, r8
	msg->compid = component_id;
 8007ec2:	4613      	mov	r3, r2
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8007ec4:	9000      	str	r0, [sp, #0]
	msg->compid = component_id;
 8007ec6:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
	msg->incompat_flags = 0;
 8007eca:	2000      	movs	r0, #0
 8007ecc:	4607      	mov	r7, r0
 8007ece:	7120      	strb	r0, [r4, #4]
 8007ed0:	4681      	mov	r9, r0
	msg->seq = status->current_tx_seq;
 8007ed2:	79b0      	ldrb	r0, [r6, #6]
 8007ed4:	71a0      	strb	r0, [r4, #6]
	buf[0] = msg->magic;
 8007ed6:	f10d 0c1c 	add.w	ip, sp, #28
	status->current_tx_seq = status->current_tx_seq + 1;
 8007eda:	f100 0e01 	add.w	lr, r0, #1
 8007ede:	f886 e006 	strb.w	lr, [r6, #6]
	msg->compat_flags = 0;
 8007ee2:	f04f 0e00 	mov.w	lr, #0
	buf[0] = msg->magic;
 8007ee6:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 8007eea:	f88c a001 	strb.w	sl, [ip, #1]
	msg->compat_flags = 0;
 8007eee:	f884 e005 	strb.w	lr, [r4, #5]
	if (mavlink1) {
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	d07d      	beq.n	8007ff2 <mouseDriver_sendMsg+0xcd2>
		buf[2] = msg->seq;
 8007ef6:	f88c 0002 	strb.w	r0, [ip, #2]
		buf[3] = msg->sysid;
 8007efa:	f88c e003 	strb.w	lr, [ip, #3]
		buf[4] = msg->compid;
 8007efe:	f88c e004 	strb.w	lr, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 8007f02:	f88c e005 	strb.w	lr, [ip, #5]
 8007f06:	3202      	adds	r2, #2
 8007f08:	4462      	add	r2, ip
        *crcAccum = X25_INIT_CRC;
 8007f0a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8007f0e:	f10d 091d 	add.w	r9, sp, #29
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007f12:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007f16:	ea81 010e 	eor.w	r1, r1, lr
        tmp ^= (tmp<<4);
 8007f1a:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8007f1e:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007f20:	0908      	lsrs	r0, r1, #4
 8007f22:	ea80 201e 	eor.w	r0, r0, lr, lsr #8
 8007f26:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 8007f2a:	4591      	cmp	r9, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007f2c:	ea80 0ec1 	eor.w	lr, r0, r1, lsl #3
	while (length--) {
 8007f30:	d1ef      	bne.n	8007f12 <mouseDriver_sendMsg+0xbf2>
 8007f32:	330d      	adds	r3, #13
 8007f34:	4423      	add	r3, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 8007f36:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3c:	ea82 020e 	eor.w	r2, r2, lr
        tmp ^= (tmp<<4);
 8007f40:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007f44:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007f46:	0911      	lsrs	r1, r2, #4
 8007f48:	ea81 211e 	eor.w	r1, r1, lr, lsr #8
 8007f4c:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007f50:	ea81 02c2 	eor.w	r2, r1, r2, lsl #3
 8007f54:	b212      	sxth	r2, r2
	while (length--) {
 8007f56:	4298      	cmp	r0, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007f58:	fa1f fe82 	uxth.w	lr, r2
	while (length--) {
 8007f5c:	d1ec      	bne.n	8007f38 <mouseDriver_sendMsg+0xc18>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007f5e:	f082 0289 	eor.w	r2, r2, #137	; 0x89
        tmp ^= (tmp<<4);
 8007f62:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8007f66:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007f68:	ea4f 211e 	mov.w	r1, lr, lsr #8
 8007f6c:	ea81 1112 	eor.w	r1, r1, r2, lsr #4
 8007f70:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 8007f74:	ea81 01c2 	eor.w	r1, r1, r2, lsl #3
 8007f78:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8007f7a:	f805 1008 	strb.w	r1, [r5, r8]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8007f7e:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 8007f82:	b289      	uxth	r1, r1
 8007f84:	78e3      	ldrb	r3, [r4, #3]
 8007f86:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8007f8a:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 8007f8e:	8021      	strh	r1, [r4, #0]
	if (signing) {
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	f040 8456 	bne.w	8008842 <mouseDriver_sendMsg+0x1522>
 8007f96:	78e7      	ldrb	r7, [r4, #3]
 8007f98:	463e      	mov	r6, r7
 8007f9a:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8007f9c:	78a2      	ldrb	r2, [r4, #2]
 8007f9e:	f894 e006 	ldrb.w	lr, [r4, #6]
 8007fa2:	f894 c007 	ldrb.w	ip, [r4, #7]
 8007fa6:	7a23      	ldrb	r3, [r4, #8]
 8007fa8:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8007fac:	b2c9      	uxtb	r1, r1
 8007fae:	2afe      	cmp	r2, #254	; 0xfe
 8007fb0:	9100      	str	r1, [sp, #0]
 8007fb2:	fa5f fb80 	uxtb.w	fp, r0
 8007fb6:	f43f ae94 	beq.w	8007ce2 <mouseDriver_sendMsg+0x9c2>
	while (length > 1 && payload[length-1] == 0) {
 8007fba:	2f01      	cmp	r7, #1
 8007fbc:	f67f ae4a 	bls.w	8007c54 <mouseDriver_sendMsg+0x934>
 8007fc0:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 8007fc4:	5dc9      	ldrb	r1, [r1, r7]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	f47f ae44 	bne.w	8007c54 <mouseDriver_sendMsg+0x934>
 8007fcc:	1e7e      	subs	r6, r7, #1
 8007fce:	b2f6      	uxtb	r6, r6
 8007fd0:	f106 010c 	add.w	r1, r6, #12
 8007fd4:	4421      	add	r1, r4
 8007fd6:	469a      	mov	sl, r3
 8007fd8:	e007      	b.n	8007fea <mouseDriver_sendMsg+0xcca>
 8007fda:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8007fde:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f47f ae35 	bne.w	8007c52 <mouseDriver_sendMsg+0x932>
 8007fe8:	4646      	mov	r6, r8
		length--;
 8007fea:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8007fec:	2f01      	cmp	r7, #1
 8007fee:	d1f4      	bne.n	8007fda <mouseDriver_sendMsg+0xcba>
 8007ff0:	e62f      	b.n	8007c52 <mouseDriver_sendMsg+0x932>
		buf[2] = msg->incompat_flags;
 8007ff2:	f88c 9002 	strb.w	r9, [ip, #2]
		buf[3] = msg->compat_flags;
 8007ff6:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 8007ffa:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->sysid;
 8007ffe:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 8008002:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[7] = msg->msgid & 0xFF;
 8008006:	f88c 1007 	strb.w	r1, [ip, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800800a:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800800e:	f88c 1009 	strb.w	r1, [ip, #9]
 8008012:	e778      	b.n	8007f06 <mouseDriver_sendMsg+0xbe6>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8008014:	f640 02fe 	movw	r2, #2302	; 0x8fe
	msg->compid = component_id;
 8008018:	f04f 0a08 	mov.w	sl, #8
	msg->sysid = system_id;
 800801c:	71e3      	strb	r3, [r4, #7]
	msg->compid = component_id;
 800801e:	7223      	strb	r3, [r4, #8]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8008020:	2306      	movs	r3, #6
		msg->magic = MAVLINK_STX_MAVLINK1;
 8008022:	8062      	strh	r2, [r4, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8008024:	9300      	str	r3, [sp, #0]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8008026:	46d6      	mov	lr, sl
	msg->compid = component_id;
 8008028:	2307      	movs	r3, #7
 800802a:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
 800802e:	2204      	movs	r2, #4
	msg->incompat_flags = 0;
 8008030:	2000      	movs	r0, #0
 8008032:	4607      	mov	r7, r0
 8008034:	7120      	strb	r0, [r4, #4]
 8008036:	4680      	mov	r8, r0
	msg->seq = status->current_tx_seq;
 8008038:	79b0      	ldrb	r0, [r6, #6]
 800803a:	71a0      	strb	r0, [r4, #6]
	buf[0] = msg->magic;
 800803c:	f10d 0c1c 	add.w	ip, sp, #28
	status->current_tx_seq = status->current_tx_seq + 1;
 8008040:	f100 0901 	add.w	r9, r0, #1
 8008044:	f886 9006 	strb.w	r9, [r6, #6]
	msg->compat_flags = 0;
 8008048:	f04f 0900 	mov.w	r9, #0
	buf[0] = msg->magic;
 800804c:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 8008050:	f88c e001 	strb.w	lr, [ip, #1]
	msg->compat_flags = 0;
 8008054:	f884 9005 	strb.w	r9, [r4, #5]
	if (mavlink1) {
 8008058:	2900      	cmp	r1, #0
 800805a:	d07e      	beq.n	800815a <mouseDriver_sendMsg+0xe3a>
		buf[5] = msg->msgid & 0xFF;
 800805c:	2102      	movs	r1, #2
		buf[2] = msg->seq;
 800805e:	f88c 0002 	strb.w	r0, [ip, #2]
		buf[3] = msg->sysid;
 8008062:	f88c 9003 	strb.w	r9, [ip, #3]
		buf[4] = msg->compid;
 8008066:	f88c 9004 	strb.w	r9, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 800806a:	f88c 1005 	strb.w	r1, [ip, #5]
 800806e:	3202      	adds	r2, #2
 8008070:	4462      	add	r2, ip
        *crcAccum = X25_INIT_CRC;
 8008072:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008076:	f10d 081d 	add.w	r8, sp, #29
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800807a:	f818 1b01 	ldrb.w	r1, [r8], #1
 800807e:	ea81 010e 	eor.w	r1, r1, lr
        tmp ^= (tmp<<4);
 8008082:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 8008086:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008088:	0908      	lsrs	r0, r1, #4
 800808a:	ea80 201e 	eor.w	r0, r0, lr, lsr #8
 800808e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 8008092:	4590      	cmp	r8, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008094:	ea80 0ec1 	eor.w	lr, r0, r1, lsl #3
	while (length--) {
 8008098:	d1ef      	bne.n	800807a <mouseDriver_sendMsg+0xd5a>
 800809a:	330d      	adds	r3, #13
 800809c:	4423      	add	r3, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 800809e:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80080a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a4:	ea82 020e 	eor.w	r2, r2, lr
        tmp ^= (tmp<<4);
 80080a8:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80080ac:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80080ae:	0911      	lsrs	r1, r2, #4
 80080b0:	ea81 211e 	eor.w	r1, r1, lr, lsr #8
 80080b4:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80080b8:	ea81 02c2 	eor.w	r2, r1, r2, lsl #3
 80080bc:	b212      	sxth	r2, r2
	while (length--) {
 80080be:	4298      	cmp	r0, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80080c0:	fa1f fe82 	uxth.w	lr, r2
	while (length--) {
 80080c4:	d1ec      	bne.n	80080a0 <mouseDriver_sendMsg+0xd80>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80080c6:	f082 0226 	eor.w	r2, r2, #38	; 0x26
        tmp ^= (tmp<<4);
 80080ca:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80080ce:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80080d0:	0911      	lsrs	r1, r2, #4
 80080d2:	ea81 211e 	eor.w	r1, r1, lr, lsr #8
 80080d6:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80080da:	ea81 01c2 	eor.w	r1, r1, r2, lsl #3
 80080de:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80080e0:	f805 100a 	strb.w	r1, [r5, sl]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80080e4:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 80080e8:	b289      	uxth	r1, r1
 80080ea:	78e3      	ldrb	r3, [r4, #3]
 80080ec:	ea4f 2911 	mov.w	r9, r1, lsr #8
 80080f0:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 80080f4:	8021      	strh	r1, [r4, #0]
	if (signing) {
 80080f6:	2f00      	cmp	r7, #0
 80080f8:	f040 82ee 	bne.w	80086d8 <mouseDriver_sendMsg+0x13b8>
 80080fc:	78e7      	ldrb	r7, [r4, #3]
 80080fe:	463e      	mov	r6, r7
 8008100:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8008102:	78a2      	ldrb	r2, [r4, #2]
 8008104:	f894 e006 	ldrb.w	lr, [r4, #6]
 8008108:	f894 c007 	ldrb.w	ip, [r4, #7]
 800810c:	7a23      	ldrb	r3, [r4, #8]
 800810e:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8008112:	b2c9      	uxtb	r1, r1
 8008114:	2afe      	cmp	r2, #254	; 0xfe
 8008116:	9100      	str	r1, [sp, #0]
 8008118:	fa5f fb80 	uxtb.w	fp, r0
 800811c:	f43f ace7 	beq.w	8007aee <mouseDriver_sendMsg+0x7ce>
	while (length > 1 && payload[length-1] == 0) {
 8008120:	2f01      	cmp	r7, #1
 8008122:	f67f a9b3 	bls.w	800748c <mouseDriver_sendMsg+0x16c>
 8008126:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 800812a:	5dc9      	ldrb	r1, [r1, r7]
 800812c:	2900      	cmp	r1, #0
 800812e:	f47f a9ad 	bne.w	800748c <mouseDriver_sendMsg+0x16c>
 8008132:	1e7e      	subs	r6, r7, #1
 8008134:	b2f6      	uxtb	r6, r6
 8008136:	f106 010c 	add.w	r1, r6, #12
 800813a:	4421      	add	r1, r4
 800813c:	469a      	mov	sl, r3
 800813e:	e007      	b.n	8008150 <mouseDriver_sendMsg+0xe30>
 8008140:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8008144:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008148:	2b00      	cmp	r3, #0
 800814a:	f47f a99e 	bne.w	800748a <mouseDriver_sendMsg+0x16a>
 800814e:	4646      	mov	r6, r8
		length--;
 8008150:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 8008152:	2f01      	cmp	r7, #1
 8008154:	d1f4      	bne.n	8008140 <mouseDriver_sendMsg+0xe20>
 8008156:	f7ff b998 	b.w	800748a <mouseDriver_sendMsg+0x16a>
		buf[7] = msg->msgid & 0xFF;
 800815a:	f04f 0e02 	mov.w	lr, #2
		buf[2] = msg->incompat_flags;
 800815e:	f88c 8002 	strb.w	r8, [ip, #2]
		buf[3] = msg->compat_flags;
 8008162:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 8008166:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->sysid;
 800816a:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 800816e:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8008172:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8008176:	f88c 1009 	strb.w	r1, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 800817a:	f88c e007 	strb.w	lr, [ip, #7]
 800817e:	e776      	b.n	800806e <mouseDriver_sendMsg+0xd4e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8008180:	f640 47fe 	movw	r7, #3326	; 0xcfe
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8008184:	200c      	movs	r0, #12
	msg->sysid = system_id;
 8008186:	71e2      	strb	r2, [r4, #7]
	msg->compid = component_id;
 8008188:	7222      	strb	r2, [r4, #8]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800818a:	2206      	movs	r2, #6
 800818c:	9200      	str	r2, [sp, #0]
		msg->magic = MAVLINK_STX_MAVLINK1;
 800818e:	8067      	strh	r7, [r4, #2]
	msg->compid = component_id;
 8008190:	4682      	mov	sl, r0
 8008192:	220b      	movs	r2, #11
 8008194:	f04f 0bfe 	mov.w	fp, #254	; 0xfe
	msg->incompat_flags = 0;
 8008198:	2700      	movs	r7, #0
 800819a:	46be      	mov	lr, r7
 800819c:	7127      	strb	r7, [r4, #4]
 800819e:	46b8      	mov	r8, r7
	msg->seq = status->current_tx_seq;
 80081a0:	79b7      	ldrb	r7, [r6, #6]
 80081a2:	71a7      	strb	r7, [r4, #6]
	buf[0] = msg->magic;
 80081a4:	f10d 0c10 	add.w	ip, sp, #16
	status->current_tx_seq = status->current_tx_seq + 1;
 80081a8:	f107 0901 	add.w	r9, r7, #1
 80081ac:	f886 9006 	strb.w	r9, [r6, #6]
	msg->compat_flags = 0;
 80081b0:	f04f 0900 	mov.w	r9, #0
	buf[0] = msg->magic;
 80081b4:	f88c b000 	strb.w	fp, [ip]
	buf[1] = msg->len;
 80081b8:	f88c 0001 	strb.w	r0, [ip, #1]
	msg->compat_flags = 0;
 80081bc:	f884 9005 	strb.w	r9, [r4, #5]
	if (mavlink1) {
 80081c0:	2900      	cmp	r1, #0
 80081c2:	d07b      	beq.n	80082bc <mouseDriver_sendMsg+0xf9c>
		buf[5] = msg->msgid & 0xFF;
 80081c4:	2104      	movs	r1, #4
		buf[2] = msg->seq;
 80081c6:	f88c 7002 	strb.w	r7, [ip, #2]
		buf[3] = msg->sysid;
 80081ca:	f88c 9003 	strb.w	r9, [ip, #3]
		buf[4] = msg->compid;
 80081ce:	f88c 9004 	strb.w	r9, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 80081d2:	f88c 1005 	strb.w	r1, [ip, #5]
 80081d6:	3302      	adds	r3, #2
 80081d8:	4463      	add	r3, ip
        *crcAccum = X25_INIT_CRC;
 80081da:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80081de:	f10d 0811 	add.w	r8, sp, #17
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80081e2:	f818 1b01 	ldrb.w	r1, [r8], #1
 80081e6:	4079      	eors	r1, r7
        tmp ^= (tmp<<4);
 80081e8:	ea81 1101 	eor.w	r1, r1, r1, lsl #4
 80081ec:	b2c9      	uxtb	r1, r1
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80081ee:	0908      	lsrs	r0, r1, #4
 80081f0:	ea80 2017 	eor.w	r0, r0, r7, lsr #8
 80081f4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	while (length--) {
 80081f8:	4598      	cmp	r8, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80081fa:	ea80 07c1 	eor.w	r7, r0, r1, lsl #3
	while (length--) {
 80081fe:	d1f0      	bne.n	80081e2 <mouseDriver_sendMsg+0xec2>
 8008200:	320d      	adds	r2, #13
 8008202:	4422      	add	r2, r4
	const uint8_t *p = (const uint8_t *)pBuffer;
 8008204:	4628      	mov	r0, r5
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8008206:	f810 3b01 	ldrb.w	r3, [r0], #1
 800820a:	407b      	eors	r3, r7
        tmp ^= (tmp<<4);
 800820c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8008210:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008212:	0919      	lsrs	r1, r3, #4
 8008214:	ea81 2117 	eor.w	r1, r1, r7, lsr #8
 8008218:	ea81 2103 	eor.w	r1, r1, r3, lsl #8
 800821c:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
 8008220:	b21b      	sxth	r3, r3
	while (length--) {
 8008222:	4290      	cmp	r0, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008224:	b29f      	uxth	r7, r3
	while (length--) {
 8008226:	d1ee      	bne.n	8008206 <mouseDriver_sendMsg+0xee6>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8008228:	f083 0370 	eor.w	r3, r3, #112	; 0x70
        tmp ^= (tmp<<4);
 800822c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8008230:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8008232:	0a39      	lsrs	r1, r7, #8
 8008234:	ea81 1113 	eor.w	r1, r1, r3, lsr #4
 8008238:	ea81 2103 	eor.w	r1, r1, r3, lsl #8
 800823c:	ea81 01c3 	eor.w	r1, r1, r3, lsl #3
 8008240:	b209      	sxth	r1, r1
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8008242:	f805 100a 	strb.w	r1, [r5, sl]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8008246:	f10d 02e9 	add.w	r2, sp, #233	; 0xe9
 800824a:	b289      	uxth	r1, r1
 800824c:	78e3      	ldrb	r3, [r4, #3]
 800824e:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008252:	f802 9003 	strb.w	r9, [r2, r3]
	msg->checksum = checksum;
 8008256:	8021      	strh	r1, [r4, #0]
	if (signing) {
 8008258:	f1be 0f00 	cmp.w	lr, #0
 800825c:	f040 8176 	bne.w	800854c <mouseDriver_sendMsg+0x122c>
 8008260:	78e7      	ldrb	r7, [r4, #3]
 8008262:	463e      	mov	r6, r7
 8008264:	68a0      	ldr	r0, [r4, #8]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8008266:	78a2      	ldrb	r2, [r4, #2]
 8008268:	f894 e006 	ldrb.w	lr, [r4, #6]
 800826c:	f894 c007 	ldrb.w	ip, [r4, #7]
 8008270:	7a23      	ldrb	r3, [r4, #8]
 8008272:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8008276:	b2c9      	uxtb	r1, r1
 8008278:	2afe      	cmp	r2, #254	; 0xfe
 800827a:	9100      	str	r1, [sp, #0]
 800827c:	fa5f fb80 	uxtb.w	fp, r0
 8008280:	f43f ad2f 	beq.w	8007ce2 <mouseDriver_sendMsg+0x9c2>
	while (length > 1 && payload[length-1] == 0) {
 8008284:	2f01      	cmp	r7, #1
 8008286:	f67f ace5 	bls.w	8007c54 <mouseDriver_sendMsg+0x934>
 800828a:	f10d 01e7 	add.w	r1, sp, #231	; 0xe7
 800828e:	5dc9      	ldrb	r1, [r1, r7]
 8008290:	2900      	cmp	r1, #0
 8008292:	f47f acdf 	bne.w	8007c54 <mouseDriver_sendMsg+0x934>
 8008296:	1e7e      	subs	r6, r7, #1
 8008298:	b2f6      	uxtb	r6, r6
 800829a:	f106 010c 	add.w	r1, r6, #12
 800829e:	4421      	add	r1, r4
 80082a0:	469a      	mov	sl, r3
 80082a2:	e007      	b.n	80082b4 <mouseDriver_sendMsg+0xf94>
 80082a4:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 80082a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f47f acd0 	bne.w	8007c52 <mouseDriver_sendMsg+0x932>
 80082b2:	4646      	mov	r6, r8
		length--;
 80082b4:	b2f7      	uxtb	r7, r6
	while (length > 1 && payload[length-1] == 0) {
 80082b6:	2f01      	cmp	r7, #1
 80082b8:	d1f4      	bne.n	80082a4 <mouseDriver_sendMsg+0xf84>
 80082ba:	e4ca      	b.n	8007c52 <mouseDriver_sendMsg+0x932>
		buf[7] = msg->msgid & 0xFF;
 80082bc:	2004      	movs	r0, #4
		buf[2] = msg->incompat_flags;
 80082be:	f88c 8002 	strb.w	r8, [ip, #2]
		buf[3] = msg->compat_flags;
 80082c2:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 80082c6:	f88c 7004 	strb.w	r7, [ip, #4]
		buf[5] = msg->sysid;
 80082ca:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 80082ce:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80082d2:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80082d6:	f88c 1009 	strb.w	r1, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 80082da:	f88c 0007 	strb.w	r0, [ip, #7]
 80082de:	e77a      	b.n	80081d6 <mouseDriver_sendMsg+0xeb6>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80082e0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
	msg->sysid = system_id;
 80082e4:	71e3      	strb	r3, [r4, #7]
	msg->compid = component_id;
 80082e6:	7223      	strb	r3, [r4, #8]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80082e8:	8062      	strh	r2, [r4, #2]
		msg->magic = MAVLINK_STX_MAVLINK1;
 80082ea:	23fe      	movs	r3, #254	; 0xfe
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80082ec:	f04f 0e06 	mov.w	lr, #6
	msg->compid = component_id;
 80082f0:	2504      	movs	r5, #4
	msg->seq = status->current_tx_seq;
 80082f2:	79b7      	ldrb	r7, [r6, #6]
 80082f4:	71a7      	strb	r7, [r4, #6]
	buf[0] = msg->magic;
 80082f6:	f10d 0c1c 	add.w	ip, sp, #28
	status->current_tx_seq = status->current_tx_seq + 1;
 80082fa:	1c7a      	adds	r2, r7, #1
 80082fc:	71b2      	strb	r2, [r6, #6]
	msg->incompat_flags = 0;
 80082fe:	2000      	movs	r0, #0
	buf[1] = msg->len;
 8008300:	2201      	movs	r2, #1
	buf[0] = msg->magic;
 8008302:	f88c 3000 	strb.w	r3, [ip]
	buf[1] = msg->len;
 8008306:	f88c 2001 	strb.w	r2, [ip, #1]
	msg->incompat_flags = 0;
 800830a:	80a0      	strh	r0, [r4, #4]
	if (mavlink1) {
 800830c:	2900      	cmp	r1, #0
 800830e:	f000 8666 	beq.w	8008fde <mouseDriver_sendMsg+0x1cbe>
		buf[5] = msg->msgid & 0xFF;
 8008312:	2305      	movs	r3, #5
		buf[2] = msg->seq;
 8008314:	f88c 7002 	strb.w	r7, [ip, #2]
		buf[3] = msg->sysid;
 8008318:	f88c 0003 	strb.w	r0, [ip, #3]
		buf[4] = msg->compid;
 800831c:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->msgid & 0xFF;
 8008320:	f88c 3005 	strb.w	r3, [ip, #5]
 8008324:	f7ff ba82 	b.w	800782c <mouseDriver_sendMsg+0x50c>
		buf[7] = msg->msgid & 0xFF;
 8008328:	2706      	movs	r7, #6
		buf[2] = msg->incompat_flags;
 800832a:	f88c 9002 	strb.w	r9, [ip, #2]
		buf[3] = msg->compat_flags;
 800832e:	f88c 1003 	strb.w	r1, [ip, #3]
		buf[4] = msg->seq;
 8008332:	f88c 0004 	strb.w	r0, [ip, #4]
		buf[5] = msg->sysid;
 8008336:	f88c 1005 	strb.w	r1, [ip, #5]
		buf[6] = msg->compid;
 800833a:	f88c 1006 	strb.w	r1, [ip, #6]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800833e:	f88c 1008 	strb.w	r1, [ip, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8008342:	f88c 1009 	strb.w	r1, [ip, #9]
		buf[7] = msg->msgid & 0xFF;
 8008346:	f88c 7007 	strb.w	r7, [ip, #7]
 800834a:	f7ff b831 	b.w	80073b0 <mouseDriver_sendMsg+0x90>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800834e:	468e      	mov	lr, r1
 8008350:	f7ff b98d 	b.w	800766e <mouseDriver_sendMsg+0x34e>
		msg->magic = MAVLINK_STX;
 8008354:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008358:	f884 b002 	strb.w	fp, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 800835c:	460f      	mov	r7, r1
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	f43f a93f 	beq.w	80075e4 <mouseDriver_sendMsg+0x2c4>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8008366:	2305      	movs	r3, #5
	msg->compid = component_id;
 8008368:	4698      	mov	r8, r3
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800836a:	70e3      	strb	r3, [r4, #3]
	msg->compid = component_id;
 800836c:	469a      	mov	sl, r3
 800836e:	230a      	movs	r3, #10
 8008370:	9300      	str	r3, [sp, #0]
	msg->sysid = system_id;
 8008372:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 8008374:	7221      	strb	r1, [r4, #8]
 8008376:	2208      	movs	r2, #8
 8008378:	2304      	movs	r3, #4
 800837a:	e5a6      	b.n	8007eca <mouseDriver_sendMsg+0xbaa>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800837c:	468e      	mov	lr, r1
 800837e:	f7ff bae4 	b.w	800794a <mouseDriver_sendMsg+0x62a>
 8008382:	460f      	mov	r7, r1
 8008384:	f7ff b9d3 	b.w	800772e <mouseDriver_sendMsg+0x40e>
		msg->magic = MAVLINK_STX;
 8008388:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 800838c:	f884 b002 	strb.w	fp, [r4, #2]
	while (length > 1 && payload[length-1] == 0) {
 8008390:	460f      	mov	r7, r1
 8008392:	f1bc 0f00 	cmp.w	ip, #0
 8008396:	f43f a8dc 	beq.w	8007552 <mouseDriver_sendMsg+0x232>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800839a:	2305      	movs	r3, #5
	msg->compid = component_id;
 800839c:	469e      	mov	lr, r3
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800839e:	70e3      	strb	r3, [r4, #3]
	msg->compid = component_id;
 80083a0:	469a      	mov	sl, r3
 80083a2:	230a      	movs	r3, #10
 80083a4:	9300      	str	r3, [sp, #0]
	msg->sysid = system_id;
 80083a6:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 80083a8:	7221      	strb	r1, [r4, #8]
 80083aa:	2304      	movs	r3, #4
 80083ac:	2208      	movs	r2, #8
 80083ae:	e4d5      	b.n	8007d5c <mouseDriver_sendMsg+0xa3c>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80083b0:	468e      	mov	lr, r1
 80083b2:	f7ff bb38 	b.w	8007a26 <mouseDriver_sendMsg+0x706>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80083b6:	f240 13fd 	movw	r3, #509	; 0x1fd
	msg->sysid = system_id;
 80083ba:	71e1      	strb	r1, [r4, #7]
	msg->compid = component_id;
 80083bc:	7221      	strb	r1, [r4, #8]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80083be:	8063      	strh	r3, [r4, #2]
		msg->magic = MAVLINK_STX;
 80083c0:	23fd      	movs	r3, #253	; 0xfd
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80083c2:	f04f 0e0a 	mov.w	lr, #10
	msg->compid = component_id;
 80083c6:	2508      	movs	r5, #8
 80083c8:	e793      	b.n	80082f2 <mouseDriver_sendMsg+0xfd2>
		mavlink_sign_packet(status->signing,
 80083ca:	6930      	ldr	r0, [r6, #16]
 80083cc:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80083ce:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f43f ac19 	beq.w	8007c08 <mouseDriver_sendMsg+0x8e8>
 80083d6:	7803      	ldrb	r3, [r0, #0]
 80083d8:	07da      	lsls	r2, r3, #31
 80083da:	f57f ac15 	bpl.w	8007c08 <mouseDriver_sendMsg+0x8e8>
	signature[0] = signing->link_id;
 80083de:	7843      	ldrb	r3, [r0, #1]
 80083e0:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 80083e4:	68c3      	ldr	r3, [r0, #12]
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	6881      	ldr	r1, [r0, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 80083ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80083ee:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 80083f2:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 80083f6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80083fa:	f112 0801 	adds.w	r8, r2, #1
 80083fe:	f143 0900 	adc.w	r9, r3, #0
 8008402:	e9c0 8902 	strd	r8, r9, [r0, #8]
	memcpy(m->u.save_bytes + offset, p, l);
 8008406:	4686      	mov	lr, r0
    A = 0x6a09e667;
 8008408:	4eab      	ldr	r6, [pc, #684]	; (80086b8 <mouseDriver_sendMsg+0x1398>)
    B = 0xbb67ae85;
 800840a:	48ac      	ldr	r0, [pc, #688]	; (80086bc <mouseDriver_sendMsg+0x139c>)
    A = 0x6a09e667;
 800840c:	961f      	str	r6, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 800840e:	9020      	str	r0, [sp, #128]	; 0x80
    D = 0xa54ff53a;
 8008410:	4bab      	ldr	r3, [pc, #684]	; (80086c0 <mouseDriver_sendMsg+0x13a0>)
    E = 0x510e527f;
 8008412:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80086d4 <mouseDriver_sendMsg+0x13b4>
    F = 0x9b05688c;
 8008416:	4eab      	ldr	r6, [pc, #684]	; (80086c4 <mouseDriver_sendMsg+0x13a4>)
    G = 0x1f83d9ab;
 8008418:	48ab      	ldr	r0, [pc, #684]	; (80086c8 <mouseDriver_sendMsg+0x13a8>)
    D = 0xa54ff53a;
 800841a:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 800841c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
    m->sz[0] += len * 8;
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 8008424:	f04f 0800 	mov.w	r8, #0
    G = 0x1f83d9ab;
 8008428:	e9cd 6024 	strd	r6, r0, [sp, #144]	; 0x90
    m->sz[1] = 0;
 800842c:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    C = 0x3c6ef372;
 8008430:	4aa6      	ldr	r2, [pc, #664]	; (80086cc <mouseDriver_sendMsg+0x13ac>)
 8008432:	9221      	str	r2, [sp, #132]	; 0x84
    H = 0x5be0cd19;
 8008434:	4aa6      	ldr	r2, [pc, #664]	; (80086d0 <mouseDriver_sendMsg+0x13b0>)
 8008436:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 8008438:	f85e 0f10 	ldr.w	r0, [lr, #16]!
	tstamp.t64 = signing->timestamp;
 800843c:	9102      	str	r1, [sp, #8]
 800843e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008442:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008446:	f8de 300c 	ldr.w	r3, [lr, #12]
 800844a:	ae27      	add	r6, sp, #156	; 0x9c
 800844c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800844e:	f8de 0010 	ldr.w	r0, [lr, #16]
 8008452:	f8de 1014 	ldr.w	r1, [lr, #20]
 8008456:	f8de 2018 	ldr.w	r2, [lr, #24]
 800845a:	f8de 301c 	ldr.w	r3, [lr, #28]
 800845e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8008460:	4661      	mov	r1, ip
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	a81d      	add	r0, sp, #116	; 0x74
 8008466:	f7f8 f82f 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800846a:	463a      	mov	r2, r7
 800846c:	4629      	mov	r1, r5
 800846e:	a81d      	add	r0, sp, #116	; 0x74
 8008470:	f7f8 f82a 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8008474:	19e9      	adds	r1, r5, r7
 8008476:	a81d      	add	r0, sp, #116	; 0x74
 8008478:	2202      	movs	r2, #2
 800847a:	f7f8 f825 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800847e:	a81d      	add	r0, sp, #116	; 0x74
 8008480:	2207      	movs	r2, #7
 8008482:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008486:	f7f8 f81f 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800848a:	4641      	mov	r1, r8
    *zeros = 0x80;
 800848c:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800848e:	2247      	movs	r2, #71	; 0x47
 8008490:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008494:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 8008496:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800849a:	f005 fe9d 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800849e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 80084a0:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80084a4:	0e1a      	lsrs	r2, r3, #24
 80084a6:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80084aa:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80084ae:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 80084b0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80084b4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80084b8:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80084bc:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80084be:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80084c2:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80084c6:	f362 4817 	bfi	r8, r2, #16, #8
 80084ca:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80084ce:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80084d2:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80084d4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80084d8:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80084dc:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80084e0:	f106 0209 	add.w	r2, r6, #9
 80084e4:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80084e6:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80084ea:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80084ee:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80084f0:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80084f4:	f7f7 ffe8 	bl	80004c8 <mavlink_sha256_update>
 80084f8:	78e7      	ldrb	r7, [r4, #3]
 80084fa:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 80084fc:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008500:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008504:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 8008508:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 800850c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008510:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008514:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 8008518:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 800851c:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 8008520:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 8008524:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 8008528:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 800852c:	463e      	mov	r6, r7
 800852e:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008532:	f7ff bb69 	b.w	8007c08 <mouseDriver_sendMsg+0x8e8>
		mavlink_sign_packet(status->signing,
 8008536:	6935      	ldr	r5, [r6, #16]
 8008538:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800853a:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800853c:	b11d      	cbz	r5, 8008546 <mouseDriver_sendMsg+0x1226>
 800853e:	782b      	ldrb	r3, [r5, #0]
 8008540:	07da      	lsls	r2, r3, #31
 8008542:	f100 83cd 	bmi.w	8008ce0 <mouseDriver_sendMsg+0x19c0>
 8008546:	ad3a      	add	r5, sp, #232	; 0xe8
 8008548:	f7ff b9b2 	b.w	80078b0 <mouseDriver_sendMsg+0x590>
		mavlink_sign_packet(status->signing,
 800854c:	6930      	ldr	r0, [r6, #16]
 800854e:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8008550:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8008552:	2800      	cmp	r0, #0
 8008554:	f43f ae86 	beq.w	8008264 <mouseDriver_sendMsg+0xf44>
 8008558:	7803      	ldrb	r3, [r0, #0]
 800855a:	07db      	lsls	r3, r3, #31
 800855c:	f57f ae82 	bpl.w	8008264 <mouseDriver_sendMsg+0xf44>
	signature[0] = signing->link_id;
 8008560:	7843      	ldrb	r3, [r0, #1]
 8008562:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8008566:	68c3      	ldr	r3, [r0, #12]
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	6881      	ldr	r1, [r0, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 800856c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008570:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 8008574:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8008578:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800857c:	f112 0801 	adds.w	r8, r2, #1
 8008580:	f143 0900 	adc.w	r9, r3, #0
 8008584:	e9c0 8902 	strd	r8, r9, [r0, #8]
	memcpy(m->u.save_bytes + offset, p, l);
 8008588:	4686      	mov	lr, r0
    A = 0x6a09e667;
 800858a:	4e4b      	ldr	r6, [pc, #300]	; (80086b8 <mouseDriver_sendMsg+0x1398>)
    B = 0xbb67ae85;
 800858c:	484b      	ldr	r0, [pc, #300]	; (80086bc <mouseDriver_sendMsg+0x139c>)
    A = 0x6a09e667;
 800858e:	961f      	str	r6, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8008590:	9020      	str	r0, [sp, #128]	; 0x80
    D = 0xa54ff53a;
 8008592:	4b4b      	ldr	r3, [pc, #300]	; (80086c0 <mouseDriver_sendMsg+0x13a0>)
    E = 0x510e527f;
 8008594:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80086d4 <mouseDriver_sendMsg+0x13b4>
    F = 0x9b05688c;
 8008598:	4e4a      	ldr	r6, [pc, #296]	; (80086c4 <mouseDriver_sendMsg+0x13a4>)
    G = 0x1f83d9ab;
 800859a:	484b      	ldr	r0, [pc, #300]	; (80086c8 <mouseDriver_sendMsg+0x13a8>)
    D = 0xa54ff53a;
 800859c:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 800859e:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
    m->sz[0] += len * 8;
 80085a2:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 80085a6:	f04f 0800 	mov.w	r8, #0
    G = 0x1f83d9ab;
 80085aa:	e9cd 6024 	strd	r6, r0, [sp, #144]	; 0x90
    m->sz[1] = 0;
 80085ae:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    C = 0x3c6ef372;
 80085b2:	4a46      	ldr	r2, [pc, #280]	; (80086cc <mouseDriver_sendMsg+0x13ac>)
 80085b4:	9221      	str	r2, [sp, #132]	; 0x84
    H = 0x5be0cd19;
 80085b6:	4a46      	ldr	r2, [pc, #280]	; (80086d0 <mouseDriver_sendMsg+0x13b0>)
 80085b8:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 80085ba:	f85e 0f10 	ldr.w	r0, [lr, #16]!
	tstamp.t64 = signing->timestamp;
 80085be:	9102      	str	r1, [sp, #8]
 80085c0:	f8de 2008 	ldr.w	r2, [lr, #8]
 80085c4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80085c8:	f8de 300c 	ldr.w	r3, [lr, #12]
 80085cc:	ae27      	add	r6, sp, #156	; 0x9c
 80085ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80085d0:	f8de 0010 	ldr.w	r0, [lr, #16]
 80085d4:	f8de 1014 	ldr.w	r1, [lr, #20]
 80085d8:	f8de 2018 	ldr.w	r2, [lr, #24]
 80085dc:	f8de 301c 	ldr.w	r3, [lr, #28]
 80085e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 80085e2:	4661      	mov	r1, ip
 80085e4:	9a00      	ldr	r2, [sp, #0]
 80085e6:	a81d      	add	r0, sp, #116	; 0x74
 80085e8:	f7f7 ff6e 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80085ec:	463a      	mov	r2, r7
 80085ee:	4629      	mov	r1, r5
 80085f0:	a81d      	add	r0, sp, #116	; 0x74
 80085f2:	f7f7 ff69 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80085f6:	19e9      	adds	r1, r5, r7
 80085f8:	a81d      	add	r0, sp, #116	; 0x74
 80085fa:	2202      	movs	r2, #2
 80085fc:	f7f7 ff64 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8008600:	a81d      	add	r0, sp, #116	; 0x74
 8008602:	2207      	movs	r2, #7
 8008604:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008608:	f7f7 ff5e 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800860c:	4641      	mov	r1, r8
    *zeros = 0x80;
 800860e:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008610:	2247      	movs	r2, #71	; 0x47
 8008612:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008616:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 8008618:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800861c:	f005 fddc 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008620:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 8008622:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008626:	0e1a      	lsrs	r2, r3, #24
 8008628:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800862c:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008630:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 8008632:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008636:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800863a:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800863e:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008640:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008644:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008648:	f362 4817 	bfi	r8, r2, #16, #8
 800864c:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008650:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008654:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008656:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800865a:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800865e:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008662:	f106 0209 	add.w	r2, r6, #9
 8008666:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008668:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800866c:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008670:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008672:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008676:	f7f7 ff27 	bl	80004c8 <mavlink_sha256_update>
 800867a:	78e7      	ldrb	r7, [r4, #3]
 800867c:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 800867e:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008682:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008686:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 800868a:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 800868e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008692:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008696:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 800869a:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 800869e:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 80086a2:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 80086a6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 80086aa:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 80086ae:	463e      	mov	r6, r7
 80086b0:	ea4f 2911 	mov.w	r9, r1, lsr #8
 80086b4:	e5d6      	b.n	8008264 <mouseDriver_sendMsg+0xf44>
 80086b6:	bf00      	nop
 80086b8:	6a09e667 	.word	0x6a09e667
 80086bc:	bb67ae85 	.word	0xbb67ae85
 80086c0:	a54ff53a 	.word	0xa54ff53a
 80086c4:	9b05688c 	.word	0x9b05688c
 80086c8:	1f83d9ab 	.word	0x1f83d9ab
 80086cc:	3c6ef372 	.word	0x3c6ef372
 80086d0:	5be0cd19 	.word	0x5be0cd19
 80086d4:	510e527f 	.word	0x510e527f
		mavlink_sign_packet(status->signing,
 80086d8:	6930      	ldr	r0, [r6, #16]
 80086da:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80086dc:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80086de:	2800      	cmp	r0, #0
 80086e0:	f43f ad0e 	beq.w	8008100 <mouseDriver_sendMsg+0xde0>
 80086e4:	7803      	ldrb	r3, [r0, #0]
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	f57f ad0a 	bpl.w	8008100 <mouseDriver_sendMsg+0xde0>
	signature[0] = signing->link_id;
 80086ec:	7843      	ldrb	r3, [r0, #1]
 80086ee:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 80086f2:	68c3      	ldr	r3, [r0, #12]
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	6881      	ldr	r1, [r0, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 80086f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80086fc:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 8008700:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8008704:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008708:	f112 0801 	adds.w	r8, r2, #1
 800870c:	f143 0900 	adc.w	r9, r3, #0
 8008710:	e9c0 8902 	strd	r8, r9, [r0, #8]
	memcpy(m->u.save_bytes + offset, p, l);
 8008714:	4686      	mov	lr, r0
    A = 0x6a09e667;
 8008716:	4ea9      	ldr	r6, [pc, #676]	; (80089bc <mouseDriver_sendMsg+0x169c>)
    B = 0xbb67ae85;
 8008718:	48a9      	ldr	r0, [pc, #676]	; (80089c0 <mouseDriver_sendMsg+0x16a0>)
    A = 0x6a09e667;
 800871a:	961f      	str	r6, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 800871c:	9020      	str	r0, [sp, #128]	; 0x80
    D = 0xa54ff53a;
 800871e:	4ba9      	ldr	r3, [pc, #676]	; (80089c4 <mouseDriver_sendMsg+0x16a4>)
    E = 0x510e527f;
 8008720:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80089d8 <mouseDriver_sendMsg+0x16b8>
    F = 0x9b05688c;
 8008724:	4ea8      	ldr	r6, [pc, #672]	; (80089c8 <mouseDriver_sendMsg+0x16a8>)
    G = 0x1f83d9ab;
 8008726:	48a9      	ldr	r0, [pc, #676]	; (80089cc <mouseDriver_sendMsg+0x16ac>)
    D = 0xa54ff53a;
 8008728:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 800872a:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
    m->sz[0] += len * 8;
 800872e:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 8008732:	f04f 0800 	mov.w	r8, #0
    G = 0x1f83d9ab;
 8008736:	e9cd 6024 	strd	r6, r0, [sp, #144]	; 0x90
    m->sz[1] = 0;
 800873a:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    C = 0x3c6ef372;
 800873e:	4aa4      	ldr	r2, [pc, #656]	; (80089d0 <mouseDriver_sendMsg+0x16b0>)
 8008740:	9221      	str	r2, [sp, #132]	; 0x84
    H = 0x5be0cd19;
 8008742:	4aa4      	ldr	r2, [pc, #656]	; (80089d4 <mouseDriver_sendMsg+0x16b4>)
 8008744:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 8008746:	f85e 0f10 	ldr.w	r0, [lr, #16]!
	tstamp.t64 = signing->timestamp;
 800874a:	9102      	str	r1, [sp, #8]
 800874c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008750:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008754:	f8de 300c 	ldr.w	r3, [lr, #12]
 8008758:	ae27      	add	r6, sp, #156	; 0x9c
 800875a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800875c:	f8de 0010 	ldr.w	r0, [lr, #16]
 8008760:	f8de 1014 	ldr.w	r1, [lr, #20]
 8008764:	f8de 2018 	ldr.w	r2, [lr, #24]
 8008768:	f8de 301c 	ldr.w	r3, [lr, #28]
 800876c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 800876e:	4661      	mov	r1, ip
 8008770:	9a00      	ldr	r2, [sp, #0]
 8008772:	a81d      	add	r0, sp, #116	; 0x74
 8008774:	f7f7 fea8 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8008778:	463a      	mov	r2, r7
 800877a:	4629      	mov	r1, r5
 800877c:	a81d      	add	r0, sp, #116	; 0x74
 800877e:	f7f7 fea3 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8008782:	19e9      	adds	r1, r5, r7
 8008784:	a81d      	add	r0, sp, #116	; 0x74
 8008786:	2202      	movs	r2, #2
 8008788:	f7f7 fe9e 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800878c:	a81d      	add	r0, sp, #116	; 0x74
 800878e:	2207      	movs	r2, #7
 8008790:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008794:	f7f7 fe98 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008798:	4641      	mov	r1, r8
    *zeros = 0x80;
 800879a:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800879c:	2247      	movs	r2, #71	; 0x47
 800879e:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 80087a2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 80087a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80087a8:	f005 fd16 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80087ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 80087ae:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80087b2:	0e1a      	lsrs	r2, r3, #24
 80087b4:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80087b8:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80087bc:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 80087be:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80087c2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80087c6:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80087ca:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80087cc:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80087d0:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80087d4:	f362 4817 	bfi	r8, r2, #16, #8
 80087d8:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80087dc:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80087e0:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80087e2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80087e6:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80087ea:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80087ee:	f106 0209 	add.w	r2, r6, #9
 80087f2:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80087f4:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80087f8:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80087fc:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80087fe:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008802:	f7f7 fe61 	bl	80004c8 <mavlink_sha256_update>
 8008806:	78e7      	ldrb	r7, [r4, #3]
 8008808:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 800880a:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 800880e:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008812:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 8008816:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 800881a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 800881e:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008822:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 8008826:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 800882a:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 800882e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 8008832:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 8008836:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 800883a:	463e      	mov	r6, r7
 800883c:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008840:	e45e      	b.n	8008100 <mouseDriver_sendMsg+0xde0>
		mavlink_sign_packet(status->signing,
 8008842:	6930      	ldr	r0, [r6, #16]
 8008844:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8008846:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8008848:	2800      	cmp	r0, #0
 800884a:	f43f aba6 	beq.w	8007f9a <mouseDriver_sendMsg+0xc7a>
 800884e:	7803      	ldrb	r3, [r0, #0]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	f57f aba2 	bpl.w	8007f9a <mouseDriver_sendMsg+0xc7a>
	signature[0] = signing->link_id;
 8008856:	7843      	ldrb	r3, [r0, #1]
 8008858:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 800885c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8008860:	9305      	str	r3, [sp, #20]
	memcpy(&signature[1], tstamp.t8, 6);
 8008862:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008866:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 800886a:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 800886e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008872:	f112 0801 	adds.w	r8, r2, #1
 8008876:	f143 0900 	adc.w	r9, r3, #0
    A = 0x6a09e667;
 800887a:	4a50      	ldr	r2, [pc, #320]	; (80089bc <mouseDriver_sendMsg+0x169c>)
	tstamp.t64 = signing->timestamp;
 800887c:	9104      	str	r1, [sp, #16]
	memcpy(m->u.save_bytes + offset, p, l);
 800887e:	4686      	mov	lr, r0
	signing->timestamp++;
 8008880:	e9c0 8902 	strd	r8, r9, [r0, #8]
    B = 0xbb67ae85;
 8008884:	4b4e      	ldr	r3, [pc, #312]	; (80089c0 <mouseDriver_sendMsg+0x16a0>)
    C = 0x3c6ef372;
 8008886:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80089d0 <mouseDriver_sendMsg+0x16b0>
    D = 0xa54ff53a;
 800888a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80089c4 <mouseDriver_sendMsg+0x16a4>
    E = 0x510e527f;
 800888e:	4e52      	ldr	r6, [pc, #328]	; (80089d8 <mouseDriver_sendMsg+0x16b8>)
    F = 0x9b05688c;
 8008890:	484d      	ldr	r0, [pc, #308]	; (80089c8 <mouseDriver_sendMsg+0x16a8>)
    G = 0x1f83d9ab;
 8008892:	494e      	ldr	r1, [pc, #312]	; (80089cc <mouseDriver_sendMsg+0x16ac>)
    A = 0x6a09e667;
 8008894:	921f      	str	r2, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8008896:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8008898:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
    m->sz[0] += len * 8;
 800889c:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 80088a0:	f04f 0800 	mov.w	r8, #0
    H = 0x5be0cd19;
 80088a4:	f1a2 6262 	sub.w	r2, r2, #236978176	; 0xe200000
    E = 0x510e527f;
 80088a8:	e9cd 9622 	strd	r9, r6, [sp, #136]	; 0x88
    m->sz[1] = 0;
 80088ac:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    G = 0x1f83d9ab;
 80088b0:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
    H = 0x5be0cd19;
 80088b4:	f5a2 2211 	sub.w	r2, r2, #593920	; 0x91000
 80088b8:	f6a2 124e 	subw	r2, r2, #2382	; 0x94e
 80088bc:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 80088be:	f85e 0f10 	ldr.w	r0, [lr, #16]!
 80088c2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80088c6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80088ca:	f8de 300c 	ldr.w	r3, [lr, #12]
 80088ce:	ae27      	add	r6, sp, #156	; 0x9c
 80088d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80088d2:	f8de 0010 	ldr.w	r0, [lr, #16]
 80088d6:	f8de 1014 	ldr.w	r1, [lr, #20]
 80088da:	f8de 2018 	ldr.w	r2, [lr, #24]
 80088de:	f8de 301c 	ldr.w	r3, [lr, #28]
 80088e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 80088e4:	4661      	mov	r1, ip
 80088e6:	9a00      	ldr	r2, [sp, #0]
 80088e8:	a81d      	add	r0, sp, #116	; 0x74
 80088ea:	f7f7 fded 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80088ee:	463a      	mov	r2, r7
 80088f0:	4629      	mov	r1, r5
 80088f2:	a81d      	add	r0, sp, #116	; 0x74
 80088f4:	f7f7 fde8 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80088f8:	19e9      	adds	r1, r5, r7
 80088fa:	a81d      	add	r0, sp, #116	; 0x74
 80088fc:	2202      	movs	r2, #2
 80088fe:	f7f7 fde3 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8008902:	a81d      	add	r0, sp, #116	; 0x74
 8008904:	2207      	movs	r2, #7
 8008906:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 800890a:	f7f7 fddd 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800890e:	4641      	mov	r1, r8
    *zeros = 0x80;
 8008910:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008912:	2247      	movs	r2, #71	; 0x47
 8008914:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008918:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 800891a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800891e:	f005 fc5b 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008922:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 8008924:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008928:	0e13      	lsrs	r3, r2, #24
 800892a:	f363 0807 	bfi	r8, r3, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800892e:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008932:	0c13      	lsrs	r3, r2, #16
    *zeros = 0x80;
 8008934:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008938:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800893c:	f363 280f 	bfi	r8, r3, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8008940:	0a13      	lsrs	r3, r2, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008942:	f106 0c01 	add.w	ip, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008946:	f363 4817 	bfi	r8, r3, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800894a:	eb09 0306 	add.w	r3, r9, r6
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800894e:	ea4f 6e17 	mov.w	lr, r7, lsr #24
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008952:	f362 681f 	bfi	r8, r2, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008956:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800895a:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800895e:	721f      	strb	r7, [r3, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008960:	f883 e005 	strb.w	lr, [r3, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008964:	f106 0209 	add.w	r2, r6, #9
 8008968:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800896a:	f883 b007 	strb.w	fp, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800896e:	f883 a006 	strb.w	sl, [r3, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008972:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008974:	f849 800c 	str.w	r8, [r9, ip]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008978:	f7f7 fda6 	bl	80004c8 <mavlink_sha256_update>
 800897c:	78e7      	ldrb	r7, [r4, #3]
 800897e:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 8008980:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008984:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008988:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 800898c:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 8008990:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008994:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008998:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 800899c:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 80089a0:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 80089a4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 80089a8:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 80089ac:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 80089b0:	463e      	mov	r6, r7
 80089b2:	ea4f 2911 	mov.w	r9, r1, lsr #8
 80089b6:	f7ff baf0 	b.w	8007f9a <mouseDriver_sendMsg+0xc7a>
 80089ba:	bf00      	nop
 80089bc:	6a09e667 	.word	0x6a09e667
 80089c0:	bb67ae85 	.word	0xbb67ae85
 80089c4:	a54ff53a 	.word	0xa54ff53a
 80089c8:	9b05688c 	.word	0x9b05688c
 80089cc:	1f83d9ab 	.word	0x1f83d9ab
 80089d0:	3c6ef372 	.word	0x3c6ef372
 80089d4:	5be0cd19 	.word	0x5be0cd19
 80089d8:	510e527f 	.word	0x510e527f
		mavlink_sign_packet(status->signing,
 80089dc:	6930      	ldr	r0, [r6, #16]
 80089de:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80089e0:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f43f aa23 	beq.w	8007e2e <mouseDriver_sendMsg+0xb0e>
 80089e8:	7803      	ldrb	r3, [r0, #0]
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	f57f aa1f 	bpl.w	8007e2e <mouseDriver_sendMsg+0xb0e>
	signature[0] = signing->link_id;
 80089f0:	7843      	ldrb	r3, [r0, #1]
 80089f2:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 80089f6:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80089fa:	9305      	str	r3, [sp, #20]
	memcpy(&signature[1], tstamp.t8, 6);
 80089fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008a00:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 8008a04:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8008a08:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008a0c:	f112 0801 	adds.w	r8, r2, #1
 8008a10:	f143 0900 	adc.w	r9, r3, #0
    A = 0x6a09e667;
 8008a14:	4aaa      	ldr	r2, [pc, #680]	; (8008cc0 <mouseDriver_sendMsg+0x19a0>)
	tstamp.t64 = signing->timestamp;
 8008a16:	9104      	str	r1, [sp, #16]
	memcpy(m->u.save_bytes + offset, p, l);
 8008a18:	4686      	mov	lr, r0
	signing->timestamp++;
 8008a1a:	e9c0 8902 	strd	r8, r9, [r0, #8]
    B = 0xbb67ae85;
 8008a1e:	4ba9      	ldr	r3, [pc, #676]	; (8008cc4 <mouseDriver_sendMsg+0x19a4>)
    C = 0x3c6ef372;
 8008a20:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8008cd8 <mouseDriver_sendMsg+0x19b8>
    D = 0xa54ff53a;
 8008a24:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8008cd4 <mouseDriver_sendMsg+0x19b4>
    E = 0x510e527f;
 8008a28:	4ea7      	ldr	r6, [pc, #668]	; (8008cc8 <mouseDriver_sendMsg+0x19a8>)
    F = 0x9b05688c;
 8008a2a:	48a8      	ldr	r0, [pc, #672]	; (8008ccc <mouseDriver_sendMsg+0x19ac>)
    G = 0x1f83d9ab;
 8008a2c:	49a8      	ldr	r1, [pc, #672]	; (8008cd0 <mouseDriver_sendMsg+0x19b0>)
    A = 0x6a09e667;
 8008a2e:	921f      	str	r2, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8008a30:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8008a32:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
    m->sz[0] += len * 8;
 8008a36:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 8008a3a:	f04f 0800 	mov.w	r8, #0
    H = 0x5be0cd19;
 8008a3e:	f1a2 6262 	sub.w	r2, r2, #236978176	; 0xe200000
    E = 0x510e527f;
 8008a42:	e9cd 9622 	strd	r9, r6, [sp, #136]	; 0x88
    m->sz[1] = 0;
 8008a46:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    G = 0x1f83d9ab;
 8008a4a:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
    H = 0x5be0cd19;
 8008a4e:	f5a2 2211 	sub.w	r2, r2, #593920	; 0x91000
 8008a52:	f6a2 124e 	subw	r2, r2, #2382	; 0x94e
 8008a56:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 8008a58:	f85e 0f10 	ldr.w	r0, [lr, #16]!
 8008a5c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008a60:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008a64:	f8de 300c 	ldr.w	r3, [lr, #12]
 8008a68:	ae27      	add	r6, sp, #156	; 0x9c
 8008a6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008a6c:	f8de 0010 	ldr.w	r0, [lr, #16]
 8008a70:	f8de 1014 	ldr.w	r1, [lr, #20]
 8008a74:	f8de 2018 	ldr.w	r2, [lr, #24]
 8008a78:	f8de 301c 	ldr.w	r3, [lr, #28]
 8008a7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8008a7e:	4661      	mov	r1, ip
 8008a80:	9a00      	ldr	r2, [sp, #0]
 8008a82:	a81d      	add	r0, sp, #116	; 0x74
 8008a84:	f7f7 fd20 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	a81d      	add	r0, sp, #116	; 0x74
 8008a8e:	f7f7 fd1b 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8008a92:	19e9      	adds	r1, r5, r7
 8008a94:	a81d      	add	r0, sp, #116	; 0x74
 8008a96:	2202      	movs	r2, #2
 8008a98:	f7f7 fd16 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8008a9c:	a81d      	add	r0, sp, #116	; 0x74
 8008a9e:	2207      	movs	r2, #7
 8008aa0:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008aa4:	f7f7 fd10 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008aa8:	4641      	mov	r1, r8
    *zeros = 0x80;
 8008aaa:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008aac:	2247      	movs	r2, #71	; 0x47
 8008aae:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008ab2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 8008ab4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008ab8:	f005 fb8e 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008abc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 8008abe:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008ac2:	0e1a      	lsrs	r2, r3, #24
 8008ac4:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008ac8:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008acc:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 8008ace:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008ad2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008ad6:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8008ada:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008adc:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008ae0:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008ae4:	f362 4817 	bfi	r8, r2, #16, #8
 8008ae8:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008aec:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008af0:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008af2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008af6:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008afa:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008afe:	f106 0209 	add.w	r2, r6, #9
 8008b02:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008b04:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008b08:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008b0c:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008b0e:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008b12:	f7f7 fcd9 	bl	80004c8 <mavlink_sha256_update>
 8008b16:	78e7      	ldrb	r7, [r4, #3]
 8008b18:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 8008b1a:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008b1e:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008b22:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 8008b26:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 8008b2a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008b2e:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008b32:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 8008b36:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 8008b3a:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 8008b3e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 8008b42:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 8008b46:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 8008b4a:	463e      	mov	r6, r7
 8008b4c:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008b50:	f7ff b96d 	b.w	8007e2e <mouseDriver_sendMsg+0xb0e>
		mavlink_sign_packet(status->signing,
 8008b54:	6930      	ldr	r0, [r6, #16]
 8008b56:	78e7      	ldrb	r7, [r4, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8008b58:	463e      	mov	r6, r7
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f43e ac6f 	beq.w	800743e <mouseDriver_sendMsg+0x11e>
 8008b60:	7803      	ldrb	r3, [r0, #0]
 8008b62:	07db      	lsls	r3, r3, #31
 8008b64:	f57e ac6b 	bpl.w	800743e <mouseDriver_sendMsg+0x11e>
	signature[0] = signing->link_id;
 8008b68:	7843      	ldrb	r3, [r0, #1]
 8008b6a:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8008b6e:	68c3      	ldr	r3, [r0, #12]
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	6881      	ldr	r1, [r0, #8]
	memcpy(&signature[1], tstamp.t8, 6);
 8008b74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008b78:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 8008b7c:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8008b80:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008b84:	f112 0801 	adds.w	r8, r2, #1
 8008b88:	f143 0900 	adc.w	r9, r3, #0
 8008b8c:	e9c0 8902 	strd	r8, r9, [r0, #8]
	memcpy(m->u.save_bytes + offset, p, l);
 8008b90:	4686      	mov	lr, r0
    A = 0x6a09e667;
 8008b92:	4e4b      	ldr	r6, [pc, #300]	; (8008cc0 <mouseDriver_sendMsg+0x19a0>)
    B = 0xbb67ae85;
 8008b94:	484b      	ldr	r0, [pc, #300]	; (8008cc4 <mouseDriver_sendMsg+0x19a4>)
    A = 0x6a09e667;
 8008b96:	961f      	str	r6, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8008b98:	9020      	str	r0, [sp, #128]	; 0x80
    D = 0xa54ff53a;
 8008b9a:	4b4e      	ldr	r3, [pc, #312]	; (8008cd4 <mouseDriver_sendMsg+0x19b4>)
    E = 0x510e527f;
 8008b9c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8008cc8 <mouseDriver_sendMsg+0x19a8>
    F = 0x9b05688c;
 8008ba0:	4e4a      	ldr	r6, [pc, #296]	; (8008ccc <mouseDriver_sendMsg+0x19ac>)
    G = 0x1f83d9ab;
 8008ba2:	484b      	ldr	r0, [pc, #300]	; (8008cd0 <mouseDriver_sendMsg+0x19b0>)
    D = 0xa54ff53a;
 8008ba4:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8008ba6:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
    m->sz[0] += len * 8;
 8008baa:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 8008bae:	f04f 0800 	mov.w	r8, #0
    G = 0x1f83d9ab;
 8008bb2:	e9cd 6024 	strd	r6, r0, [sp, #144]	; 0x90
    m->sz[1] = 0;
 8008bb6:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    C = 0x3c6ef372;
 8008bba:	4a47      	ldr	r2, [pc, #284]	; (8008cd8 <mouseDriver_sendMsg+0x19b8>)
 8008bbc:	9221      	str	r2, [sp, #132]	; 0x84
    H = 0x5be0cd19;
 8008bbe:	4a47      	ldr	r2, [pc, #284]	; (8008cdc <mouseDriver_sendMsg+0x19bc>)
 8008bc0:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 8008bc2:	f85e 0f10 	ldr.w	r0, [lr, #16]!
	tstamp.t64 = signing->timestamp;
 8008bc6:	9102      	str	r1, [sp, #8]
 8008bc8:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008bcc:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008bd0:	f8de 300c 	ldr.w	r3, [lr, #12]
 8008bd4:	ae27      	add	r6, sp, #156	; 0x9c
 8008bd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008bd8:	f8de 0010 	ldr.w	r0, [lr, #16]
 8008bdc:	f8de 1014 	ldr.w	r1, [lr, #20]
 8008be0:	f8de 2018 	ldr.w	r2, [lr, #24]
 8008be4:	f8de 301c 	ldr.w	r3, [lr, #28]
 8008be8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8008bea:	4661      	mov	r1, ip
 8008bec:	9a00      	ldr	r2, [sp, #0]
 8008bee:	a81d      	add	r0, sp, #116	; 0x74
 8008bf0:	f7f7 fc6a 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	a81d      	add	r0, sp, #116	; 0x74
 8008bfa:	f7f7 fc65 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8008bfe:	19e9      	adds	r1, r5, r7
 8008c00:	a81d      	add	r0, sp, #116	; 0x74
 8008c02:	2202      	movs	r2, #2
 8008c04:	f7f7 fc60 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8008c08:	a81d      	add	r0, sp, #116	; 0x74
 8008c0a:	2207      	movs	r2, #7
 8008c0c:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008c10:	f7f7 fc5a 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008c14:	4641      	mov	r1, r8
    *zeros = 0x80;
 8008c16:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008c18:	2247      	movs	r2, #71	; 0x47
 8008c1a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008c1e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 8008c20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008c24:	f005 fad8 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008c28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 8008c2a:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008c2e:	0e1a      	lsrs	r2, r3, #24
 8008c30:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008c34:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008c38:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 8008c3a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008c3e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008c42:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8008c46:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008c48:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008c4c:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008c50:	f362 4817 	bfi	r8, r2, #16, #8
 8008c54:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008c58:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008c5c:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008c5e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008c62:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008c66:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008c6a:	f106 0209 	add.w	r2, r6, #9
 8008c6e:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008c70:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008c74:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008c78:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008c7a:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008c7e:	f7f7 fc23 	bl	80004c8 <mavlink_sha256_update>
 8008c82:	78e7      	ldrb	r7, [r4, #3]
 8008c84:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 8008c86:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008c8a:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008c8e:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 8008c92:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 8008c96:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008c9a:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008c9e:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 8008ca2:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 8008ca6:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 8008caa:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 8008cae:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 8008cb2:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 8008cb6:	463e      	mov	r6, r7
 8008cb8:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008cbc:	f7fe bbbf 	b.w	800743e <mouseDriver_sendMsg+0x11e>
 8008cc0:	6a09e667 	.word	0x6a09e667
 8008cc4:	bb67ae85 	.word	0xbb67ae85
 8008cc8:	510e527f 	.word	0x510e527f
 8008ccc:	9b05688c 	.word	0x9b05688c
 8008cd0:	1f83d9ab 	.word	0x1f83d9ab
 8008cd4:	a54ff53a 	.word	0xa54ff53a
 8008cd8:	3c6ef372 	.word	0x3c6ef372
 8008cdc:	5be0cd19 	.word	0x5be0cd19
	signature[0] = signing->link_id;
 8008ce0:	786b      	ldrb	r3, [r5, #1]
 8008ce2:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	tstamp.t64 = signing->timestamp;
 8008ce6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008cea:	9305      	str	r3, [sp, #20]
	memcpy(&signature[1], tstamp.t8, 6);
 8008cec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008cf0:	f8cd 11f3 	str.w	r1, [sp, #499]	; 0x1f3
 8008cf4:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8008cf8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8008cfc:	f112 0801 	adds.w	r8, r2, #1
 8008d00:	f143 0900 	adc.w	r9, r3, #0
    A = 0x6a09e667;
 8008d04:	4ac2      	ldr	r2, [pc, #776]	; (8009010 <mouseDriver_sendMsg+0x1cf0>)
	tstamp.t64 = signing->timestamp;
 8008d06:	9104      	str	r1, [sp, #16]
    B = 0xbb67ae85;
 8008d08:	4bc2      	ldr	r3, [pc, #776]	; (8009014 <mouseDriver_sendMsg+0x1cf4>)
    E = 0x510e527f;
 8008d0a:	4ec3      	ldr	r6, [pc, #780]	; (8009018 <mouseDriver_sendMsg+0x1cf8>)
    F = 0x9b05688c;
 8008d0c:	48c3      	ldr	r0, [pc, #780]	; (800901c <mouseDriver_sendMsg+0x1cfc>)
    G = 0x1f83d9ab;
 8008d0e:	49c4      	ldr	r1, [pc, #784]	; (8009020 <mouseDriver_sendMsg+0x1d00>)
	signing->timestamp++;
 8008d10:	e9c5 8902 	strd	r8, r9, [r5, #8]
    C = 0x3c6ef372;
 8008d14:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8009024 <mouseDriver_sendMsg+0x1d04>
    D = 0xa54ff53a;
 8008d18:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8009028 <mouseDriver_sendMsg+0x1d08>
    A = 0x6a09e667;
 8008d1c:	921f      	str	r2, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8008d1e:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8008d20:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
    m->sz[0] += len * 8;
 8008d24:	f44f 7380 	mov.w	r3, #256	; 0x100
    m->sz[1] = 0;
 8008d28:	f04f 0800 	mov.w	r8, #0
    H = 0x5be0cd19;
 8008d2c:	f1a2 6262 	sub.w	r2, r2, #236978176	; 0xe200000
    E = 0x510e527f;
 8008d30:	e9cd 9622 	strd	r9, r6, [sp, #136]	; 0x88
    m->sz[1] = 0;
 8008d34:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
    G = 0x1f83d9ab;
 8008d38:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
    H = 0x5be0cd19;
 8008d3c:	f5a2 2211 	sub.w	r2, r2, #593920	; 0x91000
 8008d40:	f6a2 124e 	subw	r2, r2, #2382	; 0x94e
 8008d44:	9226      	str	r2, [sp, #152]	; 0x98
	memcpy(m->u.save_bytes + offset, p, l);
 8008d46:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8008d4a:	6869      	ldr	r1, [r5, #4]
 8008d4c:	68aa      	ldr	r2, [r5, #8]
 8008d4e:	68eb      	ldr	r3, [r5, #12]
 8008d50:	ae27      	add	r6, sp, #156	; 0x9c
 8008d52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008d54:	6928      	ldr	r0, [r5, #16]
 8008d56:	6969      	ldr	r1, [r5, #20]
 8008d58:	69aa      	ldr	r2, [r5, #24]
 8008d5a:	69eb      	ldr	r3, [r5, #28]
	mavlink_sha256_update(&ctx, packet, packet_len);
 8008d5c:	ad3a      	add	r5, sp, #232	; 0xe8
 8008d5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8008d60:	4672      	mov	r2, lr
 8008d62:	4661      	mov	r1, ip
 8008d64:	a81d      	add	r0, sp, #116	; 0x74
 8008d66:	f7f7 fbaf 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	a81d      	add	r0, sp, #116	; 0x74
 8008d6e:	4629      	mov	r1, r5
 8008d70:	f7f7 fbaa 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8008d74:	19e9      	adds	r1, r5, r7
 8008d76:	a81d      	add	r0, sp, #116	; 0x74
 8008d78:	2202      	movs	r2, #2
 8008d7a:	f7f7 fba5 	bl	80004c8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8008d7e:	a81d      	add	r0, sp, #116	; 0x74
 8008d80:	2207      	movs	r2, #7
 8008d82:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8008d86:	f7f7 fb9f 	bl	80004c8 <mavlink_sha256_update>
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008d8a:	4641      	mov	r1, r8
    *zeros = 0x80;
 8008d8c:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008d8e:	2247      	movs	r2, #71	; 0x47
 8008d90:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    unsigned offset = (m->sz[0] / 8) % 64;
 8008d94:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    *zeros = 0x80;
 8008d96:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8008d9a:	f005 fa1d 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8008d9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned offset = (m->sz[0] / 8) % 64;
 8008da0:	f3c7 06c5 	ubfx	r6, r7, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008da4:	0e1a      	lsrs	r2, r3, #24
 8008da6:	f362 0807 	bfi	r8, r2, #0, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008daa:	f1c6 0677 	rsb	r6, r6, #119	; 0x77
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8008dae:	0c1a      	lsrs	r2, r3, #16
    *zeros = 0x80;
 8008db0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008db4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008db8:	f362 280f 	bfi	r8, r2, #8, #8
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8008dbc:	0a1a      	lsrs	r2, r3, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008dbe:	eb09 0c06 	add.w	ip, r9, r6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8008dc2:	f106 0e01 	add.w	lr, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008dc6:	f362 4817 	bfi	r8, r2, #16, #8
 8008dca:	f363 681f 	bfi	r8, r3, #24, #8
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008dce:	ea4f 2b17 	mov.w	fp, r7, lsr #8
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008dd2:	0e3b      	lsrs	r3, r7, #24
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008dd4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8008dd8:	f88c 7008 	strb.w	r7, [ip, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8008ddc:	f88c 3005 	strb.w	r3, [ip, #5]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008de0:	f106 0209 	add.w	r2, r6, #9
 8008de4:	4649      	mov	r1, r9
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8008de6:	f88c b007 	strb.w	fp, [ip, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8008dea:	f88c a006 	strb.w	sl, [ip, #6]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008dee:	a81d      	add	r0, sp, #116	; 0x74
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8008df0:	f849 800e 	str.w	r8, [r9, lr]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8008df4:	f7f7 fb68 	bl	80004c8 <mavlink_sha256_update>
 8008df8:	78e7      	ldrb	r7, [r4, #3]
 8008dfa:	8821      	ldrh	r1, [r4, #0]
    result[2] = p[1];
 8008dfc:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
    result[0] = p[3];
 8008e00:	f89d e07f 	ldrb.w	lr, [sp, #127]	; 0x7f
    result[1] = p[2];
 8008e04:	f89d c07e 	ldrb.w	ip, [sp, #126]	; 0x7e
    result[3] = p[0];
 8008e08:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    result[4] = p[7];
 8008e0c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    result[5] = p[6];
 8008e10:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
    result[2] = p[1];
 8008e14:	f884 611f 	strb.w	r6, [r4, #287]	; 0x11f
    result[0] = p[3];
 8008e18:	f884 e11d 	strb.w	lr, [r4, #285]	; 0x11d
    result[1] = p[2];
 8008e1c:	f884 c11e 	strb.w	ip, [r4, #286]	; 0x11e
    result[3] = p[0];
 8008e20:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    result[4] = p[7];
 8008e24:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    result[5] = p[6];
 8008e28:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8008e32:	f7fe bd3d 	b.w	80078b0 <mouseDriver_sendMsg+0x590>
		length--;
 8008e36:	f04f 0e07 	mov.w	lr, #7
	while (length > 1 && payload[length-1] == 0) {
 8008e3a:	46f2      	mov	sl, lr
 8008e3c:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f7fe bc95 	b.w	8007770 <mouseDriver_sendMsg+0x450>
 8008e46:	f04f 0e08 	mov.w	lr, #8
 8008e4a:	46f2      	mov	sl, lr
 8008e4c:	e7f6      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008e4e:	200b      	movs	r0, #11
	while (length > 1 && payload[length-1] == 0) {
 8008e50:	4682      	mov	sl, r0
 8008e52:	1e42      	subs	r2, r0, #1
 8008e54:	b292      	uxth	r2, r2
 8008e56:	f7fe bda9 	b.w	80079ac <mouseDriver_sendMsg+0x68c>
 8008e5a:	200c      	movs	r0, #12
 8008e5c:	4682      	mov	sl, r0
 8008e5e:	e7f8      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
 8008e60:	f04f 0804 	mov.w	r8, #4
		length--;
 8008e64:	46c2      	mov	sl, r8
	while (length > 1 && payload[length-1] == 0) {
 8008e66:	2303      	movs	r3, #3
 8008e68:	f7fe bbcb 	b.w	8007602 <mouseDriver_sendMsg+0x2e2>
 8008e6c:	f04f 0805 	mov.w	r8, #5
 8008e70:	46c2      	mov	sl, r8
 8008e72:	2304      	movs	r3, #4
 8008e74:	f7fe bbc5 	b.w	8007602 <mouseDriver_sendMsg+0x2e2>
		length--;
 8008e78:	270c      	movs	r7, #12
	while (length > 1 && payload[length-1] == 0) {
 8008e7a:	46b8      	mov	r8, r7
 8008e7c:	1e7b      	subs	r3, r7, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f7fe be06 	b.w	8007a90 <mouseDriver_sendMsg+0x770>
 8008e84:	270d      	movs	r7, #13
 8008e86:	46b8      	mov	r8, r7
 8008e88:	e7f8      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
 8008e8a:	f04f 0e04 	mov.w	lr, #4
		length--;
 8008e8e:	46f2      	mov	sl, lr
	while (length > 1 && payload[length-1] == 0) {
 8008e90:	2303      	movs	r3, #3
 8008e92:	f7fe bb6d 	b.w	8007570 <mouseDriver_sendMsg+0x250>
 8008e96:	f04f 0e05 	mov.w	lr, #5
 8008e9a:	46f2      	mov	sl, lr
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f7fe bb67 	b.w	8007570 <mouseDriver_sendMsg+0x250>
		length--;
 8008ea2:	270b      	movs	r7, #11
	while (length > 1 && payload[length-1] == 0) {
 8008ea4:	46b8      	mov	r8, r7
 8008ea6:	1e7b      	subs	r3, r7, #1
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f7fe bc11 	b.w	80076d0 <mouseDriver_sendMsg+0x3b0>
 8008eae:	270c      	movs	r7, #12
 8008eb0:	46b8      	mov	r8, r7
 8008eb2:	e7f8      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
 8008eb4:	f04f 0e02 	mov.w	lr, #2
		length--;
 8008eb8:	46f2      	mov	sl, lr
	while (length > 1 && payload[length-1] == 0) {
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f7fe bb58 	b.w	8007570 <mouseDriver_sendMsg+0x250>
 8008ec0:	f04f 0e03 	mov.w	lr, #3
		length--;
 8008ec4:	46f2      	mov	sl, lr
	while (length > 1 && payload[length-1] == 0) {
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	f7fe bb52 	b.w	8007570 <mouseDriver_sendMsg+0x250>
		length--;
 8008ecc:	2709      	movs	r7, #9
	while (length > 1 && payload[length-1] == 0) {
 8008ece:	46b8      	mov	r8, r7
 8008ed0:	e7e9      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008ed2:	270a      	movs	r7, #10
	while (length > 1 && payload[length-1] == 0) {
 8008ed4:	46b8      	mov	r8, r7
 8008ed6:	e7e6      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008ed8:	f04f 0e05 	mov.w	lr, #5
	while (length > 1 && payload[length-1] == 0) {
 8008edc:	46f2      	mov	sl, lr
 8008ede:	e7ad      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008ee0:	f04f 0e06 	mov.w	lr, #6
	while (length > 1 && payload[length-1] == 0) {
 8008ee4:	46f2      	mov	sl, lr
 8008ee6:	e7a9      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008ee8:	2009      	movs	r0, #9
	while (length > 1 && payload[length-1] == 0) {
 8008eea:	4682      	mov	sl, r0
 8008eec:	e7b1      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008eee:	200a      	movs	r0, #10
	while (length > 1 && payload[length-1] == 0) {
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	e7ae      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
 8008ef4:	f04f 0802 	mov.w	r8, #2
		length--;
 8008ef8:	46c2      	mov	sl, r8
	while (length > 1 && payload[length-1] == 0) {
 8008efa:	2301      	movs	r3, #1
 8008efc:	f7fe bb81 	b.w	8007602 <mouseDriver_sendMsg+0x2e2>
 8008f00:	f04f 0803 	mov.w	r8, #3
		length--;
 8008f04:	46c2      	mov	sl, r8
	while (length > 1 && payload[length-1] == 0) {
 8008f06:	2302      	movs	r3, #2
 8008f08:	f7fe bb7b 	b.w	8007602 <mouseDriver_sendMsg+0x2e2>
		length--;
 8008f0c:	270a      	movs	r7, #10
	while (length > 1 && payload[length-1] == 0) {
 8008f0e:	46b8      	mov	r8, r7
 8008f10:	e7b4      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f12:	270b      	movs	r7, #11
	while (length > 1 && payload[length-1] == 0) {
 8008f14:	46b8      	mov	r8, r7
 8008f16:	e7b1      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f18:	2007      	movs	r0, #7
	while (length > 1 && payload[length-1] == 0) {
 8008f1a:	4682      	mov	sl, r0
 8008f1c:	e799      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f1e:	2008      	movs	r0, #8
	while (length > 1 && payload[length-1] == 0) {
 8008f20:	4682      	mov	sl, r0
 8008f22:	e796      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f24:	2708      	movs	r7, #8
	while (length > 1 && payload[length-1] == 0) {
 8008f26:	46b8      	mov	r8, r7
 8008f28:	e7a8      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f2a:	2709      	movs	r7, #9
	while (length > 1 && payload[length-1] == 0) {
 8008f2c:	46b8      	mov	r8, r7
 8008f2e:	e7a5      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f30:	f04f 0e03 	mov.w	lr, #3
	while (length > 1 && payload[length-1] == 0) {
 8008f34:	46f2      	mov	sl, lr
 8008f36:	e781      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008f38:	f04f 0e04 	mov.w	lr, #4
	while (length > 1 && payload[length-1] == 0) {
 8008f3c:	46f2      	mov	sl, lr
 8008f3e:	e77d      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008f40:	2707      	movs	r7, #7
	while (length > 1 && payload[length-1] == 0) {
 8008f42:	46b8      	mov	r8, r7
 8008f44:	e7af      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f46:	2708      	movs	r7, #8
	while (length > 1 && payload[length-1] == 0) {
 8008f48:	46b8      	mov	r8, r7
 8008f4a:	e7ac      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f4c:	2005      	movs	r0, #5
	while (length > 1 && payload[length-1] == 0) {
 8008f4e:	4682      	mov	sl, r0
 8008f50:	e77f      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f52:	2006      	movs	r0, #6
	while (length > 1 && payload[length-1] == 0) {
 8008f54:	4682      	mov	sl, r0
 8008f56:	e77c      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f58:	2706      	movs	r7, #6
	while (length > 1 && payload[length-1] == 0) {
 8008f5a:	46b8      	mov	r8, r7
 8008f5c:	e78e      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f5e:	2707      	movs	r7, #7
	while (length > 1 && payload[length-1] == 0) {
 8008f60:	46b8      	mov	r8, r7
 8008f62:	e78b      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f64:	f04f 0e02 	mov.w	lr, #2
	while (length > 1 && payload[length-1] == 0) {
 8008f68:	46f2      	mov	sl, lr
 8008f6a:	e767      	b.n	8008e3c <mouseDriver_sendMsg+0x1b1c>
		length--;
 8008f6c:	2705      	movs	r7, #5
	while (length > 1 && payload[length-1] == 0) {
 8008f6e:	46b8      	mov	r8, r7
 8008f70:	e799      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f72:	2706      	movs	r7, #6
	while (length > 1 && payload[length-1] == 0) {
 8008f74:	46b8      	mov	r8, r7
 8008f76:	e796      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f78:	2703      	movs	r7, #3
	while (length > 1 && payload[length-1] == 0) {
 8008f7a:	46b8      	mov	r8, r7
 8008f7c:	e793      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f7e:	2704      	movs	r7, #4
	while (length > 1 && payload[length-1] == 0) {
 8008f80:	46b8      	mov	r8, r7
 8008f82:	e790      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008f84:	2704      	movs	r7, #4
	while (length > 1 && payload[length-1] == 0) {
 8008f86:	46b8      	mov	r8, r7
 8008f88:	e778      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f8a:	2705      	movs	r7, #5
	while (length > 1 && payload[length-1] == 0) {
 8008f8c:	46b8      	mov	r8, r7
 8008f8e:	e775      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008f90:	2003      	movs	r0, #3
	while (length > 1 && payload[length-1] == 0) {
 8008f92:	4682      	mov	sl, r0
 8008f94:	e75d      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f96:	2004      	movs	r0, #4
	while (length > 1 && payload[length-1] == 0) {
 8008f98:	4682      	mov	sl, r0
 8008f9a:	e75a      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008f9c:	2002      	movs	r0, #2
	while (length > 1 && payload[length-1] == 0) {
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	e757      	b.n	8008e52 <mouseDriver_sendMsg+0x1b32>
		length--;
 8008fa2:	2702      	movs	r7, #2
	while (length > 1 && payload[length-1] == 0) {
 8008fa4:	46b8      	mov	r8, r7
 8008fa6:	e77e      	b.n	8008ea6 <mouseDriver_sendMsg+0x1b86>
		length--;
 8008fa8:	2702      	movs	r7, #2
	while (length > 1 && payload[length-1] == 0) {
 8008faa:	46b8      	mov	r8, r7
 8008fac:	e766      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
		length--;
 8008fae:	2703      	movs	r7, #3
	while (length > 1 && payload[length-1] == 0) {
 8008fb0:	46b8      	mov	r8, r7
 8008fb2:	e763      	b.n	8008e7c <mouseDriver_sendMsg+0x1b5c>
	if (signing) {
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	9200      	str	r2, [sp, #0]
 8008fb8:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	f7fe bdbc 	b.w	8007b3a <mouseDriver_sendMsg+0x81a>
 8008fc2:	220a      	movs	r2, #10
 8008fc4:	9200      	str	r2, [sp, #0]
 8008fc6:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008fca:	2208      	movs	r2, #8
 8008fcc:	f7ff b830 	b.w	8008030 <mouseDriver_sendMsg+0xd10>
 8008fd0:	230a      	movs	r3, #10
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008fd8:	2308      	movs	r3, #8
 8008fda:	f7ff b8dd 	b.w	8008198 <mouseDriver_sendMsg+0xe78>
	if (mavlink1) {
 8008fde:	4608      	mov	r0, r1
 8008fe0:	f7fe bc12 	b.w	8007808 <mouseDriver_sendMsg+0x4e8>
	if (signing) {
 8008fe4:	220a      	movs	r2, #10
 8008fe6:	9200      	str	r2, [sp, #0]
 8008fe8:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008fec:	2208      	movs	r2, #8
 8008fee:	f7fe b9bf 	b.w	8007370 <mouseDriver_sendMsg+0x50>
 8008ff2:	220a      	movs	r2, #10
 8008ff4:	9200      	str	r2, [sp, #0]
 8008ff6:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	f7fe beae 	b.w	8007d5c <mouseDriver_sendMsg+0xa3c>
 8009000:	220a      	movs	r2, #10
 8009002:	9200      	str	r2, [sp, #0]
 8009004:	f04f 0bfd 	mov.w	fp, #253	; 0xfd
 8009008:	2208      	movs	r2, #8
 800900a:	f7fe bf5e 	b.w	8007eca <mouseDriver_sendMsg+0xbaa>
 800900e:	bf00      	nop
 8009010:	6a09e667 	.word	0x6a09e667
 8009014:	bb67ae85 	.word	0xbb67ae85
 8009018:	510e527f 	.word	0x510e527f
 800901c:	9b05688c 	.word	0x9b05688c
 8009020:	1f83d9ab 	.word	0x1f83d9ab
 8009024:	3c6ef372 	.word	0x3c6ef372
 8009028:	a54ff53a 	.word	0xa54ff53a

0800902c <mouseDriver_init>:
void mouseDriver_init(void){
 800902c:	b4f0      	push	{r4, r5, r6, r7}
	actual_speed_setpoint.setpoint_x = 0;
 800902e:	4916      	ldr	r1, [pc, #88]	; (8009088 <mouseDriver_init+0x5c>)
	actual_mode = MOUSE_MODE_STOP;
 8009030:	4d16      	ldr	r5, [pc, #88]	; (800908c <mouseDriver_init+0x60>)
	actual_speed_measure.speed_x = 1;
 8009032:	4817      	ldr	r0, [pc, #92]	; (8009090 <mouseDriver_init+0x64>)
	actual_speed_setpoint.setpoint_x = 0;
 8009034:	2200      	movs	r2, #0
	actual_mode = MOUSE_MODE_STOP;
 8009036:	2400      	movs	r4, #0
	actual_speed_setpoint.setpoint_x = 0;
 8009038:	600a      	str	r2, [r1, #0]
	actual_mode = MOUSE_MODE_STOP;
 800903a:	702c      	strb	r4, [r5, #0]
	actual_speed_setpoint.setpoint_y = 0;
 800903c:	604a      	str	r2, [r1, #4]
		points[i].setpoint_x = 0;
 800903e:	4616      	mov	r6, r2
 8009040:	4d14      	ldr	r5, [pc, #80]	; (8009094 <mouseDriver_init+0x68>)
	actual_speed_measure.speed_x = 1;
 8009042:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009046:	6042      	str	r2, [r0, #4]
	actual_speed_measure.speed_y = 2;
 8009048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	for(int i=0; i<MAX_POINTS; i++){
 800904c:	4623      	mov	r3, r4
		points[i].duration = 0;
 800904e:	4621      	mov	r1, r4
	actual_speed_measure.speed_y = 2;
 8009050:	6082      	str	r2, [r0, #8]
 8009052:	462c      	mov	r4, r5
		points[i].duration = 0;
 8009054:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8009058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800905c:	182a      	adds	r2, r5, r0
	for(int i=0; i<MAX_POINTS; i++){
 800905e:	3301      	adds	r3, #1
 8009060:	2bff      	cmp	r3, #255	; 0xff
		points[i].duration = 0;
 8009062:	5429      	strb	r1, [r5, r0]
		points[i].setpoint_x = 0;
 8009064:	6056      	str	r6, [r2, #4]
		points[i].duration = 0;
 8009066:	7051      	strb	r1, [r2, #1]
 8009068:	7091      	strb	r1, [r2, #2]
 800906a:	70d1      	strb	r1, [r2, #3]
		points[i].setpoint_y = 0;
 800906c:	6096      	str	r6, [r2, #8]
 800906e:	f104 040d 	add.w	r4, r4, #13
		points[i].point_id = 0;
 8009072:	f804 1c01 	strb.w	r1, [r4, #-1]
	for(int i=0; i<MAX_POINTS; i++){
 8009076:	d1ed      	bne.n	8009054 <mouseDriver_init+0x28>
	actual_point = 0;
 8009078:	4a07      	ldr	r2, [pc, #28]	; (8009098 <mouseDriver_init+0x6c>)
	actual_point_start_time = 0;
 800907a:	4b08      	ldr	r3, [pc, #32]	; (800909c <mouseDriver_init+0x70>)
	actual_point = 0;
 800907c:	7011      	strb	r1, [r2, #0]
}
 800907e:	bcf0      	pop	{r4, r5, r6, r7}
	actual_point_start_time = 0;
 8009080:	6019      	str	r1, [r3, #0]
	sensorDriver_init();
 8009082:	f000 b929 	b.w	80092d8 <sensorDriver_init>
 8009086:	bf00      	nop
 8009088:	20000050 	.word	0x20000050
 800908c:	2000002d 	.word	0x2000002d
 8009090:	20000044 	.word	0x20000044
 8009094:	200002ac 	.word	0x200002ac
 8009098:	2000003c 	.word	0x2000003c
 800909c:	20000040 	.word	0x20000040

080090a0 <mouseDriver_readMsg>:
}
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 80090a0:	b084      	sub	sp, #16
 80090a2:	b570      	push	{r4, r5, r6, lr}
 80090a4:	ac04      	add	r4, sp, #16
 80090a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(msg.msgid){
 80090aa:	9b06      	ldr	r3, [sp, #24]
 80090ac:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80090b0:	3b02      	subs	r3, #2
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d826      	bhi.n	8009104 <mouseDriver_readMsg+0x64>
 80090b6:	e8df f003 	tbb	[pc, r3]
 80090ba:	3c29      	.short	0x3c29
 80090bc:	2529      	.short	0x2529
 80090be:	03          	.byte	0x03
 80090bf:	00          	.byte	0x00
	case MAVLINK_MSG_ID_MOTOR_SETPOINT:
		if (actual_mode == MOUSE_MODE_SPEED)
			mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
		break;
	case MAVLINK_MSG_ID_POINT:
		if(actual_mode == MOUSE_MODE_AUTO_LOAD){
 80090c0:	4b37      	ldr	r3, [pc, #220]	; (80091a0 <mouseDriver_readMsg+0x100>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d11d      	bne.n	8009104 <mouseDriver_readMsg+0x64>
			mavlink_msg_point_decode(&msg, &points[actual_point]);
 80090c8:	4e36      	ldr	r6, [pc, #216]	; (80091a4 <mouseDriver_readMsg+0x104>)
 80090ca:	4837      	ldr	r0, [pc, #220]	; (80091a8 <mouseDriver_readMsg+0x108>)
 80090cc:	7834      	ldrb	r4, [r6, #0]
    point->duration = mavlink_msg_point_get_duration(msg);
    point->setpoint_x = mavlink_msg_point_get_setpoint_x(msg);
    point->setpoint_y = mavlink_msg_point_get_setpoint_y(msg);
    point->point_id = mavlink_msg_point_get_point_id(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POINT_LEN? msg->len : MAVLINK_MSG_ID_POINT_LEN;
 80090ce:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80090d2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80090d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80090da:	180b      	adds	r3, r1, r0
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 80090dc:	2500      	movs	r5, #0
    memcpy(point, _MAV_PAYLOAD(msg), len);
 80090de:	2a0d      	cmp	r2, #13
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 80090e0:	500d      	str	r5, [r1, r0]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 80090e2:	bf28      	it	cs
 80090e4:	220d      	movcs	r2, #13
 80090e6:	4618      	mov	r0, r3
 80090e8:	a907      	add	r1, sp, #28
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 80090ea:	605d      	str	r5, [r3, #4]
 80090ec:	609d      	str	r5, [r3, #8]
 80090ee:	731d      	strb	r5, [r3, #12]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 80090f0:	f005 f867 	bl	800e1c2 <memcpy>
			if (actual_point == 255){
 80090f4:	2cff      	cmp	r4, #255	; 0xff
 80090f6:	d049      	beq.n	800918c <mouseDriver_readMsg+0xec>
				actual_error.error = MOUSE_ROUTINE_TOO_LONG;
				actual_error.time = mouseDriver_getTime();
				mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
			}
			mouseDriver_sendMsg(MAVLINK_MSG_ID_POINT_LOADED);
 80090f8:	2005      	movs	r0, #5
 80090fa:	f7fe f911 	bl	8007320 <mouseDriver_sendMsg>
			actual_point ++;
 80090fe:	7833      	ldrb	r3, [r6, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	7033      	strb	r3, [r6, #0]
		}
		break;
	default:
		break;
	};
}
 8009104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009108:	b004      	add	sp, #16
 800910a:	4770      	bx	lr
		if (actual_mode == MOUSE_MODE_SPEED)
 800910c:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <mouseDriver_readMsg+0x100>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d1f7      	bne.n	8009104 <mouseDriver_readMsg+0x64>
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8009114:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8009118:	4b24      	ldr	r3, [pc, #144]	; (80091ac <mouseDriver_readMsg+0x10c>)
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 800911a:	2a08      	cmp	r2, #8
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 800911c:	f04f 0400 	mov.w	r4, #0
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8009120:	bf28      	it	cs
 8009122:	2208      	movcs	r2, #8
 8009124:	4618      	mov	r0, r3
 8009126:	a907      	add	r1, sp, #28
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8009128:	e9c3 4400 	strd	r4, r4, [r3]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 800912c:	f005 f849 	bl	800e1c2 <memcpy>
 8009130:	e7e8      	b.n	8009104 <mouseDriver_readMsg+0x64>
 *
 * @return  Actual operating mode
 */
static inline uint8_t mavlink_msg_mode_selection_get_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  0);
 8009132:	f89d 401c 	ldrb.w	r4, [sp, #28]
	if (mode == MOUSE_MODE_STOP){
 8009136:	b1b4      	cbz	r4, 8009166 <mouseDriver_readMsg+0xc6>
	if (mode == MOUSE_MODE_AUTO_LOAD){
 8009138:	2c02      	cmp	r4, #2
		actual_mode = mode;
 800913a:	4d19      	ldr	r5, [pc, #100]	; (80091a0 <mouseDriver_readMsg+0x100>)
	if (mode == MOUSE_MODE_AUTO_LOAD){
 800913c:	d01d      	beq.n	800917a <mouseDriver_readMsg+0xda>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 800913e:	782b      	ldrb	r3, [r5, #0]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d120      	bne.n	8009186 <mouseDriver_readMsg+0xe6>
 8009144:	2c03      	cmp	r4, #3
 8009146:	d113      	bne.n	8009170 <mouseDriver_readMsg+0xd0>
		actual_point = 0;
 8009148:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <mouseDriver_readMsg+0x104>)
		actual_point_start_time = mouseDriver_getTime();
 800914a:	4e19      	ldr	r6, [pc, #100]	; (80091b0 <mouseDriver_readMsg+0x110>)
		actual_point = 0;
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
	return (HAL_GetTick());
 8009150:	f002 f982 	bl	800b458 <HAL_GetTick>
		actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 8009154:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <mouseDriver_readMsg+0x108>)
 8009156:	6859      	ldr	r1, [r3, #4]
		actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 8009158:	689a      	ldr	r2, [r3, #8]
		actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 800915a:	4b14      	ldr	r3, [pc, #80]	; (80091ac <mouseDriver_readMsg+0x10c>)
		actual_mode = mode;
 800915c:	702c      	strb	r4, [r5, #0]
		actual_point_start_time = mouseDriver_getTime();
 800915e:	6030      	str	r0, [r6, #0]
		actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 8009160:	6019      	str	r1, [r3, #0]
		actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e7ce      	b.n	8009104 <mouseDriver_readMsg+0x64>
		main_stop_motors();
 8009166:	f000 f8d3 	bl	8009310 <main_stop_motors>
		actual_point = 0;
 800916a:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <mouseDriver_readMsg+0x104>)
 800916c:	4d0c      	ldr	r5, [pc, #48]	; (80091a0 <mouseDriver_readMsg+0x100>)
 800916e:	701c      	strb	r4, [r3, #0]
		actual_mode = mode;
 8009170:	702c      	strb	r4, [r5, #0]
}
 8009172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009176:	b004      	add	sp, #16
 8009178:	4770      	bx	lr
		actual_mode = mode;
 800917a:	702c      	strb	r4, [r5, #0]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 800917c:	f7f9 f932 	bl	80023e4 <mouseDriver_sendMsg.constprop.3>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8009180:	782b      	ldrb	r3, [r5, #0]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d0f4      	beq.n	8009170 <mouseDriver_readMsg+0xd0>
	if (actual_mode != MOUSE_MODE_AUTO_RUN)
 8009186:	2b03      	cmp	r3, #3
 8009188:	d0bc      	beq.n	8009104 <mouseDriver_readMsg+0x64>
 800918a:	e7f1      	b.n	8009170 <mouseDriver_readMsg+0xd0>
				actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 800918c:	4c09      	ldr	r4, [pc, #36]	; (80091b4 <mouseDriver_readMsg+0x114>)
 800918e:	2303      	movs	r3, #3
 8009190:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 8009192:	f002 f961 	bl	800b458 <HAL_GetTick>
				actual_error.time = mouseDriver_getTime();
 8009196:	6020      	str	r0, [r4, #0]
				mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8009198:	2007      	movs	r0, #7
 800919a:	f7fe f8c1 	bl	8007320 <mouseDriver_sendMsg>
 800919e:	e7ab      	b.n	80090f8 <mouseDriver_readMsg+0x58>
 80091a0:	2000002d 	.word	0x2000002d
 80091a4:	2000003c 	.word	0x2000003c
 80091a8:	200002ac 	.word	0x200002ac
 80091ac:	20000050 	.word	0x20000050
 80091b0:	20000040 	.word	0x20000040
 80091b4:	20000028 	.word	0x20000028

080091b8 <mouseDriver_idle>:

/* Idle functions */
void mouseDriver_idle (void){
 80091b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint64_t difference = 0;
	/* DEMO CODE INIT*/
		actual_motor_signal.time = mouseDriver_getTime();
	/* DEMO CODE END*/

	switch(actual_mode){
 80091bc:	4c3e      	ldr	r4, [pc, #248]	; (80092b8 <mouseDriver_idle+0x100>)
	return (HAL_GetTick());
 80091be:	f002 f94b 	bl	800b458 <HAL_GetTick>
		actual_motor_signal.time = mouseDriver_getTime();
 80091c2:	4b3e      	ldr	r3, [pc, #248]	; (80092bc <mouseDriver_idle+0x104>)
	switch(actual_mode){
 80091c4:	7822      	ldrb	r2, [r4, #0]
		actual_motor_signal.time = mouseDriver_getTime();
 80091c6:	6018      	str	r0, [r3, #0]
	switch(actual_mode){
 80091c8:	2a03      	cmp	r2, #3
 80091ca:	d83c      	bhi.n	8009246 <mouseDriver_idle+0x8e>
 80091cc:	e8df f002 	tbb	[pc, r2]
 80091d0:	02373d50 	.word	0x02373d50
			mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
		}
		break;
	case MOUSE_MODE_AUTO_RUN:
		difference = mouseDriver_getTime()-actual_point_start_time;
		if (difference >= points[actual_point].duration){
 80091d4:	4d3a      	ldr	r5, [pc, #232]	; (80092c0 <mouseDriver_idle+0x108>)
		difference = mouseDriver_getTime()-actual_point_start_time;
 80091d6:	4f3b      	ldr	r7, [pc, #236]	; (80092c4 <mouseDriver_idle+0x10c>)
		if (difference >= points[actual_point].duration){
 80091d8:	4e3b      	ldr	r6, [pc, #236]	; (80092c8 <mouseDriver_idle+0x110>)
	return (HAL_GetTick());
 80091da:	f002 f93d 	bl	800b458 <HAL_GetTick>
		if (difference >= points[actual_point].duration){
 80091de:	782b      	ldrb	r3, [r5, #0]
		difference = mouseDriver_getTime()-actual_point_start_time;
 80091e0:	683a      	ldr	r2, [r7, #0]
		if (difference >= points[actual_point].duration){
 80091e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80091e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
		difference = mouseDriver_getTime()-actual_point_start_time;
 80091ea:	1a80      	subs	r0, r0, r2
		if (difference >= points[actual_point].duration){
 80091ec:	5872      	ldr	r2, [r6, r1]
 80091ee:	4290      	cmp	r0, r2
 80091f0:	d31a      	bcc.n	8009228 <mouseDriver_idle+0x70>
			if (actual_point < 255){
 80091f2:	2bff      	cmp	r3, #255	; 0xff
 80091f4:	d01a      	beq.n	800922c <mouseDriver_idle+0x74>
				actual_point++;
 80091f6:	3301      	adds	r3, #1
 80091f8:	b2db      	uxtb	r3, r3

				if(points[actual_point].duration == 0){
 80091fa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80091fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				actual_point++;
 8009202:	702b      	strb	r3, [r5, #0]
				if(points[actual_point].duration == 0){
 8009204:	461a      	mov	r2, r3
 8009206:	5873      	ldr	r3, [r6, r1]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d045      	beq.n	8009298 <mouseDriver_idle+0xe0>
					main_stop_motors();
					mouseDriver_setMode(MOUSE_MODE_AUTO_LOAD);
				}
				actual_speed_setpoint.setpoint_x = points[actual_point].setpoint_x;
 800920c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8009210:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009214:	4416      	add	r6, r2
 8009216:	4b2d      	ldr	r3, [pc, #180]	; (80092cc <mouseDriver_idle+0x114>)
 8009218:	6871      	ldr	r1, [r6, #4]
				actual_speed_setpoint.setpoint_y = points[actual_point].setpoint_y;
 800921a:	68b2      	ldr	r2, [r6, #8]
 800921c:	605a      	str	r2, [r3, #4]
				actual_speed_setpoint.setpoint_x = points[actual_point].setpoint_x;
 800921e:	6019      	str	r1, [r3, #0]
	return (HAL_GetTick());
 8009220:	f002 f91a 	bl	800b458 <HAL_GetTick>
 8009224:	782b      	ldrb	r3, [r5, #0]
				actual_point_start_time = mouseDriver_getTime();
 8009226:	6038      	str	r0, [r7, #0]
			}
		}

		if (actual_point == 255){
 8009228:	2bff      	cmp	r3, #255	; 0xff
 800922a:	d117      	bne.n	800925c <mouseDriver_idle+0xa4>
		actual_mode = mode;
 800922c:	2502      	movs	r5, #2
 800922e:	7025      	strb	r5, [r4, #0]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8009230:	f7f9 f8d8 	bl	80023e4 <mouseDriver_sendMsg.constprop.3>
	if (actual_mode != MOUSE_MODE_AUTO_RUN)
 8009234:	7823      	ldrb	r3, [r4, #0]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d010      	beq.n	800925c <mouseDriver_idle+0xa4>
		actual_mode = mode;
 800923a:	7025      	strb	r5, [r4, #0]
 800923c:	e00e      	b.n	800925c <mouseDriver_idle+0xa4>
		if (actual_point == 255){
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <mouseDriver_idle+0x108>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d01d      	beq.n	8009282 <mouseDriver_idle+0xca>
	default:
		break;
	}


}
 8009246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			actual_motor_signal.motor_x = actual_speed_setpoint.setpoint_x;
 800924a:	4a20      	ldr	r2, [pc, #128]	; (80092cc <mouseDriver_idle+0x114>)
 800924c:	6811      	ldr	r1, [r2, #0]
			actual_motor_signal.motor_y = actual_speed_setpoint.setpoint_y;
 800924e:	6852      	ldr	r2, [r2, #4]
 8009250:	609a      	str	r2, [r3, #8]
			actual_motor_signal.motor_x = actual_speed_setpoint.setpoint_x;
 8009252:	6059      	str	r1, [r3, #4]
		main_set_motors_speed(actual_motor_signal);
 8009254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009258:	f000 f868 	bl	800932c <main_set_motors_speed>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 800925c:	f7fc fb38 	bl	80058d0 <mouseDriver_sendMsg.constprop.0>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8009260:	f7f7 fb72 	bl	8000948 <mouseDriver_sendMsg.constprop.1>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8009264:	f7fa fde2 	bl	8003e2c <mouseDriver_sendMsg.constprop.2>
}
 8009268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 800926c:	f7f9 b8ba 	b.w	80023e4 <mouseDriver_sendMsg.constprop.3>
	actual_speed_setpoint.setpoint_x = 0;
 8009270:	4916      	ldr	r1, [pc, #88]	; (80092cc <mouseDriver_idle+0x114>)
 8009272:	2200      	movs	r2, #0
 8009274:	600a      	str	r2, [r1, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8009276:	604a      	str	r2, [r1, #4]
		actual_motor_signal.motor_x = 0;
 8009278:	605a      	str	r2, [r3, #4]
		actual_motor_signal.motor_y = 0;
 800927a:	609a      	str	r2, [r3, #8]
		main_stop_motors();
 800927c:	f000 f848 	bl	8009310 <main_stop_motors>
 8009280:	e7ec      	b.n	800925c <mouseDriver_idle+0xa4>
			actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 8009282:	4c13      	ldr	r4, [pc, #76]	; (80092d0 <mouseDriver_idle+0x118>)
 8009284:	2303      	movs	r3, #3
 8009286:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 8009288:	f002 f8e6 	bl	800b458 <HAL_GetTick>
			actual_error.time = mouseDriver_getTime();
 800928c:	6020      	str	r0, [r4, #0]
			mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 800928e:	2007      	movs	r0, #7
}
 8009290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8009294:	f7fe b844 	b.w	8007320 <mouseDriver_sendMsg>
		actual_mode = mode;
 8009298:	f04f 0802 	mov.w	r8, #2
					main_stop_motors();
 800929c:	f000 f838 	bl	8009310 <main_stop_motors>
		actual_mode = mode;
 80092a0:	f884 8000 	strb.w	r8, [r4]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 80092a4:	f7f9 f89e 	bl	80023e4 <mouseDriver_sendMsg.constprop.3>
	if (actual_mode != MOUSE_MODE_AUTO_RUN)
 80092a8:	7823      	ldrb	r3, [r4, #0]
 80092aa:	782a      	ldrb	r2, [r5, #0]
 80092ac:	2b03      	cmp	r3, #3
		actual_mode = mode;
 80092ae:	bf18      	it	ne
 80092b0:	f884 8000 	strbne.w	r8, [r4]
 80092b4:	e7aa      	b.n	800920c <mouseDriver_idle+0x54>
 80092b6:	bf00      	nop
 80092b8:	2000002d 	.word	0x2000002d
 80092bc:	20000030 	.word	0x20000030
 80092c0:	2000003c 	.word	0x2000003c
 80092c4:	20000040 	.word	0x20000040
 80092c8:	200002ac 	.word	0x200002ac
 80092cc:	20000050 	.word	0x20000050
 80092d0:	20000028 	.word	0x20000028

080092d4 <mouseDriver_controlISR>:

/* ISR Functions */
void mouseDriver_controlISR(void){

}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop

080092d8 <sensorDriver_init>:
 *      Author: Didier
 */

# include "sensorDriver.h"

void sensorDriver_init(void){
 80092d8:	b508      	push	{r3, lr}
	main_write_sensor(Config2, 0x20);
 80092da:	2120      	movs	r1, #32
 80092dc:	2010      	movs	r0, #16
 80092de:	f000 f85f 	bl	80093a0 <main_write_sensor>
	main_write_sensor(SROM_Enable, 0x1d);
 80092e2:	211d      	movs	r1, #29
 80092e4:	2013      	movs	r0, #19

}
 80092e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	main_write_sensor(SROM_Enable, 0x1d);
 80092ea:	f000 b859 	b.w	80093a0 <main_write_sensor>
 80092ee:	bf00      	nop

080092f0 <main_get_huart_tx_state>:
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int main_get_huart_tx_state(void){
 80092f0:	b508      	push	{r3, lr}
	return (HAL_DMA_GetState(&hdma_usart2_tx));
 80092f2:	4802      	ldr	r0, [pc, #8]	; (80092fc <main_get_huart_tx_state+0xc>)
 80092f4:	f002 fa74 	bl	800b7e0 <HAL_DMA_GetState>
}
 80092f8:	bd08      	pop	{r3, pc}
 80092fa:	bf00      	nop
 80092fc:	20016b78 	.word	0x20016b78

08009300 <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 8009300:	460a      	mov	r2, r1
 8009302:	4601      	mov	r1, r0
 8009304:	4801      	ldr	r0, [pc, #4]	; (800930c <main_transmit_buffer+0xc>)
 8009306:	f004 bb0d 	b.w	800d924 <HAL_UART_Transmit_DMA>
 800930a:	bf00      	nop
 800930c:	20016c00 	.word	0x20016c00

08009310 <main_stop_motors>:
}
void main_stop_motors(void)
{
 8009310:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8009312:	4c05      	ldr	r4, [pc, #20]	; (8009328 <main_stop_motors+0x18>)
 8009314:	2100      	movs	r1, #0
 8009316:	4620      	mov	r0, r4
 8009318:	f003 fe9c 	bl	800d054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800931c:	4620      	mov	r0, r4
 800931e:	2104      	movs	r1, #4
}
 8009320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8009324:	f003 be96 	b.w	800d054 <HAL_TIM_PWM_Stop>
 8009328:	20016bc0 	.word	0x20016bc0

0800932c <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 800932c:	b500      	push	{lr}
 800932e:	ed2d 8b02 	vpush	{d8}
 8009332:	b085      	sub	sp, #20
 8009334:	ab04      	add	r3, sp, #16
 8009336:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800933a:	eddd 7a02 	vldr	s15, [sp, #8]

	htim1.Instance->CCR1 = motor.motor_x;
 800933e:	4817      	ldr	r0, [pc, #92]	; (800939c <main_set_motors_speed+0x70>)
 8009340:	ed9d 8a03 	vldr	s16, [sp, #12]
 8009344:	6803      	ldr	r3, [r0, #0]
 8009346:	eebc 7ae7 	vcvt.u32.f32	s14, s15
	htim1.Instance->CCR2 = motor.motor_y;

	if (motor.motor_x == 0)
 800934a:	eef5 7a40 	vcmp.f32	s15, #0.0
	htim1.Instance->CCR1 = motor.motor_x;
 800934e:	ee17 1a10 	vmov	r1, s14
	htim1.Instance->CCR2 = motor.motor_y;
 8009352:	eebc 7ac8 	vcvt.u32.f32	s14, s16
	if (motor.motor_x == 0)
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	htim1.Instance->CCR1 = motor.motor_x;
 800935a:	6359      	str	r1, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 800935c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8009360:	f04f 0100 	mov.w	r1, #0
	if (motor.motor_x == 0)
 8009364:	d110      	bne.n	8009388 <main_set_motors_speed+0x5c>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8009366:	f003 fe75 	bl	800d054 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	if (motor.motor_y == 0)
 800936a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8009372:	f04f 0104 	mov.w	r1, #4
 8009376:	4809      	ldr	r0, [pc, #36]	; (800939c <main_set_motors_speed+0x70>)
	if (motor.motor_y == 0)
 8009378:	d009      	beq.n	800938e <main_set_motors_speed+0x62>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
 800937a:	b005      	add	sp, #20
 800937c:	ecbd 8b02 	vpop	{d8}
 8009380:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8009384:	f003 be2c 	b.w	800cfe0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8009388:	f003 fe2a 	bl	800cfe0 <HAL_TIM_PWM_Start>
 800938c:	e7ed      	b.n	800936a <main_set_motors_speed+0x3e>
}
 800938e:	b005      	add	sp, #20
 8009390:	ecbd 8b02 	vpop	{d8}
 8009394:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8009398:	f003 be5c 	b.w	800d054 <HAL_TIM_PWM_Stop>
 800939c:	20016bc0 	.word	0x20016bc0

080093a0 <main_write_sensor>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
	return value;
}

void main_write_sensor (uint8_t adress, uint8_t data){
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	b082      	sub	sp, #8
	uint8_t value = data;
	uint8_t adress_write = adress | 0x80;
 80093a4:	ac02      	add	r4, sp, #8

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80093a6:	4d12      	ldr	r5, [pc, #72]	; (80093f0 <main_write_sensor+0x50>)
	HAL_SPI_Transmit(&hspi2, &adress_write, 1, 10);
 80093a8:	4e12      	ldr	r6, [pc, #72]	; (80093f4 <main_write_sensor+0x54>)
	uint8_t value = data;
 80093aa:	f88d 1006 	strb.w	r1, [sp, #6]
	uint8_t adress_write = adress | 0x80;
 80093ae:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80093b2:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80093b6:	2200      	movs	r2, #0
 80093b8:	4628      	mov	r0, r5
 80093ba:	2101      	movs	r1, #1
 80093bc:	f002 fb28 	bl	800ba10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adress_write, 1, 10);
 80093c0:	4621      	mov	r1, r4
 80093c2:	4630      	mov	r0, r6
 80093c4:	230a      	movs	r3, #10
 80093c6:	2201      	movs	r2, #1
 80093c8:	f003 fbbe 	bl	800cb48 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &value, 1, 10);
 80093cc:	230a      	movs	r3, #10
 80093ce:	f10d 0106 	add.w	r1, sp, #6
 80093d2:	2201      	movs	r2, #1
 80093d4:	4630      	mov	r0, r6
 80093d6:	f003 fbb7 	bl	800cb48 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80093da:	2001      	movs	r0, #1
 80093dc:	f002 f842 	bl	800b464 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80093e0:	2201      	movs	r2, #1
 80093e2:	4628      	mov	r0, r5
 80093e4:	4611      	mov	r1, r2
 80093e6:	f002 fb13 	bl	800ba10 <HAL_GPIO_WritePin>
}
 80093ea:	b002      	add	sp, #8
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	bf00      	nop
 80093f0:	48000800 	.word	0x48000800
 80093f4:	20016b14 	.word	0x20016b14

080093f8 <HAL_UART_RxCpltCallback>:
void TM7_IRQHandler(void){
	HAL_TIM_IRQHandler(&htim7);
}

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4604      	mov	r4, r0
 80093fe:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8009402:	2026      	movs	r0, #38	; 0x26
 8009404:	f002 f896 	bl	800b534 <HAL_NVIC_DisableIRQ>
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	4bb5      	ldr	r3, [pc, #724]	; (80096e0 <HAL_UART_RxCpltCallback+0x2e8>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d006      	beq.n	800941e <HAL_UART_RxCpltCallback+0x26>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){

			mouseDriver_readMsg(inmsg);
		}
	}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009410:	2026      	movs	r0, #38	; 0x26
}
 8009412:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
 8009416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800941a:	f002 b87d 	b.w	800b518 <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 800941e:	4cb1      	ldr	r4, [pc, #708]	; (80096e4 <HAL_UART_RxCpltCallback+0x2ec>)
 8009420:	48b1      	ldr	r0, [pc, #708]	; (80096e8 <HAL_UART_RxCpltCallback+0x2f0>)
 8009422:	4621      	mov	r1, r4
 8009424:	2201      	movs	r2, #1
 8009426:	f004 fa11 	bl	800d84c <HAL_UART_Receive_IT>
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;

	switch (status->parse_state)
 800942a:	49b0      	ldr	r1, [pc, #704]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 800942c:	7822      	ldrb	r2, [r4, #0]
 800942e:	78cb      	ldrb	r3, [r1, #3]
 8009430:	9247      	str	r2, [sp, #284]	; 0x11c
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8009432:	2200      	movs	r2, #0
 8009434:	700a      	strb	r2, [r1, #0]
	switch (status->parse_state)
 8009436:	2b0f      	cmp	r3, #15
 8009438:	f200 81ab 	bhi.w	8009792 <HAL_UART_RxCpltCallback+0x39a>
 800943c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009440:	015e015e 	.word	0x015e015e
 8009444:	01320172 	.word	0x01320172
 8009448:	013f018f 	.word	0x013f018f
 800944c:	00e700fd 	.word	0x00e700fd
 8009450:	00a300c3 	.word	0x00a300c3
 8009454:	0085010e 	.word	0x0085010e
 8009458:	00230044 	.word	0x00230044
 800945c:	00100023 	.word	0x00100023
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8009460:	48a2      	ldr	r0, [pc, #648]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 8009462:	49a3      	ldr	r1, [pc, #652]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 8009464:	7b43      	ldrb	r3, [r0, #13]
 8009466:	9149      	str	r1, [sp, #292]	; 0x124
		status->signature_wait--;
 8009468:	1e5a      	subs	r2, r3, #1
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800946a:	1acb      	subs	r3, r1, r3
		status->signature_wait--;
 800946c:	b2d6      	uxtb	r6, r2
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800946e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
		status->signature_wait--;
 8009470:	7346      	strb	r6, [r0, #13]
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8009472:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 8009476:	78cc      	ldrb	r4, [r1, #3]
		if (status->signature_wait == 0) {
 8009478:	2e00      	cmp	r6, #0
 800947a:	f000 8218 	beq.w	80098ae <HAL_UART_RxCpltCallback+0x4b6>
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
           r_mavlink_status->flags = status->flags;
       }
       status->parse_error = 0;
 800947e:	4a9b      	ldr	r2, [pc, #620]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 8009480:	2300      	movs	r3, #0
 8009482:	7093      	strb	r3, [r2, #2]
 8009484:	e7c4      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->ck[1] = c;
 8009486:	4a9a      	ldr	r2, [pc, #616]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 8009488:	9249      	str	r2, [sp, #292]	; 0x124
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800948a:	2b0e      	cmp	r3, #14
 800948c:	f000 81fb 	beq.w	8009886 <HAL_UART_RxCpltCallback+0x48e>
 8009490:	8813      	ldrh	r3, [r2, #0]
 8009492:	9947      	ldr	r1, [sp, #284]	; 0x11c
		rxmsg->ck[1] = c;
 8009494:	f882 1115 	strb.w	r1, [r2, #277]	; 0x115
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8009498:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800949c:	7913      	ldrb	r3, [r2, #4]
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800949e:	f000 8479 	beq.w	8009d94 <HAL_UART_RxCpltCallback+0x99c>
 80094a2:	4a92      	ldr	r2, [pc, #584]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 80094a4:	2502      	movs	r5, #2
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	7015      	strb	r5, [r2, #0]
 80094aa:	f140 81a3 	bpl.w	80097f4 <HAL_UART_RxCpltCallback+0x3fc>
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80094ae:	230d      	movs	r3, #13
 80094b0:	7353      	strb	r3, [r2, #13]
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 80094b2:	9847      	ldr	r0, [sp, #284]	; 0x11c
    status->parse_error++;
 80094b4:	498d      	ldr	r1, [pc, #564]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 80094b6:	2301      	movs	r3, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80094b8:	2200      	movs	r2, #0
	    if (c == MAVLINK_STX)
 80094ba:	28fd      	cmp	r0, #253	; 0xfd
    status->parse_error++;
 80094bc:	708b      	strb	r3, [r1, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80094be:	700a      	strb	r2, [r1, #0]
	    if (c == MAVLINK_STX)
 80094c0:	f000 815e 	beq.w	8009780 <HAL_UART_RxCpltCallback+0x388>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80094c4:	70cb      	strb	r3, [r1, #3]
 80094c6:	e7a3      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80094c8:	4b89      	ldr	r3, [pc, #548]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 80094ca:	4c8a      	ldr	r4, [pc, #552]	; (80096f4 <HAL_UART_RxCpltCallback+0x2fc>)
 80094cc:	6899      	ldr	r1, [r3, #8]
 80094ce:	9349      	str	r3, [sp, #292]	; 0x124
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80094d0:	2007      	movs	r0, #7
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80094d2:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80094d6:	4603      	mov	r3, r0
 80094d8:	2204      	movs	r2, #4
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80094da:	2500      	movs	r5, #0
            uint32_t mid = (low+1+high)/2;
 80094dc:	3301      	adds	r3, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80094de:	4291      	cmp	r1, r2
            uint32_t mid = (low+1+high)/2;
 80094e0:	ea4f 0353 	mov.w	r3, r3, lsr #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80094e4:	f0c0 815d 	bcc.w	80097a2 <HAL_UART_RxCpltCallback+0x3aa>
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80094e8:	f200 81c3 	bhi.w	8009872 <HAL_UART_RxCpltCallback+0x47a>
        if (mavlink_message_crcs[low].msgid != msgid) {
 80094ec:	4291      	cmp	r1, r2
 80094ee:	f000 81d7 	beq.w	80098a0 <HAL_UART_RxCpltCallback+0x4a8>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80094f2:	2100      	movs	r1, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 80094f4:	460b      	mov	r3, r1
	uint16_t checksum = msg->checksum;
 80094f6:	9c49      	ldr	r4, [sp, #292]	; 0x124
                rxmsg->ck[0] = c;
 80094f8:	9d47      	ldr	r5, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 80094fa:	8820      	ldrh	r0, [r4, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80094fc:	4043      	eors	r3, r0
 80094fe:	4622      	mov	r2, r4
        tmp ^= (tmp<<4);
 8009500:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8009504:	b2db      	uxtb	r3, r3
                rxmsg->ck[0] = c;
 8009506:	f882 5114 	strb.w	r5, [r2, #276]	; 0x114
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800950a:	091a      	lsrs	r2, r3, #4
 800950c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8009510:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009514:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		if (c != (rxmsg->checksum & 0xFF)) {
 8009518:	b2da      	uxtb	r2, r3
	msg->checksum = checksum;
 800951a:	8023      	strh	r3, [r4, #0]
 800951c:	4b73      	ldr	r3, [pc, #460]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800951e:	4295      	cmp	r5, r2
 8009520:	bf0c      	ite	eq
 8009522:	220d      	moveq	r2, #13
 8009524:	220e      	movne	r2, #14
 8009526:	70da      	strb	r2, [r3, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 8009528:	2900      	cmp	r1, #0
 800952a:	d0a8      	beq.n	800947e <HAL_UART_RxCpltCallback+0x86>
 800952c:	4b6f      	ldr	r3, [pc, #444]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 800952e:	798a      	ldrb	r2, [r1, #6]
 8009530:	791b      	ldrb	r3, [r3, #4]
 8009532:	4293      	cmp	r3, r2
 8009534:	d2a3      	bcs.n	800947e <HAL_UART_RxCpltCallback+0x86>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8009536:	4870      	ldr	r0, [pc, #448]	; (80096f8 <HAL_UART_RxCpltCallback+0x300>)
 8009538:	1ad2      	subs	r2, r2, r3
 800953a:	4418      	add	r0, r3
 800953c:	2100      	movs	r1, #0
 800953e:	f004 fe4b 	bl	800e1d8 <memset>
       status->parse_error = 0;
 8009542:	4a6a      	ldr	r2, [pc, #424]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 8009544:	2300      	movs	r3, #0
 8009546:	7093      	strb	r3, [r2, #2]
 8009548:	e762      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800954a:	4e68      	ldr	r6, [pc, #416]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 800954c:	4c68      	ldr	r4, [pc, #416]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 800954e:	7933      	ldrb	r3, [r6, #4]
 8009550:	18e1      	adds	r1, r4, r3
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009556:	730b      	strb	r3, [r1, #12]
	uint16_t checksum = msg->checksum;
 8009558:	8820      	ldrh	r0, [r4, #0]
		if (status->packet_idx == rxmsg->len)
 800955a:	78e5      	ldrb	r5, [r4, #3]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800955c:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 800955e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8009562:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8009564:	0919      	lsrs	r1, r3, #4
 8009566:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8009570:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
		if (status->packet_idx == rxmsg->len)
 8009574:	4295      	cmp	r5, r2
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8009576:	7132      	strb	r2, [r6, #4]
	msg->checksum = checksum;
 8009578:	8023      	strh	r3, [r4, #0]
		if (status->packet_idx == rxmsg->len)
 800957a:	d180      	bne.n	800947e <HAL_UART_RxCpltCallback+0x86>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800957c:	220c      	movs	r2, #12
       status->parse_error = 0;
 800957e:	2300      	movs	r3, #0
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8009580:	70f2      	strb	r2, [r6, #3]
       status->parse_error = 0;
 8009582:	70b3      	strb	r3, [r6, #2]
 8009584:	e744      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->msgid |= c<<8;
 8009586:	495a      	ldr	r1, [pc, #360]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8009588:	9847      	ldr	r0, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 800958a:	880c      	ldrh	r4, [r1, #0]
		rxmsg->msgid |= c<<8;
 800958c:	688a      	ldr	r2, [r1, #8]
 800958e:	4603      	mov	r3, r0
 8009590:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8009592:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8009596:	b2db      	uxtb	r3, r3
 8009598:	0200      	lsls	r0, r0, #8
 800959a:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800959e:	091a      	lsrs	r2, r3, #4
 80095a0:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 80095a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80095a8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80095ac:	800b      	strh	r3, [r1, #0]
       status->parse_error = 0;
 80095ae:	4b4f      	ldr	r3, [pc, #316]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
		rxmsg->msgid |= c<<8;
 80095b0:	7248      	strb	r0, [r1, #9]
 80095b2:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80095b6:	0c04      	lsrs	r4, r0, #16
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80095b8:	220a      	movs	r2, #10
		rxmsg->msgid |= c<<8;
 80095ba:	2000      	movs	r0, #0
 80095bc:	728d      	strb	r5, [r1, #10]
 80095be:	72cc      	strb	r4, [r1, #11]
       status->parse_error = 0;
 80095c0:	7098      	strb	r0, [r3, #2]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80095c2:	70da      	strb	r2, [r3, #3]
 80095c4:	e724      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->msgid = c;
 80095c6:	494a      	ldr	r1, [pc, #296]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80095c8:	9d47      	ldr	r5, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 80095ca:	8808      	ldrh	r0, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80095cc:	4e47      	ldr	r6, [pc, #284]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 80095ce:	462b      	mov	r3, r5
 80095d0:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80095d2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80095d6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80095d8:	091a      	lsrs	r2, r3, #4
 80095da:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80095de:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80095e2:	7b34      	ldrb	r4, [r6, #12]
 80095e4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		rxmsg->msgid = c;
 80095e8:	2000      	movs	r0, #0
 80095ea:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
	msg->checksum = checksum;
 80095ee:	800b      	strh	r3, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80095f0:	f014 0301 	ands.w	r3, r4, #1
		rxmsg->msgid = c;
 80095f4:	724d      	strb	r5, [r1, #9]
 80095f6:	7288      	strb	r0, [r1, #10]
 80095f8:	72c8      	strb	r0, [r1, #11]
 80095fa:	78ca      	ldrb	r2, [r1, #3]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80095fc:	f000 80e2 	beq.w	80097c4 <HAL_UART_RxCpltCallback+0x3cc>
			if(rxmsg->len > 0) {
 8009600:	2a00      	cmp	r2, #0
 8009602:	f000 83c1 	beq.w	8009d88 <HAL_UART_RxCpltCallback+0x990>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8009606:	230b      	movs	r3, #11
       status->parse_error = 0;
 8009608:	70b0      	strb	r0, [r6, #2]
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800960a:	70f3      	strb	r3, [r6, #3]
 800960c:	e700      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->compid = c;
 800960e:	4938      	ldr	r1, [pc, #224]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 8009610:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 8009612:	8808      	ldrh	r0, [r1, #0]
		rxmsg->compid = c;
 8009614:	720b      	strb	r3, [r1, #8]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8009616:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8009618:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800961c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800961e:	091a      	lsrs	r2, r3, #4
 8009620:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8009624:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009628:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800962c:	2008      	movs	r0, #8
	msg->checksum = checksum;
 800962e:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8009630:	4b2e      	ldr	r3, [pc, #184]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
       status->parse_error = 0;
 8009632:	2200      	movs	r2, #0
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8009634:	70d8      	strb	r0, [r3, #3]
       status->parse_error = 0;
 8009636:	709a      	strb	r2, [r3, #2]
 8009638:	e6ea      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->sysid = c;
 800963a:	492d      	ldr	r1, [pc, #180]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 800963c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 800963e:	8808      	ldrh	r0, [r1, #0]
		rxmsg->sysid = c;
 8009640:	71cb      	strb	r3, [r1, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8009642:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8009644:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8009648:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800964a:	091a      	lsrs	r2, r3, #4
 800964c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8009650:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009654:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8009658:	2007      	movs	r0, #7
 800965a:	e7e8      	b.n	800962e <HAL_UART_RxCpltCallback+0x236>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800965c:	4a24      	ldr	r2, [pc, #144]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800965e:	9847      	ldr	r0, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 8009660:	8814      	ldrh	r4, [r2, #0]
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8009662:	6891      	ldr	r1, [r2, #8]
 8009664:	4603      	mov	r3, r0
 8009666:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8009668:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800966c:	b2db      	uxtb	r3, r3
 800966e:	0400      	lsls	r0, r0, #16
 8009670:	ea40 2011 	orr.w	r0, r0, r1, lsr #8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8009674:	0919      	lsrs	r1, r3, #4
 8009676:	ea81 2114 	eor.w	r1, r1, r4, lsr #8
 800967a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800967e:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
		if(rxmsg->len > 0){
 8009682:	78d1      	ldrb	r1, [r2, #3]
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8009684:	7250      	strb	r0, [r2, #9]
 8009686:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800968a:	0c00      	lsrs	r0, r0, #16
	msg->checksum = checksum;
 800968c:	8013      	strh	r3, [r2, #0]
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800968e:	7294      	strb	r4, [r2, #10]
 8009690:	72d0      	strb	r0, [r2, #11]
 8009692:	2300      	movs	r3, #0
		if(rxmsg->len > 0){
 8009694:	2900      	cmp	r1, #0
 8009696:	f000 80e7 	beq.w	8009868 <HAL_UART_RxCpltCallback+0x470>
       status->parse_error = 0;
 800969a:	4914      	ldr	r1, [pc, #80]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800969c:	220b      	movs	r2, #11
       status->parse_error = 0;
 800969e:	708b      	strb	r3, [r1, #2]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80096a0:	70ca      	strb	r2, [r1, #3]
 80096a2:	e6b5      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->incompat_flags = c;
 80096a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80096a6:	4912      	ldr	r1, [pc, #72]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 80096a8:	710b      	strb	r3, [r1, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80096aa:	f033 0301 	bics.w	r3, r3, #1
 80096ae:	f000 808e 	beq.w	80097ce <HAL_UART_RxCpltCallback+0x3d6>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80096b2:	490e      	ldr	r1, [pc, #56]	; (80096ec <HAL_UART_RxCpltCallback+0x2f4>)
 80096b4:	2201      	movs	r2, #1
       status->parse_error = 0;
 80096b6:	2300      	movs	r3, #0
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80096b8:	70ca      	strb	r2, [r1, #3]
       status->parse_error = 0;
 80096ba:	708b      	strb	r3, [r1, #2]
 80096bc:	e6a8      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->seq = c;
 80096be:	490c      	ldr	r1, [pc, #48]	; (80096f0 <HAL_UART_RxCpltCallback+0x2f8>)
 80096c0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 80096c2:	8808      	ldrh	r0, [r1, #0]
		rxmsg->seq = c;
 80096c4:	718b      	strb	r3, [r1, #6]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80096c6:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80096c8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80096cc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80096ce:	091a      	lsrs	r2, r3, #4
 80096d0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80096d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80096d8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80096dc:	2006      	movs	r0, #6
 80096de:	e7a6      	b.n	800962e <HAL_UART_RxCpltCallback+0x236>
 80096e0:	40004400 	.word	0x40004400
 80096e4:	20016624 	.word	0x20016624
 80096e8:	20016c00 	.word	0x20016c00
 80096ec:	20016ab4 	.word	0x20016ab4
 80096f0:	20016628 	.word	0x20016628
 80096f4:	0800e300 	.word	0x0800e300
 80096f8:	20016634 	.word	0x20016634
		if (c == MAVLINK_STX)
 80096fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80096fe:	2bfd      	cmp	r3, #253	; 0xfd
 8009700:	f000 80b9 	beq.w	8009876 <HAL_UART_RxCpltCallback+0x47e>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8009704:	2bfe      	cmp	r3, #254	; 0xfe
 8009706:	f47f aeba 	bne.w	800947e <HAL_UART_RxCpltCallback+0x86>
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800970a:	4886      	ldr	r0, [pc, #536]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
	msg->checksum = crcTmp;
 800970c:	4a86      	ldr	r2, [pc, #536]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800970e:	7b03      	ldrb	r3, [r0, #12]
	msg->checksum = crcTmp;
 8009710:	4986      	ldr	r1, [pc, #536]	; (800992c <HAL_UART_RxCpltCallback+0x534>)
 8009712:	6011      	str	r1, [r2, #0]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8009714:	f043 0301 	orr.w	r3, r3, #1
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8009718:	2102      	movs	r1, #2
       status->parse_error = 0;
 800971a:	2200      	movs	r2, #0
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800971c:	7303      	strb	r3, [r0, #12]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800971e:	70c1      	strb	r1, [r0, #3]
       status->parse_error = 0;
 8009720:	7082      	strb	r2, [r0, #2]
 8009722:	e675      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
			rxmsg->len = c;
 8009724:	4880      	ldr	r0, [pc, #512]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
 8009726:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 8009728:	8804      	ldrh	r4, [r0, #0]
			rxmsg->len = c;
 800972a:	70c3      	strb	r3, [r0, #3]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800972c:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 800972e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8009732:	b2db      	uxtb	r3, r3
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8009734:	4d7b      	ldr	r5, [pc, #492]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8009736:	091a      	lsrs	r2, r3, #4
 8009738:	7b29      	ldrb	r1, [r5, #12]
 800973a:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 800973e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009742:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8009746:	f011 0101 	ands.w	r1, r1, #1
			status->packet_idx = 0;
 800974a:	f04f 0200 	mov.w	r2, #0
	msg->checksum = checksum;
 800974e:	8003      	strh	r3, [r0, #0]
			status->packet_idx = 0;
 8009750:	712a      	strb	r2, [r5, #4]
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8009752:	d032      	beq.n	80097ba <HAL_UART_RxCpltCallback+0x3c2>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8009754:	2305      	movs	r3, #5
                            rxmsg->incompat_flags = 0;
 8009756:	8082      	strh	r2, [r0, #4]
       status->parse_error = 0;
 8009758:	70aa      	strb	r2, [r5, #2]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800975a:	70eb      	strb	r3, [r5, #3]
 800975c:	e658      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->compat_flags = c;
 800975e:	4972      	ldr	r1, [pc, #456]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
 8009760:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	uint16_t checksum = msg->checksum;
 8009762:	8808      	ldrh	r0, [r1, #0]
		rxmsg->compat_flags = c;
 8009764:	714b      	strb	r3, [r1, #5]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8009766:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8009768:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800976c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800976e:	091a      	lsrs	r2, r3, #4
 8009770:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8009774:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009778:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800977c:	2005      	movs	r0, #5
 800977e:	e756      	b.n	800962e <HAL_UART_RxCpltCallback+0x236>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
		    rxmsg->len = 0;
 8009780:	9849      	ldr	r0, [sp, #292]	; 0x124
 8009782:	70c2      	strb	r2, [r0, #3]
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8009784:	4a67      	ldr	r2, [pc, #412]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 8009786:	2102      	movs	r1, #2
	msg->checksum = crcTmp;
 8009788:	f64f 73ff 	movw	r3, #65535	; 0xffff
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800978c:	70d1      	strb	r1, [r2, #3]
	msg->checksum = crcTmp;
 800978e:	8003      	strh	r3, [r0, #0]
 8009790:	e63e      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8009792:	4b65      	ldr	r3, [pc, #404]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
       status->parse_error = 0;
 8009794:	4a63      	ldr	r2, [pc, #396]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8009796:	78db      	ldrb	r3, [r3, #3]
 8009798:	f88d 324b 	strb.w	r3, [sp, #587]	; 0x24b
       status->parse_error = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	7093      	strb	r3, [r2, #2]
 80097a0:	e636      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
                high = mid-1;
 80097a2:	1e58      	subs	r0, r3, #1
 80097a4:	1943      	adds	r3, r0, r5
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	0852      	lsrs	r2, r2, #1
        while (low < high) {
 80097aa:	42a8      	cmp	r0, r5
 80097ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80097b0:	f241 81f9 	bls.w	800aba6 <HAL_UART_RxCpltCallback+0x17ae>
 80097b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097b8:	e690      	b.n	80094dc <HAL_UART_RxCpltCallback+0xe4>
       status->parse_error = 0;
 80097ba:	4a5a      	ldr	r2, [pc, #360]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80097bc:	2303      	movs	r3, #3
       status->parse_error = 0;
 80097be:	7091      	strb	r1, [r2, #2]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80097c0:	70d3      	strb	r3, [r2, #3]
 80097c2:	e625      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
       status->parse_error = 0;
 80097c4:	4957      	ldr	r1, [pc, #348]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80097c6:	2209      	movs	r2, #9
       status->parse_error = 0;
 80097c8:	708b      	strb	r3, [r1, #2]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80097ca:	70ca      	strb	r2, [r1, #3]
 80097cc:	e620      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
       status->parse_error = 0;
 80097ce:	4c55      	ldr	r4, [pc, #340]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
	uint16_t checksum = msg->checksum;
 80097d0:	8808      	ldrh	r0, [r1, #0]
       status->parse_error = 0;
 80097d2:	70a3      	strb	r3, [r4, #2]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80097d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80097d6:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80097d8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80097dc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80097de:	091a      	lsrs	r2, r3, #4
 80097e0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80097e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80097e8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80097ec:	2204      	movs	r2, #4
	msg->checksum = checksum;
 80097ee:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80097f0:	70e2      	strb	r2, [r4, #3]
 80097f2:	e60d      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
			if (status->signing &&
 80097f4:	4b4b      	ldr	r3, [pc, #300]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	b16b      	cbz	r3, 8009816 <HAL_UART_RxCpltCallback+0x41e>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80097fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f001 81c8 	beq.w	800ab92 <HAL_UART_RxCpltCallback+0x179a>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8009802:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009804:	4847      	ldr	r0, [pc, #284]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 8009806:	6891      	ldr	r1, [r2, #8]
 8009808:	0a09      	lsrs	r1, r1, #8
 800980a:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800980c:	2800      	cmp	r0, #0
 800980e:	f001 81c0 	beq.w	800ab92 <HAL_UART_RxCpltCallback+0x179a>
 8009812:	4b44      	ldr	r3, [pc, #272]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 8009814:	781d      	ldrb	r5, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8009816:	4c43      	ldr	r4, [pc, #268]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8009818:	4943      	ldr	r1, [pc, #268]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800981a:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800981c:	f50d 7a12 	add.w	sl, sp, #584	; 0x248
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8009820:	70e3      	strb	r3, [r4, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8009822:	4650      	mov	r0, sl
 8009824:	f240 1223 	movw	r2, #291	; 0x123
 8009828:	f004 fccb 	bl	800e1c2 <memcpy>
 800982c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800982e:	78dc      	ldrb	r4, [r3, #3]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8009830:	2d01      	cmp	r5, #1
 8009832:	f041 824c 	bne.w	800acce <HAL_UART_RxCpltCallback+0x18d6>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8009836:	493b      	ldr	r1, [pc, #236]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
		status->current_rx_seq = rxmsg->seq;
 8009838:	9a49      	ldr	r2, [sp, #292]	; 0x124
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800983a:	890b      	ldrh	r3, [r1, #8]
		status->current_rx_seq = rxmsg->seq;
 800983c:	7992      	ldrb	r2, [r2, #6]
 800983e:	714a      	strb	r2, [r1, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8009840:	b903      	cbnz	r3, 8009844 <HAL_UART_RxCpltCallback+0x44c>
 8009842:	814b      	strh	r3, [r1, #10]
		status->packet_rx_success_count++;
 8009844:	4937      	ldr	r1, [pc, #220]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8009846:	f88a 4003 	strb.w	r4, [sl, #3]
		status->packet_rx_success_count++;
 800984a:	3301      	adds	r3, #1
       status->parse_error = 0;
 800984c:	2200      	movs	r2, #0
		status->packet_rx_success_count++;
 800984e:	810b      	strh	r3, [r1, #8]
       status->parse_error = 0;
 8009850:	708a      	strb	r2, [r1, #2]
			mouseDriver_readMsg(inmsg);
 8009852:	a996      	add	r1, sp, #600	; 0x258
 8009854:	f240 1213 	movw	r2, #275	; 0x113
 8009858:	4668      	mov	r0, sp
 800985a:	f004 fcb2 	bl	800e1c2 <memcpy>
 800985e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8009862:	f7ff fc1d 	bl	80090a0 <mouseDriver_readMsg>
 8009866:	e5d3      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
 8009868:	4a2e      	ldr	r2, [pc, #184]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800986a:	230c      	movs	r3, #12
       status->parse_error = 0;
 800986c:	7091      	strb	r1, [r2, #2]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800986e:	70d3      	strb	r3, [r2, #3]
 8009870:	e5ce      	b.n	8009410 <HAL_UART_RxCpltCallback+0x18>
                low = mid;
 8009872:	461d      	mov	r5, r3
 8009874:	e796      	b.n	80097a4 <HAL_UART_RxCpltCallback+0x3ac>
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8009876:	482b      	ldr	r0, [pc, #172]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
	msg->checksum = crcTmp;
 8009878:	4a2b      	ldr	r2, [pc, #172]	; (8009928 <HAL_UART_RxCpltCallback+0x530>)
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800987a:	7b03      	ldrb	r3, [r0, #12]
	msg->checksum = crcTmp;
 800987c:	492c      	ldr	r1, [pc, #176]	; (8009930 <HAL_UART_RxCpltCallback+0x538>)
 800987e:	6011      	str	r1, [r2, #0]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	e748      	b.n	8009718 <HAL_UART_RxCpltCallback+0x320>
		rxmsg->ck[1] = c;
 8009886:	9947      	ldr	r1, [sp, #284]	; 0x11c
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8009888:	7913      	ldrb	r3, [r2, #4]
		rxmsg->ck[1] = c;
 800988a:	f882 1115 	strb.w	r1, [r2, #277]	; 0x115
 800988e:	4a25      	ldr	r2, [pc, #148]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 8009890:	2502      	movs	r5, #2
 8009892:	7015      	strb	r5, [r2, #0]
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8009894:	07da      	lsls	r2, r3, #31
 8009896:	d5ad      	bpl.n	80097f4 <HAL_UART_RxCpltCallback+0x3fc>
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8009898:	4a22      	ldr	r2, [pc, #136]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 800989a:	230d      	movs	r3, #13
 800989c:	7353      	strb	r3, [r2, #13]
 800989e:	e608      	b.n	80094b2 <HAL_UART_RxCpltCallback+0xba>
        return &mavlink_message_crcs[low];
 80098a0:	4924      	ldr	r1, [pc, #144]	; (8009934 <HAL_UART_RxCpltCallback+0x53c>)
 80098a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80098a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		uint8_t crc_extra = e?e->crc_extra:0;
 80098aa:	790b      	ldrb	r3, [r1, #4]
 80098ac:	e623      	b.n	80094f6 <HAL_UART_RxCpltCallback+0xfe>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80098ae:	6903      	ldr	r3, [r0, #16]
 80098b0:	934c      	str	r3, [sp, #304]	; 0x130
	if (signing == NULL) {
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f001 817f 	beq.w	800abb6 <HAL_UART_RxCpltCallback+0x17be>
    C = 0x3c6ef372;
 80098b8:	4d1f      	ldr	r5, [pc, #124]	; (8009938 <HAL_UART_RxCpltCallback+0x540>)
 80098ba:	957c      	str	r5, [sp, #496]	; 0x1f0
    D = 0xa54ff53a;
 80098bc:	4d1f      	ldr	r5, [pc, #124]	; (800993c <HAL_UART_RxCpltCallback+0x544>)
 80098be:	957d      	str	r5, [sp, #500]	; 0x1f4
    E = 0x510e527f;
 80098c0:	4d1f      	ldr	r5, [pc, #124]	; (8009940 <HAL_UART_RxCpltCallback+0x548>)
 80098c2:	957e      	str	r5, [sp, #504]	; 0x1f8
    F = 0x9b05688c;
 80098c4:	4d1f      	ldr	r5, [pc, #124]	; (8009944 <HAL_UART_RxCpltCallback+0x54c>)
 80098c6:	957f      	str	r5, [sp, #508]	; 0x1fc
 80098c8:	461f      	mov	r7, r3
    G = 0x1f83d9ab;
 80098ca:	4d1f      	ldr	r5, [pc, #124]	; (8009948 <HAL_UART_RxCpltCallback+0x550>)
	memcpy(m->u.save_bytes + offset, p, l);
 80098cc:	f857 0f10 	ldr.w	r0, [r7, #16]!
    G = 0x1f83d9ab;
 80098d0:	9580      	str	r5, [sp, #512]	; 0x200
    H = 0x5be0cd19;
 80098d2:	f105 5574 	add.w	r5, r5, #1023410176	; 0x3d000000
 80098d6:	f5a5 0523 	sub.w	r5, r5, #10682368	; 0xa30000
	memcpy(m->u.save_bytes + offset, p, l);
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	68fb      	ldr	r3, [r7, #12]
    B = 0xbb67ae85;
 80098e0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009950 <HAL_UART_RxCpltCallback+0x558>
 80098e4:	f8cd c1ec 	str.w	ip, [sp, #492]	; 0x1ec
    H = 0x5be0cd19;
 80098e8:	f6a5 4592 	subw	r5, r5, #3218	; 0xc92
 80098ec:	9581      	str	r5, [sp, #516]	; 0x204
	memcpy(m->u.save_bytes + offset, p, l);
 80098ee:	ad82      	add	r5, sp, #520	; 0x208
 80098f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098f2:	6979      	ldr	r1, [r7, #20]
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	6938      	ldr	r0, [r7, #16]
    m->sz[1] = 0;
 80098fa:	9679      	str	r6, [sp, #484]	; 0x1e4
	memcpy(m->u.save_bytes + offset, p, l);
 80098fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 80098fe:	f104 030a 	add.w	r3, r4, #10
 8009902:	934a      	str	r3, [sp, #296]	; 0x128
    m->sz[0] += len * 8;
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	f503 7380 	add.w	r3, r3, #256	; 0x100
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800990a:	4906      	ldr	r1, [pc, #24]	; (8009924 <HAL_UART_RxCpltCallback+0x52c>)
 800990c:	9378      	str	r3, [sp, #480]	; 0x1e0
    const unsigned char *p = (const unsigned char *)v;
 800990e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    A = 0x6a09e667;
 8009910:	4a0e      	ldr	r2, [pc, #56]	; (800994c <HAL_UART_RxCpltCallback+0x554>)
 8009912:	6949      	ldr	r1, [r1, #20]
 8009914:	9155      	str	r1, [sp, #340]	; 0x154
    const unsigned char *p = (const unsigned char *)v;
 8009916:	3302      	adds	r3, #2
    A = 0x6a09e667;
 8009918:	927a      	str	r2, [sp, #488]	; 0x1e8
    const unsigned char *p = (const unsigned char *)v;
 800991a:	934b      	str	r3, [sp, #300]	; 0x12c
    offset = (old_sz / 8) % 64;
 800991c:	2420      	movs	r4, #32
 800991e:	f50d 7a12 	add.w	sl, sp, #584	; 0x248
 8009922:	e01b      	b.n	800995c <HAL_UART_RxCpltCallback+0x564>
 8009924:	20016ab4 	.word	0x20016ab4
 8009928:	20016628 	.word	0x20016628
 800992c:	00feffff 	.word	0x00feffff
 8009930:	00fdffff 	.word	0x00fdffff
 8009934:	0800e300 	.word	0x0800e300
 8009938:	3c6ef372 	.word	0x3c6ef372
 800993c:	a54ff53a 	.word	0xa54ff53a
 8009940:	510e527f 	.word	0x510e527f
 8009944:	9b05688c 	.word	0x9b05688c
 8009948:	1f83d9ab 	.word	0x1f83d9ab
 800994c:	6a09e667 	.word	0x6a09e667
 8009950:	bb67ae85 	.word	0xbb67ae85
    while(len > 0){
 8009954:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 822c 	beq.w	8009db4 <HAL_UART_RxCpltCallback+0x9bc>
 800995c:	9d4a      	ldr	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800995e:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
	uint32_t l = 64 - offset;
 8009960:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8009964:	42ab      	cmp	r3, r5
 8009966:	bf28      	it	cs
 8009968:	462b      	movcs	r3, r5
	len -= l;
 800996a:	1aed      	subs	r5, r5, r3
 800996c:	954a      	str	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800996e:	a882      	add	r0, sp, #520	; 0x208
	p += l;
 8009970:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8009972:	4420      	add	r0, r4
	p += l;
 8009974:	441d      	add	r5, r3
	offset += l;
 8009976:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8009978:	461a      	mov	r2, r3
 800997a:	4631      	mov	r1, r6
	p += l;
 800997c:	954b      	str	r5, [sp, #300]	; 0x12c
	memcpy(m->u.save_bytes + offset, p, l);
 800997e:	f004 fc20 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8009982:	2c40      	cmp	r4, #64	; 0x40
 8009984:	d1e6      	bne.n	8009954 <HAL_UART_RxCpltCallback+0x55c>
                p2[0] = p1[3];
 8009986:	f89d 1217 	ldrb.w	r1, [sp, #535]	; 0x217
 800998a:	f89d 220b 	ldrb.w	r2, [sp, #523]	; 0x20b
                p2[2] = p1[1];
 800998e:	f89d 0211 	ldrb.w	r0, [sp, #529]	; 0x211
                p2[0] = p1[3];
 8009992:	9148      	str	r1, [sp, #288]	; 0x120
                p2[1] = p1[2];
 8009994:	f89d 320a 	ldrb.w	r3, [sp, #522]	; 0x20a
                p2[2] = p1[1];
 8009998:	f89d 9209 	ldrb.w	r9, [sp, #521]	; 0x209
                p2[3] = p1[0];
 800999c:	f89d 8208 	ldrb.w	r8, [sp, #520]	; 0x208
                p2[0] = p1[3];
 80099a0:	f89d e20f 	ldrb.w	lr, [sp, #527]	; 0x20f
                p2[1] = p1[2];
 80099a4:	f89d c20e 	ldrb.w	ip, [sp, #526]	; 0x20e
                p2[2] = p1[1];
 80099a8:	f89d 720d 	ldrb.w	r7, [sp, #525]	; 0x20d
                p2[3] = p1[0];
 80099ac:	f89d 620c 	ldrb.w	r6, [sp, #524]	; 0x20c
                p2[0] = p1[3];
 80099b0:	f89d 5213 	ldrb.w	r5, [sp, #531]	; 0x213
                p2[1] = p1[2];
 80099b4:	f89d 4212 	ldrb.w	r4, [sp, #530]	; 0x212
                p2[3] = p1[0];
 80099b8:	f89d b210 	ldrb.w	fp, [sp, #528]	; 0x210
                p2[1] = p1[2];
 80099bc:	f89d 1216 	ldrb.w	r1, [sp, #534]	; 0x216
                p2[0] = p1[3];
 80099c0:	f88d 2198 	strb.w	r2, [sp, #408]	; 0x198
                p2[2] = p1[1];
 80099c4:	f88d 01a2 	strb.w	r0, [sp, #418]	; 0x1a2
 80099c8:	f89d 2215 	ldrb.w	r2, [sp, #533]	; 0x215
                p2[0] = p1[3];
 80099cc:	9848      	ldr	r0, [sp, #288]	; 0x120
                p2[1] = p1[2];
 80099ce:	f88d 3199 	strb.w	r3, [sp, #409]	; 0x199
                p2[2] = p1[1];
 80099d2:	f88d 919a 	strb.w	r9, [sp, #410]	; 0x19a
                p2[3] = p1[0];
 80099d6:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
 80099da:	f88d 819b 	strb.w	r8, [sp, #411]	; 0x19b
                p2[0] = p1[3];
 80099de:	f88d e19c 	strb.w	lr, [sp, #412]	; 0x19c
                p2[1] = p1[2];
 80099e2:	f88d c19d 	strb.w	ip, [sp, #413]	; 0x19d
                p2[2] = p1[1];
 80099e6:	f88d 719e 	strb.w	r7, [sp, #414]	; 0x19e
                p2[3] = p1[0];
 80099ea:	f88d 619f 	strb.w	r6, [sp, #415]	; 0x19f
                p2[0] = p1[3];
 80099ee:	f88d 51a0 	strb.w	r5, [sp, #416]	; 0x1a0
                p2[1] = p1[2];
 80099f2:	f88d 41a1 	strb.w	r4, [sp, #417]	; 0x1a1
                p2[3] = p1[0];
 80099f6:	f88d b1a3 	strb.w	fp, [sp, #419]	; 0x1a3
                p2[0] = p1[3];
 80099fa:	f88d 01a4 	strb.w	r0, [sp, #420]	; 0x1a4
                p2[1] = p1[2];
 80099fe:	f88d 11a5 	strb.w	r1, [sp, #421]	; 0x1a5
                p2[2] = p1[1];
 8009a02:	f88d 21a6 	strb.w	r2, [sp, #422]	; 0x1a6
                p2[0] = p1[3];
 8009a06:	f89d 1227 	ldrb.w	r1, [sp, #551]	; 0x227
                p2[2] = p1[1];
 8009a0a:	f89d 0221 	ldrb.w	r0, [sp, #545]	; 0x221
                p2[0] = p1[3];
 8009a0e:	9148      	str	r1, [sp, #288]	; 0x120
 8009a10:	f89d 221b 	ldrb.w	r2, [sp, #539]	; 0x21b
                p2[2] = p1[1];
 8009a14:	f89d 9219 	ldrb.w	r9, [sp, #537]	; 0x219
                p2[3] = p1[0];
 8009a18:	f89d 8218 	ldrb.w	r8, [sp, #536]	; 0x218
                p2[0] = p1[3];
 8009a1c:	f89d e21f 	ldrb.w	lr, [sp, #543]	; 0x21f
                p2[1] = p1[2];
 8009a20:	f89d c21e 	ldrb.w	ip, [sp, #542]	; 0x21e
                p2[2] = p1[1];
 8009a24:	f89d 721d 	ldrb.w	r7, [sp, #541]	; 0x21d
                p2[3] = p1[0];
 8009a28:	f89d 621c 	ldrb.w	r6, [sp, #540]	; 0x21c
                p2[0] = p1[3];
 8009a2c:	f89d 5223 	ldrb.w	r5, [sp, #547]	; 0x223
                p2[1] = p1[2];
 8009a30:	f89d 4222 	ldrb.w	r4, [sp, #546]	; 0x222
                p2[3] = p1[0];
 8009a34:	f89d b220 	ldrb.w	fp, [sp, #544]	; 0x220
 8009a38:	f88d 31a7 	strb.w	r3, [sp, #423]	; 0x1a7
                p2[1] = p1[2];
 8009a3c:	f89d 1226 	ldrb.w	r1, [sp, #550]	; 0x226
 8009a40:	f89d 321a 	ldrb.w	r3, [sp, #538]	; 0x21a
                p2[2] = p1[1];
 8009a44:	f88d 01b2 	strb.w	r0, [sp, #434]	; 0x1b2
                p2[0] = p1[3];
 8009a48:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009a4a:	f88d 21a8 	strb.w	r2, [sp, #424]	; 0x1a8
                p2[1] = p1[2];
 8009a4e:	f88d 31a9 	strb.w	r3, [sp, #425]	; 0x1a9
                p2[2] = p1[1];
 8009a52:	f89d 2225 	ldrb.w	r2, [sp, #549]	; 0x225
                p2[3] = p1[0];
 8009a56:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
                p2[2] = p1[1];
 8009a5a:	f88d 91aa 	strb.w	r9, [sp, #426]	; 0x1aa
                p2[3] = p1[0];
 8009a5e:	f88d 81ab 	strb.w	r8, [sp, #427]	; 0x1ab
                p2[0] = p1[3];
 8009a62:	f88d e1ac 	strb.w	lr, [sp, #428]	; 0x1ac
                p2[1] = p1[2];
 8009a66:	f88d c1ad 	strb.w	ip, [sp, #429]	; 0x1ad
                p2[2] = p1[1];
 8009a6a:	f88d 71ae 	strb.w	r7, [sp, #430]	; 0x1ae
                p2[3] = p1[0];
 8009a6e:	f88d 61af 	strb.w	r6, [sp, #431]	; 0x1af
                p2[0] = p1[3];
 8009a72:	f88d 51b0 	strb.w	r5, [sp, #432]	; 0x1b0
                p2[1] = p1[2];
 8009a76:	f88d 41b1 	strb.w	r4, [sp, #433]	; 0x1b1
                p2[3] = p1[0];
 8009a7a:	f88d b1b3 	strb.w	fp, [sp, #435]	; 0x1b3
                p2[0] = p1[3];
 8009a7e:	f88d 01b4 	strb.w	r0, [sp, #436]	; 0x1b4
                p2[1] = p1[2];
 8009a82:	f88d 11b5 	strb.w	r1, [sp, #437]	; 0x1b5
                p2[0] = p1[3];
 8009a86:	f89d 1237 	ldrb.w	r1, [sp, #567]	; 0x237
                p2[2] = p1[1];
 8009a8a:	f89d 0231 	ldrb.w	r0, [sp, #561]	; 0x231
                p2[0] = p1[3];
 8009a8e:	9148      	str	r1, [sp, #288]	; 0x120
                p2[2] = p1[1];
 8009a90:	f89d 9229 	ldrb.w	r9, [sp, #553]	; 0x229
                p2[3] = p1[0];
 8009a94:	f89d 8228 	ldrb.w	r8, [sp, #552]	; 0x228
                p2[0] = p1[3];
 8009a98:	f89d e22f 	ldrb.w	lr, [sp, #559]	; 0x22f
                p2[1] = p1[2];
 8009a9c:	f89d c22e 	ldrb.w	ip, [sp, #558]	; 0x22e
                p2[2] = p1[1];
 8009aa0:	f89d 722d 	ldrb.w	r7, [sp, #557]	; 0x22d
                p2[3] = p1[0];
 8009aa4:	f89d 622c 	ldrb.w	r6, [sp, #556]	; 0x22c
                p2[0] = p1[3];
 8009aa8:	f89d 5233 	ldrb.w	r5, [sp, #563]	; 0x233
                p2[1] = p1[2];
 8009aac:	f89d 4232 	ldrb.w	r4, [sp, #562]	; 0x232
                p2[3] = p1[0];
 8009ab0:	f89d b230 	ldrb.w	fp, [sp, #560]	; 0x230
                p2[1] = p1[2];
 8009ab4:	f89d 1236 	ldrb.w	r1, [sp, #566]	; 0x236
                p2[2] = p1[1];
 8009ab8:	f88d 21b6 	strb.w	r2, [sp, #438]	; 0x1b6
                p2[3] = p1[0];
 8009abc:	f88d 31b7 	strb.w	r3, [sp, #439]	; 0x1b7
                p2[0] = p1[3];
 8009ac0:	f89d 222b 	ldrb.w	r2, [sp, #555]	; 0x22b
                p2[1] = p1[2];
 8009ac4:	f89d 322a 	ldrb.w	r3, [sp, #554]	; 0x22a
                p2[2] = p1[1];
 8009ac8:	f88d 01c2 	strb.w	r0, [sp, #450]	; 0x1c2
                p2[0] = p1[3];
 8009acc:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009ace:	f88d 21b8 	strb.w	r2, [sp, #440]	; 0x1b8
                p2[1] = p1[2];
 8009ad2:	f88d 31b9 	strb.w	r3, [sp, #441]	; 0x1b9
                p2[2] = p1[1];
 8009ad6:	f89d 2235 	ldrb.w	r2, [sp, #565]	; 0x235
                p2[3] = p1[0];
 8009ada:	f89d 3234 	ldrb.w	r3, [sp, #564]	; 0x234
                p2[2] = p1[1];
 8009ade:	f88d 91ba 	strb.w	r9, [sp, #442]	; 0x1ba
                p2[3] = p1[0];
 8009ae2:	f88d 81bb 	strb.w	r8, [sp, #443]	; 0x1bb
                p2[0] = p1[3];
 8009ae6:	f88d e1bc 	strb.w	lr, [sp, #444]	; 0x1bc
                p2[1] = p1[2];
 8009aea:	f88d c1bd 	strb.w	ip, [sp, #445]	; 0x1bd
                p2[2] = p1[1];
 8009aee:	f88d 71be 	strb.w	r7, [sp, #446]	; 0x1be
                p2[3] = p1[0];
 8009af2:	f88d 61bf 	strb.w	r6, [sp, #447]	; 0x1bf
                p2[0] = p1[3];
 8009af6:	f88d 51c0 	strb.w	r5, [sp, #448]	; 0x1c0
                p2[1] = p1[2];
 8009afa:	f88d 41c1 	strb.w	r4, [sp, #449]	; 0x1c1
                p2[3] = p1[0];
 8009afe:	f88d b1c3 	strb.w	fp, [sp, #451]	; 0x1c3
                p2[0] = p1[3];
 8009b02:	f88d 01c4 	strb.w	r0, [sp, #452]	; 0x1c4
                p2[1] = p1[2];
 8009b06:	f88d 11c5 	strb.w	r1, [sp, #453]	; 0x1c5
                p2[0] = p1[3];
 8009b0a:	f89d 1247 	ldrb.w	r1, [sp, #583]	; 0x247
                p2[2] = p1[1];
 8009b0e:	f89d 9239 	ldrb.w	r9, [sp, #569]	; 0x239
                p2[3] = p1[0];
 8009b12:	f89d 8238 	ldrb.w	r8, [sp, #568]	; 0x238
                p2[1] = p1[2];
 8009b16:	f89d c23e 	ldrb.w	ip, [sp, #574]	; 0x23e
                p2[2] = p1[1];
 8009b1a:	f89d 723d 	ldrb.w	r7, [sp, #573]	; 0x23d
                p2[3] = p1[0];
 8009b1e:	f89d 623c 	ldrb.w	r6, [sp, #572]	; 0x23c
                p2[0] = p1[3];
 8009b22:	f89d 5243 	ldrb.w	r5, [sp, #579]	; 0x243
                p2[1] = p1[2];
 8009b26:	f89d 4242 	ldrb.w	r4, [sp, #578]	; 0x242
                p2[3] = p1[0];
 8009b2a:	f89d b240 	ldrb.w	fp, [sp, #576]	; 0x240
                p2[2] = p1[1];
 8009b2e:	f88d 21c6 	strb.w	r2, [sp, #454]	; 0x1c6
                p2[3] = p1[0];
 8009b32:	f88d 31c7 	strb.w	r3, [sp, #455]	; 0x1c7
                p2[0] = p1[3];
 8009b36:	f89d 223b 	ldrb.w	r2, [sp, #571]	; 0x23b
                p2[1] = p1[2];
 8009b3a:	f89d 323a 	ldrb.w	r3, [sp, #570]	; 0x23a
                p2[0] = p1[3];
 8009b3e:	f89d e23f 	ldrb.w	lr, [sp, #575]	; 0x23f
                p2[2] = p1[1];
 8009b42:	f89d 0241 	ldrb.w	r0, [sp, #577]	; 0x241
                p2[0] = p1[3];
 8009b46:	9148      	str	r1, [sp, #288]	; 0x120
 8009b48:	f88d 21c8 	strb.w	r2, [sp, #456]	; 0x1c8
                p2[1] = p1[2];
 8009b4c:	f89d 1246 	ldrb.w	r1, [sp, #582]	; 0x246
                p2[2] = p1[1];
 8009b50:	f89d 2245 	ldrb.w	r2, [sp, #581]	; 0x245
                p2[1] = p1[2];
 8009b54:	f88d 31c9 	strb.w	r3, [sp, #457]	; 0x1c9
                p2[2] = p1[1];
 8009b58:	f88d 91ca 	strb.w	r9, [sp, #458]	; 0x1ca
                p2[3] = p1[0];
 8009b5c:	f89d 3244 	ldrb.w	r3, [sp, #580]	; 0x244
 8009b60:	f88d 81cb 	strb.w	r8, [sp, #459]	; 0x1cb
                p2[1] = p1[2];
 8009b64:	f88d c1cd 	strb.w	ip, [sp, #461]	; 0x1cd
                p2[2] = p1[1];
 8009b68:	f88d 71ce 	strb.w	r7, [sp, #462]	; 0x1ce
                p2[3] = p1[0];
 8009b6c:	f88d 61cf 	strb.w	r6, [sp, #463]	; 0x1cf
                p2[0] = p1[3];
 8009b70:	f88d 51d0 	strb.w	r5, [sp, #464]	; 0x1d0
                p2[1] = p1[2];
 8009b74:	f88d 41d1 	strb.w	r4, [sp, #465]	; 0x1d1
                p2[3] = p1[0];
 8009b78:	f88d b1d3 	strb.w	fp, [sp, #467]	; 0x1d3
                p2[0] = p1[3];
 8009b7c:	f88d e1cc 	strb.w	lr, [sp, #460]	; 0x1cc
                p2[2] = p1[1];
 8009b80:	f88d 01d2 	strb.w	r0, [sp, #466]	; 0x1d2
                p2[0] = p1[3];
 8009b84:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009b86:	f88d 01d4 	strb.w	r0, [sp, #468]	; 0x1d4
                p2[1] = p1[2];
 8009b8a:	f88d 11d5 	strb.w	r1, [sp, #469]	; 0x1d5
                p2[3] = p1[0];
 8009b8e:	f88d 31d7 	strb.w	r3, [sp, #471]	; 0x1d7
                p2[2] = p1[1];
 8009b92:	f88d 21d6 	strb.w	r2, [sp, #470]	; 0x1d6
	data[i] = in[i];
 8009b96:	a96a      	add	r1, sp, #424	; 0x1a8
 8009b98:	e9d1 0100 	ldrd	r0, r1, [r1]
    AA = A;
 8009b9c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8009b9e:	934d      	str	r3, [sp, #308]	; 0x134
	data[i] = in[i];
 8009ba0:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009ba2:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
 8009ba6:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
 8009baa:	ab68      	add	r3, sp, #416	; 0x1a0
 8009bac:	ae6e      	add	r6, sp, #440	; 0x1b8
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009bb6:	e9dc 8900 	ldrd	r8, r9, [ip]
 8009bba:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8009bbe:	ac6c      	add	r4, sp, #432	; 0x1b0
    BB = B;
 8009bc0:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 8009bc2:	904e      	str	r0, [sp, #312]	; 0x138
	data[i] = in[i];
 8009bc4:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
 8009bc8:	e9dc bc00 	ldrd	fp, ip, [ip]
    CC = C;
 8009bcc:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 8009bce:	904f      	str	r0, [sp, #316]	; 0x13c
	data[i] = in[i];
 8009bd0:	e9d4 4500 	ldrd	r4, r5, [r4]
    DD = D;
 8009bd4:	987d      	ldr	r0, [sp, #500]	; 0x1f4
 8009bd6:	9050      	str	r0, [sp, #320]	; 0x140
	data[i] = in[i];
 8009bd8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009bdc:	e9ca 6708 	strd	r6, r7, [sl, #32]
 8009be0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8009be2:	9f66      	ldr	r7, [sp, #408]	; 0x198
    EE = E;
 8009be4:	987e      	ldr	r0, [sp, #504]	; 0x1f8
	data[i] = in[i];
 8009be6:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8009be8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8009bec:	e9ca bc0c 	strd	fp, ip, [sl, #48]	; 0x30
 8009bf0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8009bf4:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
    EE = E;
 8009bf8:	9051      	str	r0, [sp, #324]	; 0x144
    FF = F;
 8009bfa:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 8009bfc:	9052      	str	r0, [sp, #328]	; 0x148
	data[i] = in[i];
 8009bfe:	e9ca 7200 	strd	r7, r2, [sl]
    GG = G;
 8009c02:	9880      	ldr	r0, [sp, #512]	; 0x200
 8009c04:	9053      	str	r0, [sp, #332]	; 0x14c
    HH = H;
 8009c06:	9881      	ldr	r0, [sp, #516]	; 0x204
 8009c08:	9054      	str	r0, [sp, #336]	; 0x150
	data[i] = in[i];
 8009c0a:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 8009c0e:	4656      	mov	r6, sl
    for (i = 16; i < 64; ++i)
 8009c10:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009c14:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8009c18:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8009c1c:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8009c20:	4439      	add	r1, r7
 8009c22:	e9d6 0509 	ldrd	r0, r5, [r6, #36]	; 0x24
 8009c26:	e9d6 2701 	ldrd	r2, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009c2a:	ea4f 4473 	mov.w	r4, r3, ror #17
 8009c2e:	ea84 44f3 	eor.w	r4, r4, r3, ror #19
 8009c32:	ea84 2393 	eor.w	r3, r4, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8009c36:	4408      	add	r0, r1
 8009c38:	ea4f 14f7 	mov.w	r4, r7, ror #7
 8009c3c:	ea4f 41b2 	mov.w	r1, r2, ror #18
 8009c40:	442b      	add	r3, r5
 8009c42:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 8009c46:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 8009c4a:	ea81 01d2 	eor.w	r1, r1, r2, lsr #3
 8009c4e:	f10c 0c02 	add.w	ip, ip, #2
 8009c52:	441a      	add	r2, r3
 8009c54:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 8009c58:	4401      	add	r1, r0
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009c60:	e9c6 1310 	strd	r1, r3, [r6, #64]	; 0x40
 8009c64:	f106 0608 	add.w	r6, r6, #8
 8009c68:	d1d4      	bne.n	8009c14 <HAL_UART_RxCpltCallback+0x81c>
 8009c6a:	e9da 203c 	ldrd	r2, r0, [sl, #240]	; 0xf0
 8009c6e:	ea4f 4572 	mov.w	r5, r2, ror #17
 8009c72:	ea85 45f2 	eor.w	r5, r5, r2, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8009c76:	e9da 672f 	ldrd	r6, r7, [sl, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009c7a:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8009c7e:	f8da 10dc 	ldr.w	r1, [sl, #220]	; 0xdc
 8009c82:	f8da 20b8 	ldr.w	r2, [sl, #184]	; 0xb8
    DD = D;
 8009c86:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
    BB = B;
 8009c8a:	f8dd c138 	ldr.w	ip, [sp, #312]	; 0x138
    FF = F;
 8009c8e:	f8dd 8148 	ldr.w	r8, [sp, #328]	; 0x148
	    sigma0(data[i-15]) + data[i - 16];
 8009c92:	4411      	add	r1, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009c94:	ea4f 4370 	mov.w	r3, r0, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 8009c98:	f8da 20e0 	ldr.w	r2, [sl, #224]	; 0xe0
 8009c9c:	ea4f 14f6 	mov.w	r4, r6, ror #7
 8009ca0:	ea4f 1ef7 	mov.w	lr, r7, ror #7
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009ca4:	ea83 43f0 	eor.w	r3, r3, r0, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 8009ca8:	ea84 44b6 	eor.w	r4, r4, r6, ror #18
 8009cac:	18b2      	adds	r2, r6, r2
 8009cae:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009cb2:	ea83 2390 	eor.w	r3, r3, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8009cb6:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 8009cba:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 8009cbe:	4429      	add	r1, r5
 8009cc0:	4413      	add	r3, r2
 8009cc2:	4473      	add	r3, lr
 8009cc4:	4421      	add	r1, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8009cc6:	e9ca 133e 	strd	r1, r3, [sl, #248]	; 0xf8
    CC = C;
 8009cca:	9f4f      	ldr	r7, [sp, #316]	; 0x13c
    AA = A;
 8009ccc:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    GG = G;
 8009cce:	f8dd e14c 	ldr.w	lr, [sp, #332]	; 0x14c
    HH = H;
 8009cd2:	9b54      	ldr	r3, [sp, #336]	; 0x150
    EE = E;
 8009cd4:	9c51      	ldr	r4, [sp, #324]	; 0x144
    for (i = 0; i < 64; i++) {
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	e005      	b.n	8009ce6 <HAL_UART_RxCpltCallback+0x8ee>
 8009cda:	4667      	mov	r7, ip
 8009cdc:	46c6      	mov	lr, r8
 8009cde:	46ac      	mov	ip, r5
 8009ce0:	46a0      	mov	r8, r4
	AA = T1 + T2;
 8009ce2:	4615      	mov	r5, r2
	EE = DD + T1;
 8009ce4:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8009ce6:	ea2e 0204 	bic.w	r2, lr, r4
 8009cea:	ea08 0b04 	and.w	fp, r8, r4
 8009cee:	4610      	mov	r0, r2
 8009cf0:	465a      	mov	r2, fp
 8009cf2:	4042      	eors	r2, r0
 8009cf4:	4838      	ldr	r0, [pc, #224]	; (8009dd8 <HAL_UART_RxCpltCallback+0x9e0>)
 8009cf6:	ea4f 21f4 	mov.w	r1, r4, ror #11
 8009cfa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8009cfe:	9048      	str	r0, [sp, #288]	; 0x120
 8009d00:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 8009d04:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8009d08:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8009d0c:	440a      	add	r2, r1
 8009d0e:	4402      	add	r2, r0
 8009d10:	9848      	ldr	r0, [sp, #288]	; 0x120
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8009d12:	ea4f 3175 	mov.w	r1, r5, ror #13
 8009d16:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8009d1a:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8009d1c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8009d20:	ea07 000c 	and.w	r0, r7, ip
 8009d24:	ea0b 0b05 	and.w	fp, fp, r5
 8009d28:	ea8b 0b00 	eor.w	fp, fp, r0
 8009d2c:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 8009d30:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8009d32:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8009d34:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 8009d36:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 8009d38:	eb02 0009 	add.w	r0, r2, r9
 8009d3c:	4673      	mov	r3, lr
	AA = T1 + T2;
 8009d3e:	440a      	add	r2, r1
 8009d40:	46b9      	mov	r9, r7
    for (i = 0; i < 64; i++) {
 8009d42:	d1ca      	bne.n	8009cda <HAL_UART_RxCpltCallback+0x8e2>
 8009d44:	4611      	mov	r1, r2
 8009d46:	4602      	mov	r2, r0
    D += DD;
 8009d48:	9850      	ldr	r0, [sp, #320]	; 0x140
    A += AA;
 8009d4a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    D += DD;
 8009d4c:	4438      	add	r0, r7
 8009d4e:	4607      	mov	r7, r0
    E += EE;
 8009d50:	9851      	ldr	r0, [sp, #324]	; 0x144
    D += DD;
 8009d52:	977d      	str	r7, [sp, #500]	; 0x1f4
    E += EE;
 8009d54:	4410      	add	r0, r2
 8009d56:	4602      	mov	r2, r0
    F += FF;
 8009d58:	9852      	ldr	r0, [sp, #328]	; 0x148
    E += EE;
 8009d5a:	927e      	str	r2, [sp, #504]	; 0x1f8
    A += AA;
 8009d5c:	440b      	add	r3, r1
    F += FF;
 8009d5e:	4420      	add	r0, r4
 8009d60:	4604      	mov	r4, r0
    A += AA;
 8009d62:	4619      	mov	r1, r3
    G += GG;
 8009d64:	9853      	ldr	r0, [sp, #332]	; 0x14c
    B += BB;
 8009d66:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    F += FF;
 8009d68:	947f      	str	r4, [sp, #508]	; 0x1fc
    B += BB;
 8009d6a:	442b      	add	r3, r5
    G += GG;
 8009d6c:	4440      	add	r0, r8
    B += BB;
 8009d6e:	461d      	mov	r5, r3
    G += GG;
 8009d70:	4606      	mov	r6, r0
    C += CC;
 8009d72:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    H += HH;
 8009d74:	9854      	ldr	r0, [sp, #336]	; 0x150
    A += AA;
 8009d76:	917a      	str	r1, [sp, #488]	; 0x1e8
    C += CC;
 8009d78:	4463      	add	r3, ip
    H += HH;
 8009d7a:	4470      	add	r0, lr
    B += BB;
 8009d7c:	957b      	str	r5, [sp, #492]	; 0x1ec
    C += CC;
 8009d7e:	937c      	str	r3, [sp, #496]	; 0x1f0
    G += GG;
 8009d80:	9680      	str	r6, [sp, #512]	; 0x200
    H += HH;
 8009d82:	9081      	str	r0, [sp, #516]	; 0x204
	    offset = 0;
 8009d84:	2400      	movs	r4, #0
 8009d86:	e5e5      	b.n	8009954 <HAL_UART_RxCpltCallback+0x55c>
       status->parse_error = 0;
 8009d88:	4914      	ldr	r1, [pc, #80]	; (8009ddc <HAL_UART_RxCpltCallback+0x9e4>)
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8009d8a:	230c      	movs	r3, #12
       status->parse_error = 0;
 8009d8c:	708a      	strb	r2, [r1, #2]
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8009d8e:	70cb      	strb	r3, [r1, #3]
 8009d90:	f7ff bb3e 	b.w	8009410 <HAL_UART_RxCpltCallback+0x18>
 8009d94:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <HAL_UART_RxCpltCallback+0x9e4>)
 8009d96:	2501      	movs	r5, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8009d98:	07db      	lsls	r3, r3, #31
 8009d9a:	7015      	strb	r5, [r2, #0]
 8009d9c:	f57f ad2a 	bpl.w	80097f4 <HAL_UART_RxCpltCallback+0x3fc>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8009da0:	480e      	ldr	r0, [pc, #56]	; (8009ddc <HAL_UART_RxCpltCallback+0x9e4>)
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8009da2:	2300      	movs	r3, #0
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8009da4:	210f      	movs	r1, #15
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8009da6:	220d      	movs	r2, #13
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8009da8:	70c1      	strb	r1, [r0, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8009daa:	7342      	strb	r2, [r0, #13]
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8009dac:	7003      	strb	r3, [r0, #0]
       status->parse_error = 0;
 8009dae:	7083      	strb	r3, [r0, #2]
 8009db0:	f7ff bb2e 	b.w	8009410 <HAL_UART_RxCpltCallback+0x18>
    uint32_t old_sz = m->sz[0];
 8009db4:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 8009db6:	2210      	movs	r2, #16
 8009db8:	18a2      	adds	r2, r4, r2
 8009dba:	bf28      	it	cs
 8009dbc:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 8009dbe:	9278      	str	r2, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8009dc0:	b113      	cbz	r3, 8009dc8 <HAL_UART_RxCpltCallback+0x9d0>
	++m->sz[1];
 8009dc2:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	9379      	str	r3, [sp, #484]	; 0x1e4
    const unsigned char *p = (const unsigned char *)v;
 8009dc8:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <HAL_UART_RxCpltCallback+0x9e8>)
 8009dca:	934b      	str	r3, [sp, #300]	; 0x12c
    offset = (old_sz / 8) % 64;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8009dd2:	934a      	str	r3, [sp, #296]	; 0x128
 8009dd4:	e00a      	b.n	8009dec <HAL_UART_RxCpltCallback+0x9f4>
 8009dd6:	bf00      	nop
 8009dd8:	0800e360 	.word	0x0800e360
 8009ddc:	20016ab4 	.word	0x20016ab4
 8009de0:	2001673c 	.word	0x2001673c
    while(len > 0){
 8009de4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 8216 	beq.w	800a218 <HAL_UART_RxCpltCallback+0xe20>
 8009dec:	9d4a      	ldr	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 8009dee:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
	uint32_t l = 64 - offset;
 8009df0:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	bf28      	it	cs
 8009df8:	462b      	movcs	r3, r5
	len -= l;
 8009dfa:	1aed      	subs	r5, r5, r3
 8009dfc:	954a      	str	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 8009dfe:	a882      	add	r0, sp, #520	; 0x208
	p += l;
 8009e00:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8009e02:	4420      	add	r0, r4
	p += l;
 8009e04:	441d      	add	r5, r3
	offset += l;
 8009e06:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4631      	mov	r1, r6
	p += l;
 8009e0c:	954b      	str	r5, [sp, #300]	; 0x12c
	memcpy(m->u.save_bytes + offset, p, l);
 8009e0e:	f004 f9d8 	bl	800e1c2 <memcpy>
	if(offset == 64){
 8009e12:	2c40      	cmp	r4, #64	; 0x40
 8009e14:	d1e6      	bne.n	8009de4 <HAL_UART_RxCpltCallback+0x9ec>
                p2[0] = p1[3];
 8009e16:	f89d 1217 	ldrb.w	r1, [sp, #535]	; 0x217
 8009e1a:	f89d 220b 	ldrb.w	r2, [sp, #523]	; 0x20b
                p2[2] = p1[1];
 8009e1e:	f89d 0211 	ldrb.w	r0, [sp, #529]	; 0x211
                p2[0] = p1[3];
 8009e22:	9148      	str	r1, [sp, #288]	; 0x120
                p2[1] = p1[2];
 8009e24:	f89d 320a 	ldrb.w	r3, [sp, #522]	; 0x20a
                p2[2] = p1[1];
 8009e28:	f89d 9209 	ldrb.w	r9, [sp, #521]	; 0x209
                p2[3] = p1[0];
 8009e2c:	f89d 8208 	ldrb.w	r8, [sp, #520]	; 0x208
                p2[0] = p1[3];
 8009e30:	f89d e20f 	ldrb.w	lr, [sp, #527]	; 0x20f
                p2[1] = p1[2];
 8009e34:	f89d c20e 	ldrb.w	ip, [sp, #526]	; 0x20e
                p2[2] = p1[1];
 8009e38:	f89d 720d 	ldrb.w	r7, [sp, #525]	; 0x20d
                p2[3] = p1[0];
 8009e3c:	f89d 620c 	ldrb.w	r6, [sp, #524]	; 0x20c
                p2[0] = p1[3];
 8009e40:	f89d 5213 	ldrb.w	r5, [sp, #531]	; 0x213
                p2[1] = p1[2];
 8009e44:	f89d 4212 	ldrb.w	r4, [sp, #530]	; 0x212
                p2[3] = p1[0];
 8009e48:	f89d b210 	ldrb.w	fp, [sp, #528]	; 0x210
                p2[1] = p1[2];
 8009e4c:	f89d 1216 	ldrb.w	r1, [sp, #534]	; 0x216
                p2[0] = p1[3];
 8009e50:	f88d 2198 	strb.w	r2, [sp, #408]	; 0x198
                p2[2] = p1[1];
 8009e54:	f88d 01a2 	strb.w	r0, [sp, #418]	; 0x1a2
 8009e58:	f89d 2215 	ldrb.w	r2, [sp, #533]	; 0x215
                p2[0] = p1[3];
 8009e5c:	9848      	ldr	r0, [sp, #288]	; 0x120
                p2[1] = p1[2];
 8009e5e:	f88d 3199 	strb.w	r3, [sp, #409]	; 0x199
                p2[2] = p1[1];
 8009e62:	f88d 919a 	strb.w	r9, [sp, #410]	; 0x19a
                p2[3] = p1[0];
 8009e66:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
 8009e6a:	f88d 819b 	strb.w	r8, [sp, #411]	; 0x19b
                p2[0] = p1[3];
 8009e6e:	f88d e19c 	strb.w	lr, [sp, #412]	; 0x19c
                p2[1] = p1[2];
 8009e72:	f88d c19d 	strb.w	ip, [sp, #413]	; 0x19d
                p2[2] = p1[1];
 8009e76:	f88d 719e 	strb.w	r7, [sp, #414]	; 0x19e
                p2[3] = p1[0];
 8009e7a:	f88d 619f 	strb.w	r6, [sp, #415]	; 0x19f
                p2[0] = p1[3];
 8009e7e:	f88d 51a0 	strb.w	r5, [sp, #416]	; 0x1a0
                p2[1] = p1[2];
 8009e82:	f88d 41a1 	strb.w	r4, [sp, #417]	; 0x1a1
                p2[3] = p1[0];
 8009e86:	f88d b1a3 	strb.w	fp, [sp, #419]	; 0x1a3
                p2[0] = p1[3];
 8009e8a:	f88d 01a4 	strb.w	r0, [sp, #420]	; 0x1a4
                p2[1] = p1[2];
 8009e8e:	f88d 11a5 	strb.w	r1, [sp, #421]	; 0x1a5
                p2[2] = p1[1];
 8009e92:	f88d 21a6 	strb.w	r2, [sp, #422]	; 0x1a6
                p2[0] = p1[3];
 8009e96:	f89d 1227 	ldrb.w	r1, [sp, #551]	; 0x227
                p2[2] = p1[1];
 8009e9a:	f89d 0221 	ldrb.w	r0, [sp, #545]	; 0x221
                p2[0] = p1[3];
 8009e9e:	9148      	str	r1, [sp, #288]	; 0x120
 8009ea0:	f89d 221b 	ldrb.w	r2, [sp, #539]	; 0x21b
                p2[2] = p1[1];
 8009ea4:	f89d 9219 	ldrb.w	r9, [sp, #537]	; 0x219
                p2[3] = p1[0];
 8009ea8:	f89d 8218 	ldrb.w	r8, [sp, #536]	; 0x218
                p2[0] = p1[3];
 8009eac:	f89d e21f 	ldrb.w	lr, [sp, #543]	; 0x21f
                p2[1] = p1[2];
 8009eb0:	f89d c21e 	ldrb.w	ip, [sp, #542]	; 0x21e
                p2[2] = p1[1];
 8009eb4:	f89d 721d 	ldrb.w	r7, [sp, #541]	; 0x21d
                p2[3] = p1[0];
 8009eb8:	f89d 621c 	ldrb.w	r6, [sp, #540]	; 0x21c
                p2[0] = p1[3];
 8009ebc:	f89d 5223 	ldrb.w	r5, [sp, #547]	; 0x223
                p2[1] = p1[2];
 8009ec0:	f89d 4222 	ldrb.w	r4, [sp, #546]	; 0x222
                p2[3] = p1[0];
 8009ec4:	f89d b220 	ldrb.w	fp, [sp, #544]	; 0x220
 8009ec8:	f88d 31a7 	strb.w	r3, [sp, #423]	; 0x1a7
                p2[1] = p1[2];
 8009ecc:	f89d 1226 	ldrb.w	r1, [sp, #550]	; 0x226
 8009ed0:	f89d 321a 	ldrb.w	r3, [sp, #538]	; 0x21a
                p2[2] = p1[1];
 8009ed4:	f88d 01b2 	strb.w	r0, [sp, #434]	; 0x1b2
                p2[0] = p1[3];
 8009ed8:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009eda:	f88d 21a8 	strb.w	r2, [sp, #424]	; 0x1a8
                p2[1] = p1[2];
 8009ede:	f88d 31a9 	strb.w	r3, [sp, #425]	; 0x1a9
                p2[2] = p1[1];
 8009ee2:	f89d 2225 	ldrb.w	r2, [sp, #549]	; 0x225
                p2[3] = p1[0];
 8009ee6:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
                p2[2] = p1[1];
 8009eea:	f88d 91aa 	strb.w	r9, [sp, #426]	; 0x1aa
                p2[3] = p1[0];
 8009eee:	f88d 81ab 	strb.w	r8, [sp, #427]	; 0x1ab
                p2[0] = p1[3];
 8009ef2:	f88d e1ac 	strb.w	lr, [sp, #428]	; 0x1ac
                p2[1] = p1[2];
 8009ef6:	f88d c1ad 	strb.w	ip, [sp, #429]	; 0x1ad
                p2[2] = p1[1];
 8009efa:	f88d 71ae 	strb.w	r7, [sp, #430]	; 0x1ae
                p2[3] = p1[0];
 8009efe:	f88d 61af 	strb.w	r6, [sp, #431]	; 0x1af
                p2[0] = p1[3];
 8009f02:	f88d 51b0 	strb.w	r5, [sp, #432]	; 0x1b0
                p2[1] = p1[2];
 8009f06:	f88d 41b1 	strb.w	r4, [sp, #433]	; 0x1b1
                p2[3] = p1[0];
 8009f0a:	f88d b1b3 	strb.w	fp, [sp, #435]	; 0x1b3
                p2[0] = p1[3];
 8009f0e:	f88d 01b4 	strb.w	r0, [sp, #436]	; 0x1b4
                p2[1] = p1[2];
 8009f12:	f88d 11b5 	strb.w	r1, [sp, #437]	; 0x1b5
                p2[0] = p1[3];
 8009f16:	f89d 1237 	ldrb.w	r1, [sp, #567]	; 0x237
                p2[2] = p1[1];
 8009f1a:	f89d 0231 	ldrb.w	r0, [sp, #561]	; 0x231
                p2[0] = p1[3];
 8009f1e:	9148      	str	r1, [sp, #288]	; 0x120
                p2[2] = p1[1];
 8009f20:	f89d 9229 	ldrb.w	r9, [sp, #553]	; 0x229
                p2[3] = p1[0];
 8009f24:	f89d 8228 	ldrb.w	r8, [sp, #552]	; 0x228
                p2[0] = p1[3];
 8009f28:	f89d e22f 	ldrb.w	lr, [sp, #559]	; 0x22f
                p2[1] = p1[2];
 8009f2c:	f89d c22e 	ldrb.w	ip, [sp, #558]	; 0x22e
                p2[2] = p1[1];
 8009f30:	f89d 722d 	ldrb.w	r7, [sp, #557]	; 0x22d
                p2[3] = p1[0];
 8009f34:	f89d 622c 	ldrb.w	r6, [sp, #556]	; 0x22c
                p2[0] = p1[3];
 8009f38:	f89d 5233 	ldrb.w	r5, [sp, #563]	; 0x233
                p2[1] = p1[2];
 8009f3c:	f89d 4232 	ldrb.w	r4, [sp, #562]	; 0x232
                p2[3] = p1[0];
 8009f40:	f89d b230 	ldrb.w	fp, [sp, #560]	; 0x230
                p2[1] = p1[2];
 8009f44:	f89d 1236 	ldrb.w	r1, [sp, #566]	; 0x236
                p2[2] = p1[1];
 8009f48:	f88d 21b6 	strb.w	r2, [sp, #438]	; 0x1b6
                p2[3] = p1[0];
 8009f4c:	f88d 31b7 	strb.w	r3, [sp, #439]	; 0x1b7
                p2[0] = p1[3];
 8009f50:	f89d 222b 	ldrb.w	r2, [sp, #555]	; 0x22b
                p2[1] = p1[2];
 8009f54:	f89d 322a 	ldrb.w	r3, [sp, #554]	; 0x22a
                p2[2] = p1[1];
 8009f58:	f88d 01c2 	strb.w	r0, [sp, #450]	; 0x1c2
                p2[0] = p1[3];
 8009f5c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009f5e:	f88d 21b8 	strb.w	r2, [sp, #440]	; 0x1b8
                p2[1] = p1[2];
 8009f62:	f88d 31b9 	strb.w	r3, [sp, #441]	; 0x1b9
                p2[2] = p1[1];
 8009f66:	f89d 2235 	ldrb.w	r2, [sp, #565]	; 0x235
                p2[3] = p1[0];
 8009f6a:	f89d 3234 	ldrb.w	r3, [sp, #564]	; 0x234
                p2[2] = p1[1];
 8009f6e:	f88d 91ba 	strb.w	r9, [sp, #442]	; 0x1ba
                p2[3] = p1[0];
 8009f72:	f88d 81bb 	strb.w	r8, [sp, #443]	; 0x1bb
                p2[0] = p1[3];
 8009f76:	f88d e1bc 	strb.w	lr, [sp, #444]	; 0x1bc
                p2[1] = p1[2];
 8009f7a:	f88d c1bd 	strb.w	ip, [sp, #445]	; 0x1bd
                p2[2] = p1[1];
 8009f7e:	f88d 71be 	strb.w	r7, [sp, #446]	; 0x1be
                p2[3] = p1[0];
 8009f82:	f88d 61bf 	strb.w	r6, [sp, #447]	; 0x1bf
                p2[0] = p1[3];
 8009f86:	f88d 51c0 	strb.w	r5, [sp, #448]	; 0x1c0
                p2[1] = p1[2];
 8009f8a:	f88d 41c1 	strb.w	r4, [sp, #449]	; 0x1c1
                p2[3] = p1[0];
 8009f8e:	f88d b1c3 	strb.w	fp, [sp, #451]	; 0x1c3
                p2[0] = p1[3];
 8009f92:	f88d 01c4 	strb.w	r0, [sp, #452]	; 0x1c4
                p2[1] = p1[2];
 8009f96:	f88d 11c5 	strb.w	r1, [sp, #453]	; 0x1c5
                p2[0] = p1[3];
 8009f9a:	f89d 1247 	ldrb.w	r1, [sp, #583]	; 0x247
                p2[2] = p1[1];
 8009f9e:	f89d 9239 	ldrb.w	r9, [sp, #569]	; 0x239
                p2[3] = p1[0];
 8009fa2:	f89d 8238 	ldrb.w	r8, [sp, #568]	; 0x238
                p2[1] = p1[2];
 8009fa6:	f89d c23e 	ldrb.w	ip, [sp, #574]	; 0x23e
                p2[2] = p1[1];
 8009faa:	f89d 723d 	ldrb.w	r7, [sp, #573]	; 0x23d
                p2[3] = p1[0];
 8009fae:	f89d 623c 	ldrb.w	r6, [sp, #572]	; 0x23c
                p2[0] = p1[3];
 8009fb2:	f89d 5243 	ldrb.w	r5, [sp, #579]	; 0x243
                p2[1] = p1[2];
 8009fb6:	f89d 4242 	ldrb.w	r4, [sp, #578]	; 0x242
                p2[3] = p1[0];
 8009fba:	f89d b240 	ldrb.w	fp, [sp, #576]	; 0x240
                p2[2] = p1[1];
 8009fbe:	f88d 21c6 	strb.w	r2, [sp, #454]	; 0x1c6
                p2[3] = p1[0];
 8009fc2:	f88d 31c7 	strb.w	r3, [sp, #455]	; 0x1c7
                p2[0] = p1[3];
 8009fc6:	f89d 223b 	ldrb.w	r2, [sp, #571]	; 0x23b
                p2[1] = p1[2];
 8009fca:	f89d 323a 	ldrb.w	r3, [sp, #570]	; 0x23a
                p2[0] = p1[3];
 8009fce:	f89d e23f 	ldrb.w	lr, [sp, #575]	; 0x23f
                p2[2] = p1[1];
 8009fd2:	f89d 0241 	ldrb.w	r0, [sp, #577]	; 0x241
                p2[0] = p1[3];
 8009fd6:	9148      	str	r1, [sp, #288]	; 0x120
 8009fd8:	f88d 21c8 	strb.w	r2, [sp, #456]	; 0x1c8
                p2[1] = p1[2];
 8009fdc:	f89d 1246 	ldrb.w	r1, [sp, #582]	; 0x246
                p2[2] = p1[1];
 8009fe0:	f89d 2245 	ldrb.w	r2, [sp, #581]	; 0x245
                p2[1] = p1[2];
 8009fe4:	f88d 31c9 	strb.w	r3, [sp, #457]	; 0x1c9
                p2[2] = p1[1];
 8009fe8:	f88d 91ca 	strb.w	r9, [sp, #458]	; 0x1ca
                p2[3] = p1[0];
 8009fec:	f89d 3244 	ldrb.w	r3, [sp, #580]	; 0x244
 8009ff0:	f88d 81cb 	strb.w	r8, [sp, #459]	; 0x1cb
                p2[1] = p1[2];
 8009ff4:	f88d c1cd 	strb.w	ip, [sp, #461]	; 0x1cd
                p2[2] = p1[1];
 8009ff8:	f88d 71ce 	strb.w	r7, [sp, #462]	; 0x1ce
                p2[3] = p1[0];
 8009ffc:	f88d 61cf 	strb.w	r6, [sp, #463]	; 0x1cf
                p2[0] = p1[3];
 800a000:	f88d 51d0 	strb.w	r5, [sp, #464]	; 0x1d0
                p2[1] = p1[2];
 800a004:	f88d 41d1 	strb.w	r4, [sp, #465]	; 0x1d1
                p2[3] = p1[0];
 800a008:	f88d b1d3 	strb.w	fp, [sp, #467]	; 0x1d3
                p2[0] = p1[3];
 800a00c:	f88d e1cc 	strb.w	lr, [sp, #460]	; 0x1cc
                p2[2] = p1[1];
 800a010:	f88d 01d2 	strb.w	r0, [sp, #466]	; 0x1d2
                p2[0] = p1[3];
 800a014:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a016:	f88d 01d4 	strb.w	r0, [sp, #468]	; 0x1d4
                p2[1] = p1[2];
 800a01a:	f88d 11d5 	strb.w	r1, [sp, #469]	; 0x1d5
                p2[3] = p1[0];
 800a01e:	f88d 31d7 	strb.w	r3, [sp, #471]	; 0x1d7
                p2[2] = p1[1];
 800a022:	f88d 21d6 	strb.w	r2, [sp, #470]	; 0x1d6
	data[i] = in[i];
 800a026:	a96a      	add	r1, sp, #424	; 0x1a8
 800a028:	e9d1 0100 	ldrd	r0, r1, [r1]
    AA = A;
 800a02c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800a02e:	934d      	str	r3, [sp, #308]	; 0x134
	data[i] = in[i];
 800a030:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 800a032:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
 800a036:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
 800a03a:	ab68      	add	r3, sp, #416	; 0x1a0
 800a03c:	ae6e      	add	r6, sp, #440	; 0x1b8
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	e9d6 6700 	ldrd	r6, r7, [r6]
 800a046:	e9dc 8900 	ldrd	r8, r9, [ip]
 800a04a:	e9ca 0104 	strd	r0, r1, [sl, #16]
 800a04e:	ac6c      	add	r4, sp, #432	; 0x1b0
    BB = B;
 800a050:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 800a052:	904e      	str	r0, [sp, #312]	; 0x138
	data[i] = in[i];
 800a054:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
 800a058:	e9dc bc00 	ldrd	fp, ip, [ip]
    CC = C;
 800a05c:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 800a05e:	904f      	str	r0, [sp, #316]	; 0x13c
	data[i] = in[i];
 800a060:	e9d4 4500 	ldrd	r4, r5, [r4]
    DD = D;
 800a064:	987d      	ldr	r0, [sp, #500]	; 0x1f4
 800a066:	9050      	str	r0, [sp, #320]	; 0x140
	data[i] = in[i];
 800a068:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a06c:	e9ca 6708 	strd	r6, r7, [sl, #32]
 800a070:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800a072:	9f66      	ldr	r7, [sp, #408]	; 0x198
    EE = E;
 800a074:	987e      	ldr	r0, [sp, #504]	; 0x1f8
	data[i] = in[i];
 800a076:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 800a078:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800a07c:	e9ca bc0c 	strd	fp, ip, [sl, #48]	; 0x30
 800a080:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800a084:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
    EE = E;
 800a088:	9051      	str	r0, [sp, #324]	; 0x144
    FF = F;
 800a08a:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 800a08c:	9052      	str	r0, [sp, #328]	; 0x148
	data[i] = in[i];
 800a08e:	e9ca 7200 	strd	r7, r2, [sl]
    GG = G;
 800a092:	9880      	ldr	r0, [sp, #512]	; 0x200
 800a094:	9053      	str	r0, [sp, #332]	; 0x14c
    HH = H;
 800a096:	9881      	ldr	r0, [sp, #516]	; 0x204
 800a098:	9054      	str	r0, [sp, #336]	; 0x150
	data[i] = in[i];
 800a09a:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 800a09e:	4656      	mov	r6, sl
    for (i = 16; i < 64; ++i)
 800a0a0:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a0a4:	ea4f 40f1 	mov.w	r0, r1, ror #19
 800a0a8:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 800a0ac:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a0b0:	4439      	add	r1, r7
 800a0b2:	e9d6 0509 	ldrd	r0, r5, [r6, #36]	; 0x24
 800a0b6:	e9d6 2701 	ldrd	r2, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a0ba:	ea4f 4473 	mov.w	r4, r3, ror #17
 800a0be:	ea84 44f3 	eor.w	r4, r4, r3, ror #19
 800a0c2:	ea84 2393 	eor.w	r3, r4, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a0c6:	4408      	add	r0, r1
 800a0c8:	ea4f 14f7 	mov.w	r4, r7, ror #7
 800a0cc:	ea4f 41b2 	mov.w	r1, r2, ror #18
 800a0d0:	442b      	add	r3, r5
 800a0d2:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 800a0d6:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 800a0da:	ea81 01d2 	eor.w	r1, r1, r2, lsr #3
 800a0de:	f10c 0c02 	add.w	ip, ip, #2
 800a0e2:	441a      	add	r2, r3
 800a0e4:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 800a0e8:	4401      	add	r1, r0
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a0f0:	e9c6 1310 	strd	r1, r3, [r6, #64]	; 0x40
 800a0f4:	f106 0608 	add.w	r6, r6, #8
 800a0f8:	d1d4      	bne.n	800a0a4 <HAL_UART_RxCpltCallback+0xcac>
 800a0fa:	e9da 203c 	ldrd	r2, r0, [sl, #240]	; 0xf0
 800a0fe:	ea4f 4572 	mov.w	r5, r2, ror #17
 800a102:	ea85 45f2 	eor.w	r5, r5, r2, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800a106:	e9da 672f 	ldrd	r6, r7, [sl, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a10a:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a10e:	f8da 10dc 	ldr.w	r1, [sl, #220]	; 0xdc
 800a112:	f8da 20b8 	ldr.w	r2, [sl, #184]	; 0xb8
    DD = D;
 800a116:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
    BB = B;
 800a11a:	f8dd c138 	ldr.w	ip, [sp, #312]	; 0x138
    FF = F;
 800a11e:	f8dd 8148 	ldr.w	r8, [sp, #328]	; 0x148
	    sigma0(data[i-15]) + data[i - 16];
 800a122:	4411      	add	r1, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a124:	ea4f 4370 	mov.w	r3, r0, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800a128:	f8da 20e0 	ldr.w	r2, [sl, #224]	; 0xe0
 800a12c:	ea4f 14f6 	mov.w	r4, r6, ror #7
 800a130:	ea4f 1ef7 	mov.w	lr, r7, ror #7
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a134:	ea83 43f0 	eor.w	r3, r3, r0, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800a138:	ea84 44b6 	eor.w	r4, r4, r6, ror #18
 800a13c:	18b2      	adds	r2, r6, r2
 800a13e:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a142:	ea83 2390 	eor.w	r3, r3, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a146:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 800a14a:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800a14e:	4429      	add	r1, r5
 800a150:	4413      	add	r3, r2
 800a152:	4473      	add	r3, lr
 800a154:	4421      	add	r1, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a156:	e9ca 133e 	strd	r1, r3, [sl, #248]	; 0xf8
    CC = C;
 800a15a:	9f4f      	ldr	r7, [sp, #316]	; 0x13c
    AA = A;
 800a15c:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    GG = G;
 800a15e:	f8dd e14c 	ldr.w	lr, [sp, #332]	; 0x14c
    HH = H;
 800a162:	9b54      	ldr	r3, [sp, #336]	; 0x150
    EE = E;
 800a164:	9c51      	ldr	r4, [sp, #324]	; 0x144
    for (i = 0; i < 64; i++) {
 800a166:	2600      	movs	r6, #0
 800a168:	e005      	b.n	800a176 <HAL_UART_RxCpltCallback+0xd7e>
 800a16a:	4667      	mov	r7, ip
 800a16c:	46c6      	mov	lr, r8
 800a16e:	46ac      	mov	ip, r5
 800a170:	46a0      	mov	r8, r4
	AA = T1 + T2;
 800a172:	4615      	mov	r5, r2
	EE = DD + T1;
 800a174:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a176:	ea2e 0204 	bic.w	r2, lr, r4
 800a17a:	ea04 0b08 	and.w	fp, r4, r8
 800a17e:	4610      	mov	r0, r2
 800a180:	465a      	mov	r2, fp
 800a182:	4042      	eors	r2, r0
 800a184:	482d      	ldr	r0, [pc, #180]	; (800a23c <HAL_UART_RxCpltCallback+0xe44>)
 800a186:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800a18a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800a18e:	9048      	str	r0, [sp, #288]	; 0x120
 800a190:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800a194:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800a198:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 800a19c:	440a      	add	r2, r1
 800a19e:	4402      	add	r2, r0
 800a1a0:	9848      	ldr	r0, [sp, #288]	; 0x120
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a1a2:	ea4f 3175 	mov.w	r1, r5, ror #13
 800a1a6:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a1aa:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a1ac:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 800a1b0:	ea07 000c 	and.w	r0, r7, ip
 800a1b4:	ea0b 0b05 	and.w	fp, fp, r5
 800a1b8:	ea8b 0b00 	eor.w	fp, fp, r0
 800a1bc:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800a1c0:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a1c2:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a1c4:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 800a1c6:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 800a1c8:	eb02 0009 	add.w	r0, r2, r9
 800a1cc:	4673      	mov	r3, lr
	AA = T1 + T2;
 800a1ce:	440a      	add	r2, r1
 800a1d0:	46b9      	mov	r9, r7
    for (i = 0; i < 64; i++) {
 800a1d2:	d1ca      	bne.n	800a16a <HAL_UART_RxCpltCallback+0xd72>
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4602      	mov	r2, r0
    D += DD;
 800a1d8:	9850      	ldr	r0, [sp, #320]	; 0x140
    A += AA;
 800a1da:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    D += DD;
 800a1dc:	4438      	add	r0, r7
 800a1de:	4607      	mov	r7, r0
    E += EE;
 800a1e0:	9851      	ldr	r0, [sp, #324]	; 0x144
    D += DD;
 800a1e2:	977d      	str	r7, [sp, #500]	; 0x1f4
    E += EE;
 800a1e4:	4410      	add	r0, r2
 800a1e6:	4602      	mov	r2, r0
    F += FF;
 800a1e8:	9852      	ldr	r0, [sp, #328]	; 0x148
    E += EE;
 800a1ea:	927e      	str	r2, [sp, #504]	; 0x1f8
    A += AA;
 800a1ec:	440b      	add	r3, r1
    F += FF;
 800a1ee:	4420      	add	r0, r4
 800a1f0:	4604      	mov	r4, r0
    A += AA;
 800a1f2:	4619      	mov	r1, r3
    G += GG;
 800a1f4:	9853      	ldr	r0, [sp, #332]	; 0x14c
    B += BB;
 800a1f6:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    F += FF;
 800a1f8:	947f      	str	r4, [sp, #508]	; 0x1fc
    B += BB;
 800a1fa:	442b      	add	r3, r5
    G += GG;
 800a1fc:	4440      	add	r0, r8
    B += BB;
 800a1fe:	461d      	mov	r5, r3
    G += GG;
 800a200:	4606      	mov	r6, r0
    C += CC;
 800a202:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    H += HH;
 800a204:	9854      	ldr	r0, [sp, #336]	; 0x150
    A += AA;
 800a206:	917a      	str	r1, [sp, #488]	; 0x1e8
    C += CC;
 800a208:	4463      	add	r3, ip
    H += HH;
 800a20a:	4470      	add	r0, lr
    B += BB;
 800a20c:	957b      	str	r5, [sp, #492]	; 0x1ec
    C += CC;
 800a20e:	937c      	str	r3, [sp, #496]	; 0x1f0
    G += GG;
 800a210:	9680      	str	r6, [sp, #512]	; 0x200
    H += HH;
 800a212:	9081      	str	r0, [sp, #516]	; 0x204
	    offset = 0;
 800a214:	2400      	movs	r4, #0
 800a216:	e5e5      	b.n	8009de4 <HAL_UART_RxCpltCallback+0x9ec>
    uint32_t old_sz = m->sz[0];
 800a218:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 800a21a:	2238      	movs	r2, #56	; 0x38
 800a21c:	18a2      	adds	r2, r4, r2
 800a21e:	bf28      	it	cs
 800a220:	2301      	movcs	r3, #1
    m->sz[0] += len * 8;
 800a222:	9278      	str	r2, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 800a224:	b113      	cbz	r3, 800a22c <HAL_UART_RxCpltCallback+0xe34>
	++m->sz[1];
 800a226:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 800a228:	3301      	adds	r3, #1
 800a22a:	9379      	str	r3, [sp, #484]	; 0x1e4
    const unsigned char *p = (const unsigned char *)v;
 800a22c:	4b04      	ldr	r3, [pc, #16]	; (800a240 <HAL_UART_RxCpltCallback+0xe48>)
 800a22e:	934b      	str	r3, [sp, #300]	; 0x12c
    offset = (old_sz / 8) % 64;
 800a230:	2307      	movs	r3, #7
 800a232:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 800a236:	934a      	str	r3, [sp, #296]	; 0x128
 800a238:	e008      	b.n	800a24c <HAL_UART_RxCpltCallback+0xe54>
 800a23a:	bf00      	nop
 800a23c:	0800e360 	.word	0x0800e360
 800a240:	2001673e 	.word	0x2001673e
    while(len > 0){
 800a244:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8216 	beq.w	800a678 <HAL_UART_RxCpltCallback+0x1280>
 800a24c:	9d4a      	ldr	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800a24e:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
	uint32_t l = 64 - offset;
 800a250:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800a254:	42ab      	cmp	r3, r5
 800a256:	bf28      	it	cs
 800a258:	462b      	movcs	r3, r5
	len -= l;
 800a25a:	1aed      	subs	r5, r5, r3
 800a25c:	954a      	str	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800a25e:	a882      	add	r0, sp, #520	; 0x208
	p += l;
 800a260:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800a262:	4420      	add	r0, r4
	p += l;
 800a264:	441d      	add	r5, r3
	offset += l;
 800a266:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 800a268:	461a      	mov	r2, r3
 800a26a:	4631      	mov	r1, r6
	p += l;
 800a26c:	954b      	str	r5, [sp, #300]	; 0x12c
	memcpy(m->u.save_bytes + offset, p, l);
 800a26e:	f003 ffa8 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800a272:	2c40      	cmp	r4, #64	; 0x40
 800a274:	d1e6      	bne.n	800a244 <HAL_UART_RxCpltCallback+0xe4c>
                p2[0] = p1[3];
 800a276:	f89d 1217 	ldrb.w	r1, [sp, #535]	; 0x217
 800a27a:	f89d 220b 	ldrb.w	r2, [sp, #523]	; 0x20b
                p2[2] = p1[1];
 800a27e:	f89d 0211 	ldrb.w	r0, [sp, #529]	; 0x211
                p2[0] = p1[3];
 800a282:	9148      	str	r1, [sp, #288]	; 0x120
                p2[1] = p1[2];
 800a284:	f89d 320a 	ldrb.w	r3, [sp, #522]	; 0x20a
                p2[2] = p1[1];
 800a288:	f89d 9209 	ldrb.w	r9, [sp, #521]	; 0x209
                p2[3] = p1[0];
 800a28c:	f89d 8208 	ldrb.w	r8, [sp, #520]	; 0x208
                p2[0] = p1[3];
 800a290:	f89d e20f 	ldrb.w	lr, [sp, #527]	; 0x20f
                p2[1] = p1[2];
 800a294:	f89d c20e 	ldrb.w	ip, [sp, #526]	; 0x20e
                p2[2] = p1[1];
 800a298:	f89d 720d 	ldrb.w	r7, [sp, #525]	; 0x20d
                p2[3] = p1[0];
 800a29c:	f89d 620c 	ldrb.w	r6, [sp, #524]	; 0x20c
                p2[0] = p1[3];
 800a2a0:	f89d 5213 	ldrb.w	r5, [sp, #531]	; 0x213
                p2[1] = p1[2];
 800a2a4:	f89d 4212 	ldrb.w	r4, [sp, #530]	; 0x212
                p2[3] = p1[0];
 800a2a8:	f89d b210 	ldrb.w	fp, [sp, #528]	; 0x210
                p2[1] = p1[2];
 800a2ac:	f89d 1216 	ldrb.w	r1, [sp, #534]	; 0x216
                p2[0] = p1[3];
 800a2b0:	f88d 2198 	strb.w	r2, [sp, #408]	; 0x198
                p2[2] = p1[1];
 800a2b4:	f88d 01a2 	strb.w	r0, [sp, #418]	; 0x1a2
 800a2b8:	f89d 2215 	ldrb.w	r2, [sp, #533]	; 0x215
                p2[0] = p1[3];
 800a2bc:	9848      	ldr	r0, [sp, #288]	; 0x120
                p2[1] = p1[2];
 800a2be:	f88d 3199 	strb.w	r3, [sp, #409]	; 0x199
                p2[2] = p1[1];
 800a2c2:	f88d 919a 	strb.w	r9, [sp, #410]	; 0x19a
                p2[3] = p1[0];
 800a2c6:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
 800a2ca:	f88d 819b 	strb.w	r8, [sp, #411]	; 0x19b
                p2[0] = p1[3];
 800a2ce:	f88d e19c 	strb.w	lr, [sp, #412]	; 0x19c
                p2[1] = p1[2];
 800a2d2:	f88d c19d 	strb.w	ip, [sp, #413]	; 0x19d
                p2[2] = p1[1];
 800a2d6:	f88d 719e 	strb.w	r7, [sp, #414]	; 0x19e
                p2[3] = p1[0];
 800a2da:	f88d 619f 	strb.w	r6, [sp, #415]	; 0x19f
                p2[0] = p1[3];
 800a2de:	f88d 51a0 	strb.w	r5, [sp, #416]	; 0x1a0
                p2[1] = p1[2];
 800a2e2:	f88d 41a1 	strb.w	r4, [sp, #417]	; 0x1a1
                p2[3] = p1[0];
 800a2e6:	f88d b1a3 	strb.w	fp, [sp, #419]	; 0x1a3
                p2[0] = p1[3];
 800a2ea:	f88d 01a4 	strb.w	r0, [sp, #420]	; 0x1a4
                p2[1] = p1[2];
 800a2ee:	f88d 11a5 	strb.w	r1, [sp, #421]	; 0x1a5
                p2[2] = p1[1];
 800a2f2:	f88d 21a6 	strb.w	r2, [sp, #422]	; 0x1a6
                p2[0] = p1[3];
 800a2f6:	f89d 1227 	ldrb.w	r1, [sp, #551]	; 0x227
                p2[2] = p1[1];
 800a2fa:	f89d 0221 	ldrb.w	r0, [sp, #545]	; 0x221
                p2[0] = p1[3];
 800a2fe:	9148      	str	r1, [sp, #288]	; 0x120
 800a300:	f89d 221b 	ldrb.w	r2, [sp, #539]	; 0x21b
                p2[2] = p1[1];
 800a304:	f89d 9219 	ldrb.w	r9, [sp, #537]	; 0x219
                p2[3] = p1[0];
 800a308:	f89d 8218 	ldrb.w	r8, [sp, #536]	; 0x218
                p2[0] = p1[3];
 800a30c:	f89d e21f 	ldrb.w	lr, [sp, #543]	; 0x21f
                p2[1] = p1[2];
 800a310:	f89d c21e 	ldrb.w	ip, [sp, #542]	; 0x21e
                p2[2] = p1[1];
 800a314:	f89d 721d 	ldrb.w	r7, [sp, #541]	; 0x21d
                p2[3] = p1[0];
 800a318:	f89d 621c 	ldrb.w	r6, [sp, #540]	; 0x21c
                p2[0] = p1[3];
 800a31c:	f89d 5223 	ldrb.w	r5, [sp, #547]	; 0x223
                p2[1] = p1[2];
 800a320:	f89d 4222 	ldrb.w	r4, [sp, #546]	; 0x222
                p2[3] = p1[0];
 800a324:	f89d b220 	ldrb.w	fp, [sp, #544]	; 0x220
 800a328:	f88d 31a7 	strb.w	r3, [sp, #423]	; 0x1a7
                p2[1] = p1[2];
 800a32c:	f89d 1226 	ldrb.w	r1, [sp, #550]	; 0x226
 800a330:	f89d 321a 	ldrb.w	r3, [sp, #538]	; 0x21a
                p2[2] = p1[1];
 800a334:	f88d 01b2 	strb.w	r0, [sp, #434]	; 0x1b2
                p2[0] = p1[3];
 800a338:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a33a:	f88d 21a8 	strb.w	r2, [sp, #424]	; 0x1a8
                p2[1] = p1[2];
 800a33e:	f88d 31a9 	strb.w	r3, [sp, #425]	; 0x1a9
                p2[2] = p1[1];
 800a342:	f89d 2225 	ldrb.w	r2, [sp, #549]	; 0x225
                p2[3] = p1[0];
 800a346:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
                p2[2] = p1[1];
 800a34a:	f88d 91aa 	strb.w	r9, [sp, #426]	; 0x1aa
                p2[3] = p1[0];
 800a34e:	f88d 81ab 	strb.w	r8, [sp, #427]	; 0x1ab
                p2[0] = p1[3];
 800a352:	f88d e1ac 	strb.w	lr, [sp, #428]	; 0x1ac
                p2[1] = p1[2];
 800a356:	f88d c1ad 	strb.w	ip, [sp, #429]	; 0x1ad
                p2[2] = p1[1];
 800a35a:	f88d 71ae 	strb.w	r7, [sp, #430]	; 0x1ae
                p2[3] = p1[0];
 800a35e:	f88d 61af 	strb.w	r6, [sp, #431]	; 0x1af
                p2[0] = p1[3];
 800a362:	f88d 51b0 	strb.w	r5, [sp, #432]	; 0x1b0
                p2[1] = p1[2];
 800a366:	f88d 41b1 	strb.w	r4, [sp, #433]	; 0x1b1
                p2[3] = p1[0];
 800a36a:	f88d b1b3 	strb.w	fp, [sp, #435]	; 0x1b3
                p2[0] = p1[3];
 800a36e:	f88d 01b4 	strb.w	r0, [sp, #436]	; 0x1b4
                p2[1] = p1[2];
 800a372:	f88d 11b5 	strb.w	r1, [sp, #437]	; 0x1b5
                p2[0] = p1[3];
 800a376:	f89d 1237 	ldrb.w	r1, [sp, #567]	; 0x237
                p2[2] = p1[1];
 800a37a:	f89d 0231 	ldrb.w	r0, [sp, #561]	; 0x231
                p2[0] = p1[3];
 800a37e:	9148      	str	r1, [sp, #288]	; 0x120
                p2[2] = p1[1];
 800a380:	f89d 9229 	ldrb.w	r9, [sp, #553]	; 0x229
                p2[3] = p1[0];
 800a384:	f89d 8228 	ldrb.w	r8, [sp, #552]	; 0x228
                p2[0] = p1[3];
 800a388:	f89d e22f 	ldrb.w	lr, [sp, #559]	; 0x22f
                p2[1] = p1[2];
 800a38c:	f89d c22e 	ldrb.w	ip, [sp, #558]	; 0x22e
                p2[2] = p1[1];
 800a390:	f89d 722d 	ldrb.w	r7, [sp, #557]	; 0x22d
                p2[3] = p1[0];
 800a394:	f89d 622c 	ldrb.w	r6, [sp, #556]	; 0x22c
                p2[0] = p1[3];
 800a398:	f89d 5233 	ldrb.w	r5, [sp, #563]	; 0x233
                p2[1] = p1[2];
 800a39c:	f89d 4232 	ldrb.w	r4, [sp, #562]	; 0x232
                p2[3] = p1[0];
 800a3a0:	f89d b230 	ldrb.w	fp, [sp, #560]	; 0x230
                p2[1] = p1[2];
 800a3a4:	f89d 1236 	ldrb.w	r1, [sp, #566]	; 0x236
                p2[2] = p1[1];
 800a3a8:	f88d 21b6 	strb.w	r2, [sp, #438]	; 0x1b6
                p2[3] = p1[0];
 800a3ac:	f88d 31b7 	strb.w	r3, [sp, #439]	; 0x1b7
                p2[0] = p1[3];
 800a3b0:	f89d 222b 	ldrb.w	r2, [sp, #555]	; 0x22b
                p2[1] = p1[2];
 800a3b4:	f89d 322a 	ldrb.w	r3, [sp, #554]	; 0x22a
                p2[2] = p1[1];
 800a3b8:	f88d 01c2 	strb.w	r0, [sp, #450]	; 0x1c2
                p2[0] = p1[3];
 800a3bc:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a3be:	f88d 21b8 	strb.w	r2, [sp, #440]	; 0x1b8
                p2[1] = p1[2];
 800a3c2:	f88d 31b9 	strb.w	r3, [sp, #441]	; 0x1b9
                p2[2] = p1[1];
 800a3c6:	f89d 2235 	ldrb.w	r2, [sp, #565]	; 0x235
                p2[3] = p1[0];
 800a3ca:	f89d 3234 	ldrb.w	r3, [sp, #564]	; 0x234
                p2[2] = p1[1];
 800a3ce:	f88d 91ba 	strb.w	r9, [sp, #442]	; 0x1ba
                p2[3] = p1[0];
 800a3d2:	f88d 81bb 	strb.w	r8, [sp, #443]	; 0x1bb
                p2[0] = p1[3];
 800a3d6:	f88d e1bc 	strb.w	lr, [sp, #444]	; 0x1bc
                p2[1] = p1[2];
 800a3da:	f88d c1bd 	strb.w	ip, [sp, #445]	; 0x1bd
                p2[2] = p1[1];
 800a3de:	f88d 71be 	strb.w	r7, [sp, #446]	; 0x1be
                p2[3] = p1[0];
 800a3e2:	f88d 61bf 	strb.w	r6, [sp, #447]	; 0x1bf
                p2[0] = p1[3];
 800a3e6:	f88d 51c0 	strb.w	r5, [sp, #448]	; 0x1c0
                p2[1] = p1[2];
 800a3ea:	f88d 41c1 	strb.w	r4, [sp, #449]	; 0x1c1
                p2[3] = p1[0];
 800a3ee:	f88d b1c3 	strb.w	fp, [sp, #451]	; 0x1c3
                p2[0] = p1[3];
 800a3f2:	f88d 01c4 	strb.w	r0, [sp, #452]	; 0x1c4
                p2[1] = p1[2];
 800a3f6:	f88d 11c5 	strb.w	r1, [sp, #453]	; 0x1c5
                p2[0] = p1[3];
 800a3fa:	f89d 1247 	ldrb.w	r1, [sp, #583]	; 0x247
                p2[2] = p1[1];
 800a3fe:	f89d 9239 	ldrb.w	r9, [sp, #569]	; 0x239
                p2[3] = p1[0];
 800a402:	f89d 8238 	ldrb.w	r8, [sp, #568]	; 0x238
                p2[1] = p1[2];
 800a406:	f89d c23e 	ldrb.w	ip, [sp, #574]	; 0x23e
                p2[2] = p1[1];
 800a40a:	f89d 723d 	ldrb.w	r7, [sp, #573]	; 0x23d
                p2[3] = p1[0];
 800a40e:	f89d 623c 	ldrb.w	r6, [sp, #572]	; 0x23c
                p2[0] = p1[3];
 800a412:	f89d 5243 	ldrb.w	r5, [sp, #579]	; 0x243
                p2[1] = p1[2];
 800a416:	f89d 4242 	ldrb.w	r4, [sp, #578]	; 0x242
                p2[3] = p1[0];
 800a41a:	f89d b240 	ldrb.w	fp, [sp, #576]	; 0x240
                p2[2] = p1[1];
 800a41e:	f88d 21c6 	strb.w	r2, [sp, #454]	; 0x1c6
                p2[3] = p1[0];
 800a422:	f88d 31c7 	strb.w	r3, [sp, #455]	; 0x1c7
                p2[0] = p1[3];
 800a426:	f89d 223b 	ldrb.w	r2, [sp, #571]	; 0x23b
                p2[1] = p1[2];
 800a42a:	f89d 323a 	ldrb.w	r3, [sp, #570]	; 0x23a
                p2[0] = p1[3];
 800a42e:	f89d e23f 	ldrb.w	lr, [sp, #575]	; 0x23f
                p2[2] = p1[1];
 800a432:	f89d 0241 	ldrb.w	r0, [sp, #577]	; 0x241
                p2[0] = p1[3];
 800a436:	9148      	str	r1, [sp, #288]	; 0x120
 800a438:	f88d 21c8 	strb.w	r2, [sp, #456]	; 0x1c8
                p2[1] = p1[2];
 800a43c:	f89d 1246 	ldrb.w	r1, [sp, #582]	; 0x246
                p2[2] = p1[1];
 800a440:	f89d 2245 	ldrb.w	r2, [sp, #581]	; 0x245
                p2[1] = p1[2];
 800a444:	f88d 31c9 	strb.w	r3, [sp, #457]	; 0x1c9
                p2[2] = p1[1];
 800a448:	f88d 91ca 	strb.w	r9, [sp, #458]	; 0x1ca
                p2[3] = p1[0];
 800a44c:	f89d 3244 	ldrb.w	r3, [sp, #580]	; 0x244
 800a450:	f88d 81cb 	strb.w	r8, [sp, #459]	; 0x1cb
                p2[1] = p1[2];
 800a454:	f88d c1cd 	strb.w	ip, [sp, #461]	; 0x1cd
                p2[2] = p1[1];
 800a458:	f88d 71ce 	strb.w	r7, [sp, #462]	; 0x1ce
                p2[3] = p1[0];
 800a45c:	f88d 61cf 	strb.w	r6, [sp, #463]	; 0x1cf
                p2[0] = p1[3];
 800a460:	f88d 51d0 	strb.w	r5, [sp, #464]	; 0x1d0
                p2[1] = p1[2];
 800a464:	f88d 41d1 	strb.w	r4, [sp, #465]	; 0x1d1
                p2[3] = p1[0];
 800a468:	f88d b1d3 	strb.w	fp, [sp, #467]	; 0x1d3
                p2[0] = p1[3];
 800a46c:	f88d e1cc 	strb.w	lr, [sp, #460]	; 0x1cc
                p2[2] = p1[1];
 800a470:	f88d 01d2 	strb.w	r0, [sp, #466]	; 0x1d2
                p2[0] = p1[3];
 800a474:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a476:	f88d 01d4 	strb.w	r0, [sp, #468]	; 0x1d4
                p2[1] = p1[2];
 800a47a:	f88d 11d5 	strb.w	r1, [sp, #469]	; 0x1d5
                p2[3] = p1[0];
 800a47e:	f88d 31d7 	strb.w	r3, [sp, #471]	; 0x1d7
                p2[2] = p1[1];
 800a482:	f88d 21d6 	strb.w	r2, [sp, #470]	; 0x1d6
	data[i] = in[i];
 800a486:	a96a      	add	r1, sp, #424	; 0x1a8
 800a488:	e9d1 0100 	ldrd	r0, r1, [r1]
    AA = A;
 800a48c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800a48e:	934d      	str	r3, [sp, #308]	; 0x134
	data[i] = in[i];
 800a490:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 800a492:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
 800a496:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
 800a49a:	ab68      	add	r3, sp, #416	; 0x1a0
 800a49c:	ae6e      	add	r6, sp, #440	; 0x1b8
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	e9d6 6700 	ldrd	r6, r7, [r6]
 800a4a6:	e9dc 8900 	ldrd	r8, r9, [ip]
 800a4aa:	e9ca 0104 	strd	r0, r1, [sl, #16]
 800a4ae:	ac6c      	add	r4, sp, #432	; 0x1b0
    BB = B;
 800a4b0:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 800a4b2:	904e      	str	r0, [sp, #312]	; 0x138
	data[i] = in[i];
 800a4b4:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
 800a4b8:	e9dc bc00 	ldrd	fp, ip, [ip]
    CC = C;
 800a4bc:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 800a4be:	904f      	str	r0, [sp, #316]	; 0x13c
	data[i] = in[i];
 800a4c0:	e9d4 4500 	ldrd	r4, r5, [r4]
    DD = D;
 800a4c4:	987d      	ldr	r0, [sp, #500]	; 0x1f4
 800a4c6:	9050      	str	r0, [sp, #320]	; 0x140
	data[i] = in[i];
 800a4c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a4cc:	e9ca 6708 	strd	r6, r7, [sl, #32]
 800a4d0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800a4d2:	9f66      	ldr	r7, [sp, #408]	; 0x198
    EE = E;
 800a4d4:	987e      	ldr	r0, [sp, #504]	; 0x1f8
	data[i] = in[i];
 800a4d6:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 800a4d8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800a4dc:	e9ca bc0c 	strd	fp, ip, [sl, #48]	; 0x30
 800a4e0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800a4e4:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
    EE = E;
 800a4e8:	9051      	str	r0, [sp, #324]	; 0x144
    FF = F;
 800a4ea:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 800a4ec:	9052      	str	r0, [sp, #328]	; 0x148
	data[i] = in[i];
 800a4ee:	e9ca 7200 	strd	r7, r2, [sl]
    GG = G;
 800a4f2:	9880      	ldr	r0, [sp, #512]	; 0x200
 800a4f4:	9053      	str	r0, [sp, #332]	; 0x14c
    HH = H;
 800a4f6:	9881      	ldr	r0, [sp, #516]	; 0x204
 800a4f8:	9054      	str	r0, [sp, #336]	; 0x150
	data[i] = in[i];
 800a4fa:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 800a4fe:	4656      	mov	r6, sl
    for (i = 16; i < 64; ++i)
 800a500:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a504:	ea4f 40f1 	mov.w	r0, r1, ror #19
 800a508:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 800a50c:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a510:	4439      	add	r1, r7
 800a512:	e9d6 0509 	ldrd	r0, r5, [r6, #36]	; 0x24
 800a516:	e9d6 2701 	ldrd	r2, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a51a:	ea4f 4473 	mov.w	r4, r3, ror #17
 800a51e:	ea84 44f3 	eor.w	r4, r4, r3, ror #19
 800a522:	ea84 2393 	eor.w	r3, r4, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a526:	4408      	add	r0, r1
 800a528:	ea4f 14f7 	mov.w	r4, r7, ror #7
 800a52c:	ea4f 41b2 	mov.w	r1, r2, ror #18
 800a530:	442b      	add	r3, r5
 800a532:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 800a536:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 800a53a:	ea81 01d2 	eor.w	r1, r1, r2, lsr #3
 800a53e:	f10c 0c02 	add.w	ip, ip, #2
 800a542:	441a      	add	r2, r3
 800a544:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 800a548:	4401      	add	r1, r0
 800a54a:	4413      	add	r3, r2
 800a54c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a550:	e9c6 1310 	strd	r1, r3, [r6, #64]	; 0x40
 800a554:	f106 0608 	add.w	r6, r6, #8
 800a558:	d1d4      	bne.n	800a504 <HAL_UART_RxCpltCallback+0x110c>
 800a55a:	e9da 203c 	ldrd	r2, r0, [sl, #240]	; 0xf0
 800a55e:	ea4f 4572 	mov.w	r5, r2, ror #17
 800a562:	ea85 45f2 	eor.w	r5, r5, r2, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800a566:	e9da 672f 	ldrd	r6, r7, [sl, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a56a:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a56e:	f8da 10dc 	ldr.w	r1, [sl, #220]	; 0xdc
 800a572:	f8da 20b8 	ldr.w	r2, [sl, #184]	; 0xb8
    DD = D;
 800a576:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
    BB = B;
 800a57a:	f8dd c138 	ldr.w	ip, [sp, #312]	; 0x138
    FF = F;
 800a57e:	f8dd 8148 	ldr.w	r8, [sp, #328]	; 0x148
	    sigma0(data[i-15]) + data[i - 16];
 800a582:	4411      	add	r1, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a584:	ea4f 4370 	mov.w	r3, r0, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800a588:	f8da 20e0 	ldr.w	r2, [sl, #224]	; 0xe0
 800a58c:	ea4f 14f6 	mov.w	r4, r6, ror #7
 800a590:	ea4f 1ef7 	mov.w	lr, r7, ror #7
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a594:	ea83 43f0 	eor.w	r3, r3, r0, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800a598:	ea84 44b6 	eor.w	r4, r4, r6, ror #18
 800a59c:	18b2      	adds	r2, r6, r2
 800a59e:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a5a2:	ea83 2390 	eor.w	r3, r3, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a5a6:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 800a5aa:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800a5ae:	4429      	add	r1, r5
 800a5b0:	4413      	add	r3, r2
 800a5b2:	4473      	add	r3, lr
 800a5b4:	4421      	add	r1, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a5b6:	e9ca 133e 	strd	r1, r3, [sl, #248]	; 0xf8
    CC = C;
 800a5ba:	9f4f      	ldr	r7, [sp, #316]	; 0x13c
    AA = A;
 800a5bc:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    GG = G;
 800a5be:	f8dd e14c 	ldr.w	lr, [sp, #332]	; 0x14c
    HH = H;
 800a5c2:	9b54      	ldr	r3, [sp, #336]	; 0x150
    EE = E;
 800a5c4:	9c51      	ldr	r4, [sp, #324]	; 0x144
    for (i = 0; i < 64; i++) {
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	e005      	b.n	800a5d6 <HAL_UART_RxCpltCallback+0x11de>
 800a5ca:	4667      	mov	r7, ip
 800a5cc:	46c6      	mov	lr, r8
 800a5ce:	46ac      	mov	ip, r5
 800a5d0:	46a0      	mov	r8, r4
	AA = T1 + T2;
 800a5d2:	4615      	mov	r5, r2
	EE = DD + T1;
 800a5d4:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a5d6:	ea2e 0204 	bic.w	r2, lr, r4
 800a5da:	ea08 0b04 	and.w	fp, r8, r4
 800a5de:	4610      	mov	r0, r2
 800a5e0:	465a      	mov	r2, fp
 800a5e2:	4042      	eors	r2, r0
 800a5e4:	4840      	ldr	r0, [pc, #256]	; (800a6e8 <HAL_UART_RxCpltCallback+0x12f0>)
 800a5e6:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800a5ea:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800a5ee:	9048      	str	r0, [sp, #288]	; 0x120
 800a5f0:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800a5f4:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800a5f8:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 800a5fc:	440a      	add	r2, r1
 800a5fe:	4402      	add	r2, r0
 800a600:	9848      	ldr	r0, [sp, #288]	; 0x120
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a602:	ea4f 3175 	mov.w	r1, r5, ror #13
 800a606:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a60a:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a60c:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 800a610:	ea07 000c 	and.w	r0, r7, ip
 800a614:	ea0b 0b05 	and.w	fp, fp, r5
 800a618:	ea8b 0b00 	eor.w	fp, fp, r0
 800a61c:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800a620:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800a622:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800a624:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 800a626:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 800a628:	eb02 0009 	add.w	r0, r2, r9
 800a62c:	4673      	mov	r3, lr
	AA = T1 + T2;
 800a62e:	440a      	add	r2, r1
 800a630:	46b9      	mov	r9, r7
    for (i = 0; i < 64; i++) {
 800a632:	d1ca      	bne.n	800a5ca <HAL_UART_RxCpltCallback+0x11d2>
 800a634:	4611      	mov	r1, r2
 800a636:	4602      	mov	r2, r0
    D += DD;
 800a638:	9850      	ldr	r0, [sp, #320]	; 0x140
    A += AA;
 800a63a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    D += DD;
 800a63c:	4438      	add	r0, r7
 800a63e:	4607      	mov	r7, r0
    E += EE;
 800a640:	9851      	ldr	r0, [sp, #324]	; 0x144
    D += DD;
 800a642:	977d      	str	r7, [sp, #500]	; 0x1f4
    E += EE;
 800a644:	4410      	add	r0, r2
 800a646:	4602      	mov	r2, r0
    F += FF;
 800a648:	9852      	ldr	r0, [sp, #328]	; 0x148
    E += EE;
 800a64a:	927e      	str	r2, [sp, #504]	; 0x1f8
    A += AA;
 800a64c:	440b      	add	r3, r1
    F += FF;
 800a64e:	4420      	add	r0, r4
 800a650:	4604      	mov	r4, r0
    A += AA;
 800a652:	4619      	mov	r1, r3
    G += GG;
 800a654:	9853      	ldr	r0, [sp, #332]	; 0x14c
    B += BB;
 800a656:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    F += FF;
 800a658:	947f      	str	r4, [sp, #508]	; 0x1fc
    B += BB;
 800a65a:	442b      	add	r3, r5
    G += GG;
 800a65c:	4440      	add	r0, r8
    B += BB;
 800a65e:	461d      	mov	r5, r3
    G += GG;
 800a660:	4606      	mov	r6, r0
    C += CC;
 800a662:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    H += HH;
 800a664:	9854      	ldr	r0, [sp, #336]	; 0x150
    A += AA;
 800a666:	917a      	str	r1, [sp, #488]	; 0x1e8
    C += CC;
 800a668:	4463      	add	r3, ip
    H += HH;
 800a66a:	4470      	add	r0, lr
    B += BB;
 800a66c:	957b      	str	r5, [sp, #492]	; 0x1ec
    C += CC;
 800a66e:	937c      	str	r3, [sp, #496]	; 0x1f0
    G += GG;
 800a670:	9680      	str	r6, [sp, #512]	; 0x200
    H += HH;
 800a672:	9081      	str	r0, [sp, #516]	; 0x204
	    offset = 0;
 800a674:	2400      	movs	r4, #0
 800a676:	e5e5      	b.n	800a244 <HAL_UART_RxCpltCallback+0xe4c>
 800a678:	461f      	mov	r7, r3
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800a67a:	4639      	mov	r1, r7
    *zeros = 0x80;
 800a67c:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800a67e:	2247      	movs	r2, #71	; 0x47
 800a680:	f20d 1099 	addw	r0, sp, #409	; 0x199
    unsigned offset = (m->sz[0] / 8) % 64;
 800a684:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    *zeros = 0x80;
 800a686:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800a68a:	f003 fda5 	bl	800e1d8 <memset>
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800a68e:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a690:	4639      	mov	r1, r7
 800a692:	0e1a      	lsrs	r2, r3, #24
    unsigned offset = (m->sz[0] / 8) % 64;
 800a694:	f3c5 04c5 	ubfx	r4, r5, #3, #6
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a698:	f362 0107 	bfi	r1, r2, #0, #8
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800a69c:	0c1a      	lsrs	r2, r3, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a69e:	f362 210f 	bfi	r1, r2, #8, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800a6a2:	f1c4 0677 	rsb	r6, r4, #119	; 0x77
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800a6a6:	0a1a      	lsrs	r2, r3, #8
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800a6a8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a6ac:	f362 4117 	bfi	r1, r2, #16, #8
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800a6b0:	aa66      	add	r2, sp, #408	; 0x198
 800a6b2:	4432      	add	r2, r6
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800a6b4:	0a28      	lsrs	r0, r5, #8
 800a6b6:	71d0      	strb	r0, [r2, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800a6b8:	0c28      	lsrs	r0, r5, #16
    mavlink_sha256_update(m, zeros, dstart + 8);
 800a6ba:	f106 0709 	add.w	r7, r6, #9
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800a6be:	7190      	strb	r0, [r2, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800a6c0:	0e28      	lsrs	r0, r5, #24
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800a6c2:	7215      	strb	r5, [r2, #8]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800a6c4:	7150      	strb	r0, [r2, #5]
    m->sz[0] += len * 8;
 800a6c6:	00fa      	lsls	r2, r7, #3
 800a6c8:	18ad      	adds	r5, r5, r2
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800a6ca:	f106 0601 	add.w	r6, r6, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a6ce:	aa66      	add	r2, sp, #408	; 0x198
 800a6d0:	f363 611f 	bfi	r1, r3, #24, #8
	++m->sz[1];
 800a6d4:	bf28      	it	cs
 800a6d6:	3301      	addcs	r3, #1
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800a6d8:	5191      	str	r1, [r2, r6]
	++m->sz[1];
 800a6da:	bf28      	it	cs
 800a6dc:	9379      	strcs	r3, [sp, #484]	; 0x1e4
	    offset = 0;
 800a6de:	ab66      	add	r3, sp, #408	; 0x198
    mavlink_sha256_update(m, zeros, dstart + 8);
 800a6e0:	974a      	str	r7, [sp, #296]	; 0x128
    m->sz[0] += len * 8;
 800a6e2:	9578      	str	r5, [sp, #480]	; 0x1e0
	    offset = 0;
 800a6e4:	934b      	str	r3, [sp, #300]	; 0x12c
 800a6e6:	e005      	b.n	800a6f4 <HAL_UART_RxCpltCallback+0x12fc>
 800a6e8:	0800e360 	.word	0x0800e360
    while(len > 0){
 800a6ec:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 8216 	beq.w	800ab20 <HAL_UART_RxCpltCallback+0x1728>
 800a6f4:	9d4a      	ldr	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800a6f6:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
	uint32_t l = 64 - offset;
 800a6f8:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	bf28      	it	cs
 800a700:	462b      	movcs	r3, r5
	len -= l;
 800a702:	1aed      	subs	r5, r5, r3
 800a704:	954a      	str	r5, [sp, #296]	; 0x128
	memcpy(m->u.save_bytes + offset, p, l);
 800a706:	a882      	add	r0, sp, #520	; 0x208
	p += l;
 800a708:	4635      	mov	r5, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800a70a:	4420      	add	r0, r4
	p += l;
 800a70c:	441d      	add	r5, r3
	offset += l;
 800a70e:	441c      	add	r4, r3
	memcpy(m->u.save_bytes + offset, p, l);
 800a710:	461a      	mov	r2, r3
 800a712:	4631      	mov	r1, r6
	p += l;
 800a714:	954b      	str	r5, [sp, #300]	; 0x12c
	memcpy(m->u.save_bytes + offset, p, l);
 800a716:	f003 fd54 	bl	800e1c2 <memcpy>
	if(offset == 64){
 800a71a:	2c40      	cmp	r4, #64	; 0x40
 800a71c:	d1e6      	bne.n	800a6ec <HAL_UART_RxCpltCallback+0x12f4>
                p2[0] = p1[3];
 800a71e:	f89d 1217 	ldrb.w	r1, [sp, #535]	; 0x217
 800a722:	f89d 220b 	ldrb.w	r2, [sp, #523]	; 0x20b
                p2[3] = p1[0];
 800a726:	f89d 0210 	ldrb.w	r0, [sp, #528]	; 0x210
                p2[0] = p1[3];
 800a72a:	9148      	str	r1, [sp, #288]	; 0x120
                p2[1] = p1[2];
 800a72c:	f89d 320a 	ldrb.w	r3, [sp, #522]	; 0x20a
                p2[2] = p1[1];
 800a730:	f89d b209 	ldrb.w	fp, [sp, #521]	; 0x209
                p2[3] = p1[0];
 800a734:	f89d 9208 	ldrb.w	r9, [sp, #520]	; 0x208
                p2[0] = p1[3];
 800a738:	f89d 820f 	ldrb.w	r8, [sp, #527]	; 0x20f
                p2[1] = p1[2];
 800a73c:	f89d e20e 	ldrb.w	lr, [sp, #526]	; 0x20e
                p2[2] = p1[1];
 800a740:	f89d c20d 	ldrb.w	ip, [sp, #525]	; 0x20d
                p2[3] = p1[0];
 800a744:	f89d 720c 	ldrb.w	r7, [sp, #524]	; 0x20c
                p2[0] = p1[3];
 800a748:	f89d 6213 	ldrb.w	r6, [sp, #531]	; 0x213
                p2[1] = p1[2];
 800a74c:	f89d 5212 	ldrb.w	r5, [sp, #530]	; 0x212
                p2[2] = p1[1];
 800a750:	f89d 4211 	ldrb.w	r4, [sp, #529]	; 0x211
                p2[1] = p1[2];
 800a754:	f89d 1216 	ldrb.w	r1, [sp, #534]	; 0x216
                p2[0] = p1[3];
 800a758:	f88d 2158 	strb.w	r2, [sp, #344]	; 0x158
                p2[3] = p1[0];
 800a75c:	f88d 0163 	strb.w	r0, [sp, #355]	; 0x163
                p2[2] = p1[1];
 800a760:	f89d 2215 	ldrb.w	r2, [sp, #533]	; 0x215
                p2[0] = p1[3];
 800a764:	9848      	ldr	r0, [sp, #288]	; 0x120
                p2[1] = p1[2];
 800a766:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
                p2[2] = p1[1];
 800a76a:	f88d b15a 	strb.w	fp, [sp, #346]	; 0x15a
                p2[3] = p1[0];
 800a76e:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
 800a772:	f88d 915b 	strb.w	r9, [sp, #347]	; 0x15b
                p2[0] = p1[3];
 800a776:	f88d 815c 	strb.w	r8, [sp, #348]	; 0x15c
                p2[1] = p1[2];
 800a77a:	f88d e15d 	strb.w	lr, [sp, #349]	; 0x15d
                p2[2] = p1[1];
 800a77e:	f88d c15e 	strb.w	ip, [sp, #350]	; 0x15e
                p2[3] = p1[0];
 800a782:	f88d 715f 	strb.w	r7, [sp, #351]	; 0x15f
                p2[0] = p1[3];
 800a786:	f88d 6160 	strb.w	r6, [sp, #352]	; 0x160
                p2[1] = p1[2];
 800a78a:	f88d 5161 	strb.w	r5, [sp, #353]	; 0x161
                p2[2] = p1[1];
 800a78e:	f88d 4162 	strb.w	r4, [sp, #354]	; 0x162
                p2[0] = p1[3];
 800a792:	f88d 0164 	strb.w	r0, [sp, #356]	; 0x164
                p2[1] = p1[2];
 800a796:	f88d 1165 	strb.w	r1, [sp, #357]	; 0x165
                p2[2] = p1[1];
 800a79a:	f88d 2166 	strb.w	r2, [sp, #358]	; 0x166
                p2[0] = p1[3];
 800a79e:	f89d 1227 	ldrb.w	r1, [sp, #551]	; 0x227
                p2[3] = p1[0];
 800a7a2:	f89d 0220 	ldrb.w	r0, [sp, #544]	; 0x220
                p2[0] = p1[3];
 800a7a6:	9148      	str	r1, [sp, #288]	; 0x120
 800a7a8:	f89d 221b 	ldrb.w	r2, [sp, #539]	; 0x21b
                p2[2] = p1[1];
 800a7ac:	f89d b219 	ldrb.w	fp, [sp, #537]	; 0x219
                p2[3] = p1[0];
 800a7b0:	f89d 9218 	ldrb.w	r9, [sp, #536]	; 0x218
                p2[0] = p1[3];
 800a7b4:	f89d 821f 	ldrb.w	r8, [sp, #543]	; 0x21f
                p2[1] = p1[2];
 800a7b8:	f89d e21e 	ldrb.w	lr, [sp, #542]	; 0x21e
                p2[2] = p1[1];
 800a7bc:	f89d c21d 	ldrb.w	ip, [sp, #541]	; 0x21d
                p2[3] = p1[0];
 800a7c0:	f89d 721c 	ldrb.w	r7, [sp, #540]	; 0x21c
                p2[0] = p1[3];
 800a7c4:	f89d 6223 	ldrb.w	r6, [sp, #547]	; 0x223
                p2[1] = p1[2];
 800a7c8:	f89d 5222 	ldrb.w	r5, [sp, #546]	; 0x222
                p2[2] = p1[1];
 800a7cc:	f89d 4221 	ldrb.w	r4, [sp, #545]	; 0x221
                p2[3] = p1[0];
 800a7d0:	f88d 3167 	strb.w	r3, [sp, #359]	; 0x167
                p2[1] = p1[2];
 800a7d4:	f89d 1226 	ldrb.w	r1, [sp, #550]	; 0x226
 800a7d8:	f89d 321a 	ldrb.w	r3, [sp, #538]	; 0x21a
                p2[3] = p1[0];
 800a7dc:	f88d 0173 	strb.w	r0, [sp, #371]	; 0x173
                p2[0] = p1[3];
 800a7e0:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a7e2:	f88d 2168 	strb.w	r2, [sp, #360]	; 0x168
                p2[1] = p1[2];
 800a7e6:	f88d 3169 	strb.w	r3, [sp, #361]	; 0x169
                p2[2] = p1[1];
 800a7ea:	f89d 2225 	ldrb.w	r2, [sp, #549]	; 0x225
                p2[3] = p1[0];
 800a7ee:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
                p2[2] = p1[1];
 800a7f2:	f88d b16a 	strb.w	fp, [sp, #362]	; 0x16a
                p2[3] = p1[0];
 800a7f6:	f88d 916b 	strb.w	r9, [sp, #363]	; 0x16b
                p2[0] = p1[3];
 800a7fa:	f88d 816c 	strb.w	r8, [sp, #364]	; 0x16c
                p2[1] = p1[2];
 800a7fe:	f88d e16d 	strb.w	lr, [sp, #365]	; 0x16d
                p2[2] = p1[1];
 800a802:	f88d c16e 	strb.w	ip, [sp, #366]	; 0x16e
                p2[3] = p1[0];
 800a806:	f88d 716f 	strb.w	r7, [sp, #367]	; 0x16f
                p2[0] = p1[3];
 800a80a:	f88d 6170 	strb.w	r6, [sp, #368]	; 0x170
                p2[1] = p1[2];
 800a80e:	f88d 5171 	strb.w	r5, [sp, #369]	; 0x171
                p2[2] = p1[1];
 800a812:	f88d 4172 	strb.w	r4, [sp, #370]	; 0x172
                p2[0] = p1[3];
 800a816:	f88d 0174 	strb.w	r0, [sp, #372]	; 0x174
                p2[1] = p1[2];
 800a81a:	f88d 1175 	strb.w	r1, [sp, #373]	; 0x175
                p2[0] = p1[3];
 800a81e:	f89d 1237 	ldrb.w	r1, [sp, #567]	; 0x237
                p2[3] = p1[0];
 800a822:	f89d 0230 	ldrb.w	r0, [sp, #560]	; 0x230
                p2[0] = p1[3];
 800a826:	9148      	str	r1, [sp, #288]	; 0x120
                p2[2] = p1[1];
 800a828:	f89d b229 	ldrb.w	fp, [sp, #553]	; 0x229
                p2[3] = p1[0];
 800a82c:	f89d 9228 	ldrb.w	r9, [sp, #552]	; 0x228
                p2[0] = p1[3];
 800a830:	f89d 822f 	ldrb.w	r8, [sp, #559]	; 0x22f
                p2[1] = p1[2];
 800a834:	f89d e22e 	ldrb.w	lr, [sp, #558]	; 0x22e
                p2[2] = p1[1];
 800a838:	f89d c22d 	ldrb.w	ip, [sp, #557]	; 0x22d
                p2[3] = p1[0];
 800a83c:	f89d 722c 	ldrb.w	r7, [sp, #556]	; 0x22c
                p2[0] = p1[3];
 800a840:	f89d 6233 	ldrb.w	r6, [sp, #563]	; 0x233
                p2[1] = p1[2];
 800a844:	f89d 5232 	ldrb.w	r5, [sp, #562]	; 0x232
                p2[2] = p1[1];
 800a848:	f89d 4231 	ldrb.w	r4, [sp, #561]	; 0x231
                p2[1] = p1[2];
 800a84c:	f89d 1236 	ldrb.w	r1, [sp, #566]	; 0x236
                p2[2] = p1[1];
 800a850:	f88d 2176 	strb.w	r2, [sp, #374]	; 0x176
                p2[3] = p1[0];
 800a854:	f88d 3177 	strb.w	r3, [sp, #375]	; 0x177
                p2[0] = p1[3];
 800a858:	f89d 222b 	ldrb.w	r2, [sp, #555]	; 0x22b
                p2[1] = p1[2];
 800a85c:	f89d 322a 	ldrb.w	r3, [sp, #554]	; 0x22a
                p2[3] = p1[0];
 800a860:	f88d 0183 	strb.w	r0, [sp, #387]	; 0x183
                p2[0] = p1[3];
 800a864:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a866:	f88d 2178 	strb.w	r2, [sp, #376]	; 0x178
                p2[1] = p1[2];
 800a86a:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
                p2[2] = p1[1];
 800a86e:	f89d 2235 	ldrb.w	r2, [sp, #565]	; 0x235
                p2[3] = p1[0];
 800a872:	f89d 3234 	ldrb.w	r3, [sp, #564]	; 0x234
                p2[2] = p1[1];
 800a876:	f88d b17a 	strb.w	fp, [sp, #378]	; 0x17a
                p2[3] = p1[0];
 800a87a:	f88d 917b 	strb.w	r9, [sp, #379]	; 0x17b
                p2[0] = p1[3];
 800a87e:	f88d 817c 	strb.w	r8, [sp, #380]	; 0x17c
                p2[1] = p1[2];
 800a882:	f88d e17d 	strb.w	lr, [sp, #381]	; 0x17d
                p2[2] = p1[1];
 800a886:	f88d c17e 	strb.w	ip, [sp, #382]	; 0x17e
                p2[3] = p1[0];
 800a88a:	f88d 717f 	strb.w	r7, [sp, #383]	; 0x17f
                p2[0] = p1[3];
 800a88e:	f88d 6180 	strb.w	r6, [sp, #384]	; 0x180
                p2[1] = p1[2];
 800a892:	f88d 5181 	strb.w	r5, [sp, #385]	; 0x181
                p2[2] = p1[1];
 800a896:	f88d 4182 	strb.w	r4, [sp, #386]	; 0x182
                p2[0] = p1[3];
 800a89a:	f88d 0184 	strb.w	r0, [sp, #388]	; 0x184
                p2[1] = p1[2];
 800a89e:	f88d 1185 	strb.w	r1, [sp, #389]	; 0x185
                p2[0] = p1[3];
 800a8a2:	f89d 1247 	ldrb.w	r1, [sp, #583]	; 0x247
                p2[2] = p1[1];
 800a8a6:	f89d b239 	ldrb.w	fp, [sp, #569]	; 0x239
                p2[3] = p1[0];
 800a8aa:	f89d 9238 	ldrb.w	r9, [sp, #568]	; 0x238
                p2[0] = p1[3];
 800a8ae:	f89d 823f 	ldrb.w	r8, [sp, #575]	; 0x23f
                p2[2] = p1[1];
 800a8b2:	f89d c23d 	ldrb.w	ip, [sp, #573]	; 0x23d
                p2[3] = p1[0];
 800a8b6:	f89d 723c 	ldrb.w	r7, [sp, #572]	; 0x23c
                p2[0] = p1[3];
 800a8ba:	f89d 6243 	ldrb.w	r6, [sp, #579]	; 0x243
                p2[1] = p1[2];
 800a8be:	f89d 5242 	ldrb.w	r5, [sp, #578]	; 0x242
                p2[2] = p1[1];
 800a8c2:	f89d 4241 	ldrb.w	r4, [sp, #577]	; 0x241
 800a8c6:	f88d 2186 	strb.w	r2, [sp, #390]	; 0x186
                p2[3] = p1[0];
 800a8ca:	f88d 3187 	strb.w	r3, [sp, #391]	; 0x187
                p2[0] = p1[3];
 800a8ce:	f89d 223b 	ldrb.w	r2, [sp, #571]	; 0x23b
                p2[1] = p1[2];
 800a8d2:	f89d 323a 	ldrb.w	r3, [sp, #570]	; 0x23a
 800a8d6:	f89d e23e 	ldrb.w	lr, [sp, #574]	; 0x23e
                p2[3] = p1[0];
 800a8da:	f89d 0240 	ldrb.w	r0, [sp, #576]	; 0x240
                p2[0] = p1[3];
 800a8de:	9148      	str	r1, [sp, #288]	; 0x120
 800a8e0:	f88d 2188 	strb.w	r2, [sp, #392]	; 0x188
                p2[1] = p1[2];
 800a8e4:	f89d 1246 	ldrb.w	r1, [sp, #582]	; 0x246
                p2[2] = p1[1];
 800a8e8:	f89d 2245 	ldrb.w	r2, [sp, #581]	; 0x245
                p2[1] = p1[2];
 800a8ec:	f88d 3189 	strb.w	r3, [sp, #393]	; 0x189
                p2[2] = p1[1];
 800a8f0:	f88d b18a 	strb.w	fp, [sp, #394]	; 0x18a
                p2[3] = p1[0];
 800a8f4:	f89d 3244 	ldrb.w	r3, [sp, #580]	; 0x244
 800a8f8:	f88d 918b 	strb.w	r9, [sp, #395]	; 0x18b
                p2[0] = p1[3];
 800a8fc:	f88d 818c 	strb.w	r8, [sp, #396]	; 0x18c
                p2[2] = p1[1];
 800a900:	f88d c18e 	strb.w	ip, [sp, #398]	; 0x18e
                p2[3] = p1[0];
 800a904:	f88d 718f 	strb.w	r7, [sp, #399]	; 0x18f
                p2[0] = p1[3];
 800a908:	f88d 6190 	strb.w	r6, [sp, #400]	; 0x190
                p2[1] = p1[2];
 800a90c:	f88d 5191 	strb.w	r5, [sp, #401]	; 0x191
                p2[2] = p1[1];
 800a910:	f88d 4192 	strb.w	r4, [sp, #402]	; 0x192
                p2[1] = p1[2];
 800a914:	f88d e18d 	strb.w	lr, [sp, #397]	; 0x18d
                p2[3] = p1[0];
 800a918:	f88d 0193 	strb.w	r0, [sp, #403]	; 0x193
                p2[0] = p1[3];
 800a91c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a91e:	f88d 0194 	strb.w	r0, [sp, #404]	; 0x194
                p2[1] = p1[2];
 800a922:	f88d 1195 	strb.w	r1, [sp, #405]	; 0x195
                p2[3] = p1[0];
 800a926:	f88d 3197 	strb.w	r3, [sp, #407]	; 0x197
                p2[2] = p1[1];
 800a92a:	f88d 2196 	strb.w	r2, [sp, #406]	; 0x196
	data[i] = in[i];
 800a92e:	a95a      	add	r1, sp, #360	; 0x168
 800a930:	e9d1 0100 	ldrd	r0, r1, [r1]
    AA = A;
 800a934:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800a936:	934d      	str	r3, [sp, #308]	; 0x134
	data[i] = in[i];
 800a938:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a93a:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
 800a93e:	f50d 7cc0 	add.w	ip, sp, #384	; 0x180
 800a942:	ab58      	add	r3, sp, #352	; 0x160
 800a944:	ae5e      	add	r6, sp, #376	; 0x178
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800a94e:	e9dc 8900 	ldrd	r8, r9, [ip]
 800a952:	e9ca 0104 	strd	r0, r1, [sl, #16]
 800a956:	ac5c      	add	r4, sp, #368	; 0x170
    BB = B;
 800a958:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 800a95a:	904e      	str	r0, [sp, #312]	; 0x138
	data[i] = in[i];
 800a95c:	f50d 7cc4 	add.w	ip, sp, #392	; 0x188
 800a960:	e9dc bc00 	ldrd	fp, ip, [ip]
    CC = C;
 800a964:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 800a966:	904f      	str	r0, [sp, #316]	; 0x13c
	data[i] = in[i];
 800a968:	e9d4 4500 	ldrd	r4, r5, [r4]
    DD = D;
 800a96c:	987d      	ldr	r0, [sp, #500]	; 0x1f4
 800a96e:	9050      	str	r0, [sp, #320]	; 0x140
	data[i] = in[i];
 800a970:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a974:	e9ca 6708 	strd	r6, r7, [sl, #32]
 800a978:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800a97a:	9f56      	ldr	r7, [sp, #344]	; 0x158
    EE = E;
 800a97c:	987e      	ldr	r0, [sp, #504]	; 0x1f8
	data[i] = in[i];
 800a97e:	9964      	ldr	r1, [sp, #400]	; 0x190
 800a980:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800a984:	e9ca bc0c 	strd	fp, ip, [sl, #48]	; 0x30
 800a988:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800a98c:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
    EE = E;
 800a990:	9051      	str	r0, [sp, #324]	; 0x144
    FF = F;
 800a992:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 800a994:	9052      	str	r0, [sp, #328]	; 0x148
	data[i] = in[i];
 800a996:	e9ca 7200 	strd	r7, r2, [sl]
    GG = G;
 800a99a:	9880      	ldr	r0, [sp, #512]	; 0x200
 800a99c:	9053      	str	r0, [sp, #332]	; 0x14c
    HH = H;
 800a99e:	9881      	ldr	r0, [sp, #516]	; 0x204
 800a9a0:	9054      	str	r0, [sp, #336]	; 0x150
	data[i] = in[i];
 800a9a2:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 800a9a6:	4656      	mov	r6, sl
    for (i = 16; i < 64; ++i)
 800a9a8:	f04f 0c10 	mov.w	ip, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a9ac:	ea4f 40f1 	mov.w	r0, r1, ror #19
 800a9b0:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 800a9b4:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a9b8:	4439      	add	r1, r7
 800a9ba:	e9d6 0509 	ldrd	r0, r5, [r6, #36]	; 0x24
 800a9be:	e9d6 2701 	ldrd	r2, r7, [r6, #4]
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a9c2:	ea4f 4473 	mov.w	r4, r3, ror #17
 800a9c6:	ea84 44f3 	eor.w	r4, r4, r3, ror #19
 800a9ca:	ea84 2393 	eor.w	r3, r4, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800a9ce:	4408      	add	r0, r1
 800a9d0:	ea4f 14f7 	mov.w	r4, r7, ror #7
 800a9d4:	ea4f 41b2 	mov.w	r1, r2, ror #18
 800a9d8:	442b      	add	r3, r5
 800a9da:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 800a9de:	ea84 44b7 	eor.w	r4, r4, r7, ror #18
 800a9e2:	ea81 01d2 	eor.w	r1, r1, r2, lsr #3
 800a9e6:	f10c 0c02 	add.w	ip, ip, #2
 800a9ea:	441a      	add	r2, r3
 800a9ec:	ea84 03d7 	eor.w	r3, r4, r7, lsr #3
 800a9f0:	4401      	add	r1, r0
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800a9f8:	e9c6 1310 	strd	r1, r3, [r6, #64]	; 0x40
 800a9fc:	f106 0608 	add.w	r6, r6, #8
 800aa00:	d1d4      	bne.n	800a9ac <HAL_UART_RxCpltCallback+0x15b4>
 800aa02:	e9da 203c 	ldrd	r2, r0, [sl, #240]	; 0xf0
 800aa06:	ea4f 45f2 	mov.w	r5, r2, ror #19
 800aa0a:	ea85 4572 	eor.w	r5, r5, r2, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800aa0e:	e9da 672f 	ldrd	r6, r7, [sl, #188]	; 0xbc
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800aa12:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800aa16:	f8da 10b8 	ldr.w	r1, [sl, #184]	; 0xb8
 800aa1a:	f8da 20dc 	ldr.w	r2, [sl, #220]	; 0xdc
    DD = D;
 800aa1e:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
    BB = B;
 800aa22:	f8dd c138 	ldr.w	ip, [sp, #312]	; 0x138
    FF = F;
 800aa26:	f8dd 8148 	ldr.w	r8, [sp, #328]	; 0x148
	    sigma0(data[i-15]) + data[i - 16];
 800aa2a:	4411      	add	r1, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800aa2c:	ea4f 4370 	mov.w	r3, r0, ror #17
	    sigma0(data[i-15]) + data[i - 16];
 800aa30:	f8da 20e0 	ldr.w	r2, [sl, #224]	; 0xe0
 800aa34:	ea4f 44b6 	mov.w	r4, r6, ror #18
 800aa38:	ea4f 1ef7 	mov.w	lr, r7, ror #7
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800aa3c:	ea83 43f0 	eor.w	r3, r3, r0, ror #19
	    sigma0(data[i-15]) + data[i - 16];
 800aa40:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
 800aa44:	18b2      	adds	r2, r6, r2
 800aa46:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800aa4a:	ea83 2390 	eor.w	r3, r3, r0, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800aa4e:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 800aa52:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 800aa56:	4429      	add	r1, r5
 800aa58:	4413      	add	r3, r2
 800aa5a:	4473      	add	r3, lr
 800aa5c:	4421      	add	r1, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800aa5e:	e9ca 133e 	strd	r1, r3, [sl, #248]	; 0xf8
    CC = C;
 800aa62:	9f4f      	ldr	r7, [sp, #316]	; 0x13c
    AA = A;
 800aa64:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    GG = G;
 800aa66:	f8dd e14c 	ldr.w	lr, [sp, #332]	; 0x14c
    HH = H;
 800aa6a:	9b54      	ldr	r3, [sp, #336]	; 0x150
    EE = E;
 800aa6c:	9c51      	ldr	r4, [sp, #324]	; 0x144
    for (i = 0; i < 64; i++) {
 800aa6e:	2600      	movs	r6, #0
 800aa70:	e005      	b.n	800aa7e <HAL_UART_RxCpltCallback+0x1686>
 800aa72:	4667      	mov	r7, ip
 800aa74:	46c6      	mov	lr, r8
 800aa76:	46ac      	mov	ip, r5
 800aa78:	46a0      	mov	r8, r4
	AA = T1 + T2;
 800aa7a:	4615      	mov	r5, r2
	EE = DD + T1;
 800aa7c:	4604      	mov	r4, r0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800aa7e:	ea2e 0204 	bic.w	r2, lr, r4
 800aa82:	ea08 0b04 	and.w	fp, r8, r4
 800aa86:	4610      	mov	r0, r2
 800aa88:	465a      	mov	r2, fp
 800aa8a:	4042      	eors	r2, r0
 800aa8c:	4898      	ldr	r0, [pc, #608]	; (800acf0 <HAL_UART_RxCpltCallback+0x18f8>)
 800aa8e:	ea4f 21f4 	mov.w	r1, r4, ror #11
 800aa92:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800aa96:	9048      	str	r0, [sp, #288]	; 0x120
 800aa98:	ea81 11b4 	eor.w	r1, r1, r4, ror #6
 800aa9c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800aaa0:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 800aaa4:	440a      	add	r2, r1
 800aaa6:	4402      	add	r2, r0
 800aaa8:	9848      	ldr	r0, [sp, #288]	; 0x120
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800aaaa:	ea4f 3175 	mov.w	r1, r5, ror #13
 800aaae:	ea87 0b0c 	eor.w	fp, r7, ip
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800aab2:	4402      	add	r2, r0
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800aab4:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 800aab8:	ea07 000c 	and.w	r0, r7, ip
 800aabc:	ea0b 0b05 	and.w	fp, fp, r5
 800aac0:	ea8b 0b00 	eor.w	fp, fp, r0
 800aac4:	ea81 51b5 	eor.w	r1, r1, r5, ror #22
    for (i = 0; i < 64; i++) {
 800aac8:	3601      	adds	r6, #1
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800aaca:	441a      	add	r2, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800aacc:	4459      	add	r1, fp
    for (i = 0; i < 64; i++) {
 800aace:	2e40      	cmp	r6, #64	; 0x40
	EE = DD + T1;
 800aad0:	eb02 0009 	add.w	r0, r2, r9
 800aad4:	4673      	mov	r3, lr
	AA = T1 + T2;
 800aad6:	440a      	add	r2, r1
 800aad8:	46b9      	mov	r9, r7
    for (i = 0; i < 64; i++) {
 800aada:	d1ca      	bne.n	800aa72 <HAL_UART_RxCpltCallback+0x167a>
 800aadc:	4611      	mov	r1, r2
 800aade:	4602      	mov	r2, r0
    D += DD;
 800aae0:	9850      	ldr	r0, [sp, #320]	; 0x140
    A += AA;
 800aae2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    D += DD;
 800aae4:	4438      	add	r0, r7
 800aae6:	4607      	mov	r7, r0
    E += EE;
 800aae8:	9851      	ldr	r0, [sp, #324]	; 0x144
    D += DD;
 800aaea:	977d      	str	r7, [sp, #500]	; 0x1f4
    E += EE;
 800aaec:	4410      	add	r0, r2
 800aaee:	4602      	mov	r2, r0
    F += FF;
 800aaf0:	9852      	ldr	r0, [sp, #328]	; 0x148
    E += EE;
 800aaf2:	927e      	str	r2, [sp, #504]	; 0x1f8
    A += AA;
 800aaf4:	440b      	add	r3, r1
    F += FF;
 800aaf6:	4420      	add	r0, r4
 800aaf8:	4604      	mov	r4, r0
    A += AA;
 800aafa:	4619      	mov	r1, r3
    G += GG;
 800aafc:	9853      	ldr	r0, [sp, #332]	; 0x14c
    B += BB;
 800aafe:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    F += FF;
 800ab00:	947f      	str	r4, [sp, #508]	; 0x1fc
    B += BB;
 800ab02:	442b      	add	r3, r5
    G += GG;
 800ab04:	4440      	add	r0, r8
    B += BB;
 800ab06:	461d      	mov	r5, r3
    G += GG;
 800ab08:	4606      	mov	r6, r0
    C += CC;
 800ab0a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    H += HH;
 800ab0c:	9854      	ldr	r0, [sp, #336]	; 0x150
    A += AA;
 800ab0e:	917a      	str	r1, [sp, #488]	; 0x1e8
    C += CC;
 800ab10:	4463      	add	r3, ip
    H += HH;
 800ab12:	4470      	add	r0, lr
    B += BB;
 800ab14:	957b      	str	r5, [sp, #492]	; 0x1ec
    C += CC;
 800ab16:	937c      	str	r3, [sp, #496]	; 0x1f0
    G += GG;
 800ab18:	9680      	str	r6, [sp, #512]	; 0x200
    H += HH;
 800ab1a:	9081      	str	r0, [sp, #516]	; 0x204
	    offset = 0;
 800ab1c:	2400      	movs	r4, #0
 800ab1e:	e5e5      	b.n	800a6ec <HAL_UART_RxCpltCallback+0x12f4>
    result[0] = p[3];
 800ab20:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
    result[1] = p[2];
 800ab24:	f89d 21ea 	ldrb.w	r2, [sp, #490]	; 0x1ea
    result[3] = p[0];
 800ab28:	f89d 11e8 	ldrb.w	r1, [sp, #488]	; 0x1e8
    result[0] = p[3];
 800ab2c:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
    result[1] = p[2];
 800ab30:	f88d 2159 	strb.w	r2, [sp, #345]	; 0x159
    result[2] = p[1];
 800ab34:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
    result[4] = p[7];
 800ab38:	f89d 21ef 	ldrb.w	r2, [sp, #495]	; 0x1ef
    result[2] = p[1];
 800ab3c:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
    result[3] = p[0];
 800ab40:	f88d 115b 	strb.w	r1, [sp, #347]	; 0x15b
    result[5] = p[6];
 800ab44:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
    result[4] = p[7];
 800ab48:	f88d 215c 	strb.w	r2, [sp, #348]	; 0x15c
	if (memcmp(signature, incoming_signature, 6) != 0) {
 800ab4c:	a856      	add	r0, sp, #344	; 0x158
 800ab4e:	2206      	movs	r2, #6
 800ab50:	4968      	ldr	r1, [pc, #416]	; (800acf4 <HAL_UART_RxCpltCallback+0x18fc>)
    result[5] = p[6];
 800ab52:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
 800ab56:	f003 fb25 	bl	800e1a4 <memcmp>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d033      	beq.n	800abc6 <HAL_UART_RxCpltCallback+0x17ce>
			   	(status->signing->accept_unsigned_callback &&
 800ab5e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80af 	beq.w	800acc6 <HAL_UART_RxCpltCallback+0x18ce>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800ab68:	9c49      	ldr	r4, [sp, #292]	; 0x124
 800ab6a:	4863      	ldr	r0, [pc, #396]	; (800acf8 <HAL_UART_RxCpltCallback+0x1900>)
 800ab6c:	68a1      	ldr	r1, [r4, #8]
 800ab6e:	0a09      	lsrs	r1, r1, #8
 800ab70:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback &&
 800ab72:	bb20      	cbnz	r0, 800abbe <HAL_UART_RxCpltCallback+0x17c6>
 800ab74:	78e4      	ldrb	r4, [r4, #3]
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800ab76:	2503      	movs	r5, #3
 800ab78:	485f      	ldr	r0, [pc, #380]	; (800acf8 <HAL_UART_RxCpltCallback+0x1900>)
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800ab7a:	4960      	ldr	r1, [pc, #384]	; (800acfc <HAL_UART_RxCpltCallback+0x1904>)
 800ab7c:	7005      	strb	r5, [r0, #0]
 800ab7e:	4606      	mov	r6, r0
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800ab80:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800ab82:	f240 1223 	movw	r2, #291	; 0x123
 800ab86:	4650      	mov	r0, sl
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800ab88:	70f3      	strb	r3, [r6, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800ab8a:	f003 fb1a 	bl	800e1c2 <memcpy>
 800ab8e:	f7fe be4f 	b.w	8009830 <HAL_UART_RxCpltCallback+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800ab92:	4b59      	ldr	r3, [pc, #356]	; (800acf8 <HAL_UART_RxCpltCallback+0x1900>)
 800ab94:	781d      	ldrb	r5, [r3, #0]
 800ab96:	2d02      	cmp	r5, #2
 800ab98:	f43e ae3d 	beq.w	8009816 <HAL_UART_RxCpltCallback+0x41e>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800ab9c:	4b56      	ldr	r3, [pc, #344]	; (800acf8 <HAL_UART_RxCpltCallback+0x1900>)
 800ab9e:	2503      	movs	r5, #3
 800aba0:	701d      	strb	r5, [r3, #0]
 800aba2:	f7fe be38 	b.w	8009816 <HAL_UART_RxCpltCallback+0x41e>
 800aba6:	4a56      	ldr	r2, [pc, #344]	; (800ad00 <HAL_UART_RxCpltCallback+0x1908>)
 800aba8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        while (low < high) {
 800abac:	462b      	mov	r3, r5
 800abae:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800abb2:	f7fe bc9b 	b.w	80094ec <HAL_UART_RxCpltCallback+0xf4>
				status->msg_received = MAVLINK_FRAMING_OK;
 800abb6:	2501      	movs	r5, #1
 800abb8:	f50d 7a12 	add.w	sl, sp, #584	; 0x248
 800abbc:	e7dc      	b.n	800ab78 <HAL_UART_RxCpltCallback+0x1780>
 800abbe:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800abc0:	2501      	movs	r5, #1
 800abc2:	78dc      	ldrb	r4, [r3, #3]
 800abc4:	e7d8      	b.n	800ab78 <HAL_UART_RxCpltCallback+0x1780>
	memcpy(tstamp.t8, psig+1, 6);
 800abc6:	4e4f      	ldr	r6, [pc, #316]	; (800ad04 <HAL_UART_RxCpltCallback+0x190c>)
	uint8_t link_id = psig[0];
 800abc8:	9c49      	ldr	r4, [sp, #292]	; 0x124
	memcpy(tstamp.t8, psig+1, 6);
 800abca:	6830      	ldr	r0, [r6, #0]
 800abcc:	88b1      	ldrh	r1, [r6, #4]
	uint8_t link_id = psig[0];
 800abce:	f894 7116 	ldrb.w	r7, [r4, #278]	; 0x116
	tstamp.t64 = 0;
 800abd2:	2200      	movs	r2, #0
 800abd4:	2300      	movs	r3, #0
 800abd6:	ad66      	add	r5, sp, #408	; 0x198
 800abd8:	e9c5 2300 	strd	r2, r3, [r5]
	if (signing_streams == NULL) {
 800abdc:	9a55      	ldr	r2, [sp, #340]	; 0x154
	memcpy(tstamp.t8, psig+1, 6);
 800abde:	9066      	str	r0, [sp, #408]	; 0x198
 800abe0:	f8ad 119c 	strh.w	r1, [sp, #412]	; 0x19c
	if (signing_streams == NULL) {
 800abe4:	2a00      	cmp	r2, #0
 800abe6:	d0ba      	beq.n	800ab5e <HAL_UART_RxCpltCallback+0x1766>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800abe8:	8811      	ldrh	r1, [r2, #0]
 800abea:	2900      	cmp	r1, #0
 800abec:	d069      	beq.n	800acc2 <HAL_UART_RxCpltCallback+0x18ca>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800abee:	79e0      	ldrb	r0, [r4, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 800abf0:	7a25      	ldrb	r5, [r4, #8]
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800abf2:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800abf4:	1c93      	adds	r3, r2, #2
 800abf6:	e004      	b.n	800ac02 <HAL_UART_RxCpltCallback+0x180a>
 800abf8:	b294      	uxth	r4, r2
 800abfa:	428c      	cmp	r4, r1
 800abfc:	f103 0309 	add.w	r3, r3, #9
 800ac00:	d03d      	beq.n	800ac7e <HAL_UART_RxCpltCallback+0x1886>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800ac02:	f893 c001 	ldrb.w	ip, [r3, #1]
 800ac06:	4584      	cmp	ip, r0
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800ac08:	f104 0201 	add.w	r2, r4, #1
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800ac0c:	d1f4      	bne.n	800abf8 <HAL_UART_RxCpltCallback+0x1800>
 800ac0e:	f893 c002 	ldrb.w	ip, [r3, #2]
 800ac12:	45ac      	cmp	ip, r5
 800ac14:	d1f0      	bne.n	800abf8 <HAL_UART_RxCpltCallback+0x1800>
		    msg->compid == signing_streams->stream[i].compid &&
 800ac16:	f893 c000 	ldrb.w	ip, [r3]
 800ac1a:	45bc      	cmp	ip, r7
 800ac1c:	d1ec      	bne.n	800abf8 <HAL_UART_RxCpltCallback+0x1800>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800ac1e:	00e5      	lsls	r5, r4, #3
 800ac20:	9b55      	ldr	r3, [sp, #340]	; 0x154
 800ac22:	1929      	adds	r1, r5, r4
 800ac24:	3105      	adds	r1, #5
 800ac26:	4419      	add	r1, r3
		last_tstamp.t64 = 0;
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e9ca 2300 	strd	r2, r3, [sl]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	888b      	ldrh	r3, [r1, #4]
 800ac34:	f8aa 3004 	strh.w	r3, [sl, #4]
 800ac38:	f8ca 0000 	str.w	r0, [sl]
		if (tstamp.t64 <= last_tstamp.t64) {
 800ac3c:	ab66      	add	r3, sp, #408	; 0x198
 800ac3e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	4299      	cmp	r1, r3
 800ac48:	bf08      	it	eq
 800ac4a:	4290      	cmpeq	r0, r2
 800ac4c:	d287      	bcs.n	800ab5e <HAL_UART_RxCpltCallback+0x1766>
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 800ac4e:	192b      	adds	r3, r5, r4
 800ac50:	9955      	ldr	r1, [sp, #340]	; 0x154
 800ac52:	6832      	ldr	r2, [r6, #0]
	if (tstamp.t64 > signing->timestamp) {
 800ac54:	9c4c      	ldr	r4, [sp, #304]	; 0x130
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 800ac56:	3305      	adds	r3, #5
 800ac58:	50ca      	str	r2, [r1, r3]
 800ac5a:	440b      	add	r3, r1
 800ac5c:	88b2      	ldrh	r2, [r6, #4]
 800ac5e:	809a      	strh	r2, [r3, #4]
	if (tstamp.t64 > signing->timestamp) {
 800ac60:	ab66      	add	r3, sp, #408	; 0x198
 800ac62:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	bf08      	it	eq
 800ac6e:	4290      	cmpeq	r0, r2
 800ac70:	d2a5      	bcs.n	800abbe <HAL_UART_RxCpltCallback+0x17c6>
		signing->timestamp = tstamp.t64;
 800ac72:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac76:	9b49      	ldr	r3, [sp, #292]	; 0x124
				status->msg_received = MAVLINK_FRAMING_OK;
 800ac78:	2501      	movs	r5, #1
 800ac7a:	78dc      	ldrb	r4, [r3, #3]
 800ac7c:	e77c      	b.n	800ab78 <HAL_UART_RxCpltCallback+0x1780>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 800ac7e:	2c0f      	cmp	r4, #15
 800ac80:	f63f af6d 	bhi.w	800ab5e <HAL_UART_RxCpltCallback+0x1766>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800ac84:	ab66      	add	r3, sp, #408	; 0x198
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	9d4c      	ldr	r5, [sp, #304]	; 0x130
 800ac8c:	481e      	ldr	r0, [pc, #120]	; (800ad08 <HAL_UART_RxCpltCallback+0x1910>)
 800ac8e:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
 800ac92:	eb12 0b00 	adds.w	fp, r2, r0
 800ac96:	f04f 0100 	mov.w	r1, #0
 800ac9a:	eb43 0c01 	adc.w	ip, r3, r1
 800ac9e:	45cc      	cmp	ip, r9
 800aca0:	bf08      	it	eq
 800aca2:	45c3      	cmpeq	fp, r8
 800aca4:	f4ff af5b 	bcc.w	800ab5e <HAL_UART_RxCpltCallback+0x1766>
 800aca8:	9955      	ldr	r1, [sp, #340]	; 0x154
		signing_streams->stream[i].sysid = msg->sysid;
 800acaa:	9849      	ldr	r0, [sp, #292]	; 0x124
 800acac:	00e5      	lsls	r5, r4, #3
 800acae:	192b      	adds	r3, r5, r4
 800acb0:	440b      	add	r3, r1
 800acb2:	79c2      	ldrb	r2, [r0, #7]
 800acb4:	70da      	strb	r2, [r3, #3]
		signing_streams->stream[i].compid = msg->compid;
 800acb6:	7a02      	ldrb	r2, [r0, #8]
 800acb8:	711a      	strb	r2, [r3, #4]
		signing_streams->num_signing_streams++;
 800acba:	1c62      	adds	r2, r4, #1
		signing_streams->stream[i].link_id = link_id;
 800acbc:	709f      	strb	r7, [r3, #2]
		signing_streams->num_signing_streams++;
 800acbe:	800a      	strh	r2, [r1, #0]
 800acc0:	e7c5      	b.n	800ac4e <HAL_UART_RxCpltCallback+0x1856>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800acc2:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800acc4:	e7de      	b.n	800ac84 <HAL_UART_RxCpltCallback+0x188c>
 800acc6:	9b49      	ldr	r3, [sp, #292]	; 0x124
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800acc8:	2503      	movs	r5, #3
 800acca:	78dc      	ldrb	r4, [r3, #3]
 800accc:	e754      	b.n	800ab78 <HAL_UART_RxCpltCallback+0x1780>
       status->parse_error = 0;
 800acce:	4a0a      	ldr	r2, [pc, #40]	; (800acf8 <HAL_UART_RxCpltCallback+0x1900>)
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800acd0:	f88a 4003 	strb.w	r4, [sl, #3]
       status->parse_error = 0;
 800acd4:	2300      	movs	r3, #0
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800acd6:	2d02      	cmp	r5, #2
       status->parse_error = 0;
 800acd8:	7093      	strb	r3, [r2, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800acda:	f43e abea 	beq.w	80094b2 <HAL_UART_RxCpltCallback+0xba>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 800acde:	2d03      	cmp	r5, #3
 800ace0:	f43e abe7 	beq.w	80094b2 <HAL_UART_RxCpltCallback+0xba>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 800ace4:	2d00      	cmp	r5, #0
 800ace6:	f47e adb4 	bne.w	8009852 <HAL_UART_RxCpltCallback+0x45a>
 800acea:	f7fe bb91 	b.w	8009410 <HAL_UART_RxCpltCallback+0x18>
 800acee:	bf00      	nop
 800acf0:	0800e360 	.word	0x0800e360
 800acf4:	20016745 	.word	0x20016745
 800acf8:	20016ab4 	.word	0x20016ab4
 800acfc:	20016628 	.word	0x20016628
 800ad00:	0800e300 	.word	0x0800e300
 800ad04:	2001673f 	.word	0x2001673f
 800ad08:	005b8d80 	.word	0x005b8d80

0800ad0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
    if (htim->Instance==TIM7){
 800ad0c:	6802      	ldr	r2, [r0, #0]
 800ad0e:	4b03      	ldr	r3, [pc, #12]	; (800ad1c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d000      	beq.n	800ad16 <HAL_TIM_PeriodElapsedCallback+0xa>
    	/*HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);*/
    	mouseDriver_controlISR();
    }
}
 800ad14:	4770      	bx	lr
    	mouseDriver_controlISR();
 800ad16:	f7fe badd 	b.w	80092d4 <mouseDriver_controlISR>
 800ad1a:	bf00      	nop
 800ad1c:	40001400 	.word	0x40001400

0800ad20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad20:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad22:	2100      	movs	r1, #0
{
 800ad24:	b0b9      	sub	sp, #228	; 0xe4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad26:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad28:	2224      	movs	r2, #36	; 0x24
 800ad2a:	a806      	add	r0, sp, #24
 800ad2c:	f003 fa54 	bl	800e1d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad30:	4621      	mov	r1, r4
 800ad32:	a816      	add	r0, sp, #88	; 0x58
 800ad34:	2288      	movs	r2, #136	; 0x88
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad36:	e9cd 4400 	strd	r4, r4, [sp]
 800ad3a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800ad3e:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad40:	f003 fa4a 	bl	800e1d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ad44:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ad48:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ad4a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ad4c:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ad4e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ad50:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 800ad52:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800ad54:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad56:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800ad58:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ad5c:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ad5e:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ad60:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800ad64:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad68:	f000 fefe 	bl	800bb68 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad6c:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad6e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ad70:	2104      	movs	r1, #4
 800ad72:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad74:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ad78:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad7c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ad7e:	f001 fa3f 	bl	800c200 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad82:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ad84:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ad86:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad88:	f001 fc02 	bl	800c590 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800ad8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad90:	f000 fe4c 	bl	800ba2c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 800ad94:	b039      	add	sp, #228	; 0xe4
 800ad96:	bd30      	pop	{r4, r5, pc}

0800ad98 <main>:
{
 800ad98:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad9c:	2400      	movs	r4, #0
{
 800ad9e:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800ada0:	f000 fb32 	bl	800b408 <HAL_Init>
	mouseDriver_init();
 800ada4:	f7fe f942 	bl	800902c <mouseDriver_init>
  SystemClock_Config();
 800ada8:	f7ff ffba 	bl	800ad20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adac:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 800adb0:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800adb4:	4dab      	ldr	r5, [pc, #684]	; (800b064 <main+0x2cc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adb6:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800adb8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 800adba:	48ab      	ldr	r0, [pc, #684]	; (800b068 <main+0x2d0>)
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adbc:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800b090 <main+0x2f8>
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 800adc0:	4faa      	ldr	r7, [pc, #680]	; (800b06c <main+0x2d4>)
  htim7.Instance = TIM7;
 800adc2:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b094 <main+0x2fc>
  htim1.Instance = TIM1;
 800adc6:	4eaa      	ldr	r6, [pc, #680]	; (800b070 <main+0x2d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800adc8:	f043 0304 	orr.w	r3, r3, #4
 800adcc:	64eb      	str	r3, [r5, #76]	; 0x4c
 800adce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800add8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800adda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adde:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ade0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800adea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800adec:	f043 0301 	orr.w	r3, r3, #1
 800adf0:	64eb      	str	r3, [r5, #76]	; 0x4c
 800adf2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	9303      	str	r3, [sp, #12]
 800adfa:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800adfc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800adfe:	f043 0302 	orr.w	r3, r3, #2
 800ae02:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ae04:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae10:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 800ae12:	f000 fdfd 	bl	800ba10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ae16:	4622      	mov	r2, r4
 800ae18:	2120      	movs	r1, #32
 800ae1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae1e:	f000 fdf7 	bl	800ba10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ae22:	4b94      	ldr	r3, [pc, #592]	; (800b074 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ae24:	4890      	ldr	r0, [pc, #576]	; (800b068 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae26:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = B1_Pin;
 800ae28:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ae2c:	a913      	add	r1, sp, #76	; 0x4c

  /*Configure GPIO pin : CS_1_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin;
 800ae2e:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ae32:	e9cd b313 	strd	fp, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ae36:	f000 fcd7 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_1_GPIO_Port, &GPIO_InitStruct);
 800ae3a:	a913      	add	r1, sp, #76	; 0x4c
 800ae3c:	488a      	ldr	r0, [pc, #552]	; (800b068 <main+0x2d0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae3e:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae42:	e9cd aa13 	strd	sl, sl, [sp, #76]	; 0x4c
  HAL_GPIO_Init(CS_1_GPIO_Port, &GPIO_InitStruct);
 800ae46:	f000 fccf 	bl	800b7e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800ae4a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ae4c:	a913      	add	r1, sp, #76	; 0x4c
 800ae4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 800ae52:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae54:	e9cd a414 	strd	sl, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae58:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ae5a:	f000 fcc5 	bl	800b7e8 <HAL_GPIO_Init>
  __DMA1_CLK_ENABLE();
 800ae5e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae60:	f8c8 400c 	str.w	r4, [r8, #12]
  __DMA1_CLK_ENABLE();
 800ae64:	ea43 030a 	orr.w	r3, r3, sl
 800ae68:	64ab      	str	r3, [r5, #72]	; 0x48
 800ae6a:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae6c:	f8c8 4014 	str.w	r4, [r8, #20]
  __DMA1_CLK_ENABLE();
 800ae70:	ea03 030a 	and.w	r3, r3, sl
 800ae74:	9300      	str	r3, [sp, #0]
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae76:	2210      	movs	r2, #16
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae78:	2380      	movs	r3, #128	; 0x80
  HAL_DMA_Init(&hdma_usart2_tx);
 800ae7a:	4640      	mov	r0, r8
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae7c:	f8c8 2008 	str.w	r2, [r8, #8]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae80:	f8c8 3010 	str.w	r3, [r8, #16]
  __DMA1_CLK_ENABLE();
 800ae84:	9900      	ldr	r1, [sp, #0]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae86:	f8c8 4020 	str.w	r4, [r8, #32]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ae8a:	e9c8 4406 	strd	r4, r4, [r8, #24]
  HAL_DMA_Init(&hdma_usart2_tx);
 800ae8e:	f000 fb7f 	bl	800b590 <HAL_DMA_Init>
  huart2.Instance = USART2;
 800ae92:	4979      	ldr	r1, [pc, #484]	; (800b078 <main+0x2e0>)
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 800ae94:	f8c7 8068 	str.w	r8, [r7, #104]	; 0x68
  huart2.Init.BaudRate = 230400;
 800ae98:	f44f 3261 	mov.w	r2, #230400	; 0x38400
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ae9c:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ae9e:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 230400;
 800aea0:	e9c7 1200 	strd	r1, r2, [r7]
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 800aea4:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 800aea8:	617b      	str	r3, [r7, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aeaa:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aeae:	613c      	str	r4, [r7, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800aeb0:	e9c7 4406 	strd	r4, r4, [r7, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aeb4:	e9c7 4408 	strd	r4, r4, [r7, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aeb8:	f002 ff3a 	bl	800dd30 <HAL_UART_Init>
  htim7.Instance = TIM7;
 800aebc:	496f      	ldr	r1, [pc, #444]	; (800b07c <main+0x2e4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aebe:	9413      	str	r4, [sp, #76]	; 0x4c
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 800aec0:	f44f 7320 	mov.w	r3, #640	; 0x280
  htim7.Init.Prescaler = PRESCALER_HEART;
 800aec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800aec8:	4648      	mov	r0, r9
  htim7.Init.Prescaler = PRESCALER_HEART;
 800aeca:	e9c9 1200 	strd	r1, r2, [r9]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 800aece:	f8c9 300c 	str.w	r3, [r9, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aed2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aed6:	f8c9 4008 	str.w	r4, [r9, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aeda:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800aede:	f001 ff4f 	bl	800cd80 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800aee2:	a913      	add	r1, sp, #76	; 0x4c
 800aee4:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aee6:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aee8:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800aeea:	f002 fc33 	bl	800d754 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800aeee:	4621      	mov	r1, r4
 800aef0:	222c      	movs	r2, #44	; 0x2c
 800aef2:	a813      	add	r0, sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aef4:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aef6:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aef8:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aefa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800aefe:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af00:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af04:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800af08:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800af0c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af10:	f003 f962 	bl	800e1d8 <memset>
  htim1.Init.Prescaler = PRESCALER_PWM;
 800af14:	2209      	movs	r2, #9
  htim1.Instance = TIM1;
 800af16:	495a      	ldr	r1, [pc, #360]	; (800b080 <main+0x2e8>)
  htim1.Init.Prescaler = PRESCALER_PWM;
 800af18:	6072      	str	r2, [r6, #4]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 800af1a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800af1c:	4630      	mov	r0, r6
  htim1.Instance = TIM1;
 800af1e:	6031      	str	r1, [r6, #0]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 800af20:	60f3      	str	r3, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af22:	60b4      	str	r4, [r6, #8]
  htim1.Init.RepetitionCounter = 0;
 800af24:	e9c6 4404 	strd	r4, r4, [r6, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af28:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800af2a:	f001 ff29 	bl	800cd80 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800af32:	a908      	add	r1, sp, #32
 800af34:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af36:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800af38:	f002 faa4 	bl	800d484 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800af3c:	4630      	mov	r0, r6
 800af3e:	f001 ffc3 	bl	800cec8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800af42:	a905      	add	r1, sp, #20
 800af44:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800af46:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af4a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800af4c:	f002 fc02 	bl	800d754 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af50:	f04f 0c60 	mov.w	ip, #96	; 0x60
  sConfigOC.Pulse = PULSE_PWM;
 800af54:	230a      	movs	r3, #10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800af56:	4622      	mov	r2, r4
 800af58:	a90c      	add	r1, sp, #48	; 0x30
 800af5a:	4630      	mov	r0, r6
  sConfigOC.Pulse = PULSE_PWM;
 800af5c:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800af60:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800af64:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800af68:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800af6a:	f002 f8b9 	bl	800d0e0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800af6e:	2204      	movs	r2, #4
 800af70:	a90c      	add	r1, sp, #48	; 0x30
 800af72:	4630      	mov	r0, r6
 800af74:	f002 f8b4 	bl	800d0e0 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800af78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800af7c:	a913      	add	r1, sp, #76	; 0x4c
 800af7e:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800af80:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800af82:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800af86:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 800af8a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800af8e:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800af90:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800af94:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800af98:	f002 fc0c 	bl	800d7b4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 800af9c:	4630      	mov	r0, r6
 800af9e:	f000 f915 	bl	800b1cc <HAL_TIM_MspPostInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800afa2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800afa4:	ea43 030a 	orr.w	r3, r3, sl
 800afa8:	64ab      	str	r3, [r5, #72]	; 0x48
 800afaa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800afac:	ea03 030a 	and.w	r3, r3, sl
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800afb0:	4622      	mov	r2, r4
 800afb2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800afb4:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800afb6:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 800afb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800afba:	f000 fa77 	bl	800b4ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800afbe:	2011      	movs	r0, #17
 800afc0:	f000 faaa 	bl	800b518 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_SPI2_CLK_ENABLE();
 800afc4:	6daa      	ldr	r2, [r5, #88]	; 0x58
  hspi2.Instance = SPI2;
 800afc6:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <main+0x2ec>)
 800afc8:	492f      	ldr	r1, [pc, #188]	; (800b088 <main+0x2f0>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800afca:	609c      	str	r4, [r3, #8]
  __HAL_RCC_SPI2_CLK_ENABLE();
 800afcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afd0:	65aa      	str	r2, [r5, #88]	; 0x58
 800afd2:	6daa      	ldr	r2, [r5, #88]	; 0x58
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800afd4:	615c      	str	r4, [r3, #20]
  __HAL_RCC_SPI2_CLK_ENABLE();
 800afd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800afda:	9208      	str	r2, [sp, #32]
 800afdc:	9a08      	ldr	r2, [sp, #32]
  __SPI2_CLK_ENABLE();
 800afde:	6daa      	ldr	r2, [r5, #88]	; 0x58
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800afe0:	621c      	str	r4, [r3, #32]
  __SPI2_CLK_ENABLE();
 800afe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afe6:	65aa      	str	r2, [r5, #88]	; 0x58
 800afe8:	6daa      	ldr	r2, [r5, #88]	; 0x58
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800afea:	625c      	str	r4, [r3, #36]	; 0x24
  __SPI2_CLK_ENABLE();
 800afec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800aff0:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800aff4:	f44f 7c00 	mov.w	ip, #512	; 0x200
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800aff8:	4618      	mov	r0, r3
  __SPI2_CLK_ENABLE();
 800affa:	920c      	str	r2, [sp, #48]	; 0x30
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800affc:	2502      	movs	r5, #2
  hspi2.Init.CRCPolynomial = 7;
 800affe:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b000:	f44f 7882 	mov.w	r8, #260	; 0x104
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800b004:	2638      	movs	r6, #56	; 0x38
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b006:	e9c3 1800 	strd	r1, r8, [r3]
  hspi2.Init.CRCPolynomial = 7;
 800b00a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b00c:	629c      	str	r4, [r3, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b00e:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b012:	f8c3 e00c 	str.w	lr, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800b016:	e9c3 c606 	strd	ip, r6, [r3, #24]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b01a:	611d      	str	r5, [r3, #16]
  __SPI2_CLK_ENABLE();
 800b01c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b020:	f001 fd2a 	bl	800ca78 <HAL_SPI_Init>
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 800b024:	4622      	mov	r2, r4
 800b026:	4621      	mov	r1, r4
 800b028:	2026      	movs	r0, #38	; 0x26
 800b02a:	f000 fa3f 	bl	800b4ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b02e:	2026      	movs	r0, #38	; 0x26
 800b030:	f000 fa72 	bl	800b518 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,2);
 800b034:	462a      	mov	r2, r5
 800b036:	4629      	mov	r1, r5
 800b038:	2037      	movs	r0, #55	; 0x37
 800b03a:	f000 fa37 	bl	800b4ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b03e:	2037      	movs	r0, #55	; 0x37
 800b040:	f000 fa6a 	bl	800b518 <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 800b044:	4652      	mov	r2, sl
 800b046:	4911      	ldr	r1, [pc, #68]	; (800b08c <main+0x2f4>)
 800b048:	4638      	mov	r0, r7
 800b04a:	f002 fbff 	bl	800d84c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800b04e:	4648      	mov	r0, r9
 800b050:	f001 ff22 	bl	800ce98 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800b054:	4652      	mov	r2, sl
 800b056:	4651      	mov	r1, sl
 800b058:	4803      	ldr	r0, [pc, #12]	; (800b068 <main+0x2d0>)
 800b05a:	f000 fcd9 	bl	800ba10 <HAL_GPIO_WritePin>
	 mouseDriver_idle();
 800b05e:	f7fe f8ab 	bl	80091b8 <mouseDriver_idle>
 800b062:	e7fc      	b.n	800b05e <main+0x2c6>
 800b064:	40021000 	.word	0x40021000
 800b068:	48000800 	.word	0x48000800
 800b06c:	20016c00 	.word	0x20016c00
 800b070:	20016bc0 	.word	0x20016bc0
 800b074:	10210000 	.word	0x10210000
 800b078:	40004400 	.word	0x40004400
 800b07c:	40001400 	.word	0x40001400
 800b080:	40012c00 	.word	0x40012c00
 800b084:	20016b14 	.word	0x20016b14
 800b088:	40003800 	.word	0x40003800
 800b08c:	20016624 	.word	0x20016624
 800b090:	20016b78 	.word	0x20016b78
 800b094:	20016c80 	.word	0x20016c80

0800b098 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop

0800b09c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <HAL_MspInit+0x2c>)
 800b09e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b0a0:	f042 0201 	orr.w	r2, r2, #1
 800b0a4:	661a      	str	r2, [r3, #96]	; 0x60
 800b0a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800b0a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0aa:	f002 0201 	and.w	r2, r2, #1
 800b0ae:	9200      	str	r2, [sp, #0]
 800b0b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b0b8:	659a      	str	r2, [r3, #88]	; 0x58
 800b0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b0c4:	b002      	add	sp, #8
 800b0c6:	4770      	bx	lr
 800b0c8:	40021000 	.word	0x40021000

0800b0cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800b0ce:	6802      	ldr	r2, [r0, #0]
 800b0d0:	4b21      	ldr	r3, [pc, #132]	; (800b158 <HAL_SPI_MspInit+0x8c>)
{
 800b0d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d4:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 800b0d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b0dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b0e0:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI2)
 800b0e2:	d001      	beq.n	800b0e8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b0e4:	b009      	add	sp, #36	; 0x24
 800b0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b0e8:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ec:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b0ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0f0:	481a      	ldr	r0, [pc, #104]	; (800b15c <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b0f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0f6:	659a      	str	r2, [r3, #88]	; 0x58
 800b0f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b0fe:	9200      	str	r2, [sp, #0]
 800b100:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b104:	f042 0204 	orr.w	r2, r2, #4
 800b108:	64da      	str	r2, [r3, #76]	; 0x4c
 800b10a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b10c:	f002 0204 	and.w	r2, r2, #4
 800b110:	9201      	str	r2, [sp, #4]
 800b112:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b116:	f042 0202 	orr.w	r2, r2, #2
 800b11a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b124:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b126:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b12a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b12c:	2505      	movs	r5, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b12e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b130:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b134:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b138:	f000 fb56 	bl	800b7e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b140:	a903      	add	r1, sp, #12
 800b142:	4807      	ldr	r0, [pc, #28]	; (800b160 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b144:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b146:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b14c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b14e:	f000 fb4b 	bl	800b7e8 <HAL_GPIO_Init>
}
 800b152:	b009      	add	sp, #36	; 0x24
 800b154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b156:	bf00      	nop
 800b158:	40003800 	.word	0x40003800
 800b15c:	48000800 	.word	0x48000800
 800b160:	48000400 	.word	0x48000400

0800b164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b164:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800b166:	6803      	ldr	r3, [r0, #0]
 800b168:	4a15      	ldr	r2, [pc, #84]	; (800b1c0 <HAL_TIM_Base_MspInit+0x5c>)
 800b16a:	4293      	cmp	r3, r2
{
 800b16c:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800b16e:	d005      	beq.n	800b17c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800b170:	4a14      	ldr	r2, [pc, #80]	; (800b1c4 <HAL_TIM_Base_MspInit+0x60>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00f      	beq.n	800b196 <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800b176:	b003      	add	sp, #12
 800b178:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <HAL_TIM_Base_MspInit+0x64>)
 800b17e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b184:	661a      	str	r2, [r3, #96]	; 0x60
 800b186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	9b00      	ldr	r3, [sp, #0]
}
 800b190:	b003      	add	sp, #12
 800b192:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <HAL_TIM_Base_MspInit+0x64>)
 800b198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b19a:	f042 0220 	orr.w	r2, r2, #32
 800b19e:	659a      	str	r2, [r3, #88]	; 0x58
 800b1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b1a2:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b1a4:	f003 0320 	and.w	r3, r3, #32
 800b1a8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b1ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b1b0:	f000 f97c 	bl	800b4ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b1b4:	2037      	movs	r0, #55	; 0x37
}
 800b1b6:	b003      	add	sp, #12
 800b1b8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b1bc:	f000 b9ac 	b.w	800b518 <HAL_NVIC_EnableIRQ>
 800b1c0:	40012c00 	.word	0x40012c00
 800b1c4:	40001400 	.word	0x40001400
 800b1c8:	40021000 	.word	0x40021000

0800b1cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b1cc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800b1ce:	6801      	ldr	r1, [r0, #0]
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <HAL_TIM_MspPostInit+0x54>)
{
 800b1d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1d4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800b1d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b1dc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b1e0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800b1e2:	d001      	beq.n	800b1e8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800b1e4:	b007      	add	sp, #28
 800b1e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1f0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f4:	f042 0201 	orr.w	r2, r2, #1
 800b1f8:	64da      	str	r2, [r3, #76]	; 0x4c
 800b1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b202:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b204:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b206:	f44f 7440 	mov.w	r4, #768	; 0x300
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b20a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b20e:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b210:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b212:	e9cd 4201 	strd	r4, r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b216:	f000 fae7 	bl	800b7e8 <HAL_GPIO_Init>
}
 800b21a:	b007      	add	sp, #28
 800b21c:	bd30      	pop	{r4, r5, pc}
 800b21e:	bf00      	nop
 800b220:	40012c00 	.word	0x40012c00

0800b224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b224:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800b226:	6802      	ldr	r2, [r0, #0]
 800b228:	4b26      	ldr	r3, [pc, #152]	; (800b2c4 <HAL_UART_MspInit+0xa0>)
{
 800b22a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b22c:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 800b22e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b230:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b234:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b238:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART2)
 800b23a:	d001      	beq.n	800b240 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b23c:	b009      	add	sp, #36	; 0x24
 800b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800b240:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800b244:	4d20      	ldr	r5, [pc, #128]	; (800b2c8 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800b246:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b248:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b24c:	659a      	str	r2, [r3, #88]	; 0x58
 800b24e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b250:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800b254:	9201      	str	r2, [sp, #4]
 800b256:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	64da      	str	r2, [r3, #76]	; 0x4c
 800b260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b268:	230c      	movs	r3, #12
 800b26a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b26c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b26e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b270:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b272:	9306      	str	r3, [sp, #24]
 800b274:	4606      	mov	r6, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b276:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b27c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b27e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b280:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b282:	f000 fab1 	bl	800b7e8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800b286:	4911      	ldr	r1, [pc, #68]	; (800b2cc <HAL_UART_MspInit+0xa8>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800b288:	606f      	str	r7, [r5, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b28a:	2210      	movs	r2, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b28c:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b28e:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b290:	60ec      	str	r4, [r5, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b292:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b296:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800b29a:	6029      	str	r1, [r5, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b29c:	60aa      	str	r2, [r5, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b29e:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b2a0:	f000 f976 	bl	800b590 <HAL_DMA_Init>
 800b2a4:	b958      	cbnz	r0, 800b2be <HAL_UART_MspInit+0x9a>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800b2aa:	66b5      	str	r5, [r6, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b2ac:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800b2ae:	62ae      	str	r6, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b2b0:	f000 f8fc 	bl	800b4ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b2b4:	2026      	movs	r0, #38	; 0x26
 800b2b6:	f000 f92f 	bl	800b518 <HAL_NVIC_EnableIRQ>
}
 800b2ba:	b009      	add	sp, #36	; 0x24
 800b2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800b2be:	f7ff feeb 	bl	800b098 <Error_Handler>
 800b2c2:	e7f0      	b.n	800b2a6 <HAL_UART_MspInit+0x82>
 800b2c4:	40004400 	.word	0x40004400
 800b2c8:	20016b78 	.word	0x20016b78
 800b2cc:	40020080 	.word	0x40020080

0800b2d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop

0800b2d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b2d4:	e7fe      	b.n	800b2d4 <HardFault_Handler>
 800b2d6:	bf00      	nop

0800b2d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b2d8:	e7fe      	b.n	800b2d8 <MemManage_Handler>
 800b2da:	bf00      	nop

0800b2dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b2dc:	e7fe      	b.n	800b2dc <BusFault_Handler>
 800b2de:	bf00      	nop

0800b2e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b2e0:	e7fe      	b.n	800b2e0 <UsageFault_Handler>
 800b2e2:	bf00      	nop

0800b2e4 <SVC_Handler>:
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop

0800b2e8 <DebugMon_Handler>:
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop

0800b2ec <PendSV_Handler>:
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop

0800b2f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b2f0:	f000 b8a6 	b.w	800b440 <HAL_IncTick>

0800b2f4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b2f4:	4801      	ldr	r0, [pc, #4]	; (800b2fc <DMA1_Channel7_IRQHandler+0x8>)
 800b2f6:	f000 ba23 	b.w	800b740 <HAL_DMA_IRQHandler>
 800b2fa:	bf00      	nop
 800b2fc:	20016b78 	.word	0x20016b78

0800b300 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b300:	4801      	ldr	r0, [pc, #4]	; (800b308 <USART2_IRQHandler+0x8>)
 800b302:	f002 bc05 	b.w	800db10 <HAL_UART_IRQHandler>
 800b306:	bf00      	nop
 800b308:	20016c00 	.word	0x20016c00

0800b30c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b30c:	4801      	ldr	r0, [pc, #4]	; (800b314 <TIM7_IRQHandler+0x8>)
 800b30e:	f002 b969 	b.w	800d5e4 <HAL_TIM_IRQHandler>
 800b312:	bf00      	nop
 800b314:	20016c80 	.word	0x20016c80

0800b318 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b318:	4911      	ldr	r1, [pc, #68]	; (800b360 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b31a:	4b12      	ldr	r3, [pc, #72]	; (800b364 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b31c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b320:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800b324:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b326:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800b32a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b32c:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800b32e:	f042 0201 	orr.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800b334:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800b33c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b340:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 800b344:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800b346:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b348:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b34a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 800b34e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b352:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 800b354:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b356:	608c      	str	r4, [r1, #8]
#endif
}
 800b358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000ed00 	.word	0xe000ed00
 800b364:	40021000 	.word	0x40021000

0800b368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b368:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b36c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b36e:	e003      	b.n	800b378 <LoopCopyDataInit>

0800b370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b376:	3104      	adds	r1, #4

0800b378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b378:	480b      	ldr	r0, [pc, #44]	; (800b3a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b37a:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800b37c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b37e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b380:	d3f6      	bcc.n	800b370 <CopyDataInit>
	ldr	r2, =_sbss
 800b382:	4a0b      	ldr	r2, [pc, #44]	; (800b3b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800b384:	e002      	b.n	800b38c <LoopFillZerobss>

0800b386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b388:	f842 3b04 	str.w	r3, [r2], #4

0800b38c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b38c:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <LoopForever+0x16>)
	cmp	r2, r3
 800b38e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b390:	d3f9      	bcc.n	800b386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b392:	f7ff ffc1 	bl	800b318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b396:	f002 fee1 	bl	800e15c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b39a:	f7ff fcfd 	bl	800ad98 <main>

0800b39e <LoopForever>:

LoopForever:
    b LoopForever
 800b39e:	e7fe      	b.n	800b39e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b3a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800b3a4:	0800e4cc 	.word	0x0800e4cc
	ldr	r0, =_sdata
 800b3a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b3ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800b3b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800b3b4:	20016cc4 	.word	0x20016cc4

0800b3b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b3b8:	e7fe      	b.n	800b3b8 <ADC1_2_IRQHandler>
	...

0800b3bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b3bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <HAL_InitTick+0x40>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	b90b      	cbnz	r3, 800b3c8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800b3c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800b3c8:	490d      	ldr	r1, [pc, #52]	; (800b400 <HAL_InitTick+0x44>)
 800b3ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d4:	6808      	ldr	r0, [r1, #0]
 800b3d6:	fbb0 f0f3 	udiv	r0, r0, r3
 800b3da:	f000 f8bf 	bl	800b55c <HAL_SYSTICK_Config>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d1ef      	bne.n	800b3c4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b3e4:	2d0f      	cmp	r5, #15
 800b3e6:	d8ed      	bhi.n	800b3c4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3f0:	f000 f85c 	bl	800b4ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b3f4:	4b03      	ldr	r3, [pc, #12]	; (800b404 <HAL_InitTick+0x48>)
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	601d      	str	r5, [r3, #0]
}
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	20000004 	.word	0x20000004
 800b400:	20000000 	.word	0x20000000
 800b404:	20000008 	.word	0x20000008

0800b408 <HAL_Init>:
{
 800b408:	b500      	push	{lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b40a:	4a0c      	ldr	r2, [pc, #48]	; (800b43c <HAL_Init+0x34>)
 800b40c:	6813      	ldr	r3, [r2, #0]
 800b40e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800b412:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b414:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b416:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b418:	f000 f836 	bl	800b488 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b41c:	2000      	movs	r0, #0
 800b41e:	f7ff ffcd 	bl	800b3bc <HAL_InitTick>
 800b422:	b118      	cbz	r0, 800b42c <HAL_Init+0x24>
    status = HAL_ERROR;
 800b424:	2001      	movs	r0, #1
}
 800b426:	b003      	add	sp, #12
 800b428:	f85d fb04 	ldr.w	pc, [sp], #4
 800b42c:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 800b42e:	f7ff fe35 	bl	800b09c <HAL_MspInit>
 800b432:	9801      	ldr	r0, [sp, #4]
}
 800b434:	b003      	add	sp, #12
 800b436:	f85d fb04 	ldr.w	pc, [sp], #4
 800b43a:	bf00      	nop
 800b43c:	40022000 	.word	0x40022000

0800b440 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800b440:	4a03      	ldr	r2, [pc, #12]	; (800b450 <HAL_IncTick+0x10>)
 800b442:	4904      	ldr	r1, [pc, #16]	; (800b454 <HAL_IncTick+0x14>)
 800b444:	6813      	ldr	r3, [r2, #0]
 800b446:	6809      	ldr	r1, [r1, #0]
 800b448:	440b      	add	r3, r1
 800b44a:	6013      	str	r3, [r2, #0]
}
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20016cc0 	.word	0x20016cc0
 800b454:	20000004 	.word	0x20000004

0800b458 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b458:	4b01      	ldr	r3, [pc, #4]	; (800b460 <HAL_GetTick+0x8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
}
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20016cc0 	.word	0x20016cc0

0800b464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b468:	f7ff fff6 	bl	800b458 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b46c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800b46e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800b470:	d002      	beq.n	800b478 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800b472:	4b04      	ldr	r3, [pc, #16]	; (800b484 <HAL_Delay+0x20>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b478:	f7ff ffee 	bl	800b458 <HAL_GetTick>
 800b47c:	1b40      	subs	r0, r0, r5
 800b47e:	42a0      	cmp	r0, r4
 800b480:	d3fa      	bcc.n	800b478 <HAL_Delay+0x14>
  {
  }
}
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	20000004 	.word	0x20000004

0800b488 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b488:	4a07      	ldr	r2, [pc, #28]	; (800b4a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800b48a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b48c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800b490:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b492:	0200      	lsls	r0, r0, #8
 800b494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b498:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800b49c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800b4a0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800b4a2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	e000ed00 	.word	0xe000ed00

0800b4ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b4ac:	4b18      	ldr	r3, [pc, #96]	; (800b510 <HAL_NVIC_SetPriority+0x64>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b4b4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b4b6:	f1c3 0507 	rsb	r5, r3, #7
 800b4ba:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b4bc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b4c0:	bf28      	it	cs
 800b4c2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b4c4:	2c06      	cmp	r4, #6
 800b4c6:	d919      	bls.n	800b4fc <HAL_NVIC_SetPriority+0x50>
 800b4c8:	3b03      	subs	r3, #3
 800b4ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b4ce:	409c      	lsls	r4, r3
 800b4d0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d8:	40aa      	lsls	r2, r5
 800b4da:	ea21 0102 	bic.w	r1, r1, r2
 800b4de:	fa01 f203 	lsl.w	r2, r1, r3
 800b4e2:	4322      	orrs	r2, r4
 800b4e4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	db0a      	blt.n	800b502 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800b4f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800b4f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b4f8:	bc30      	pop	{r4, r5}
 800b4fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b4fc:	2400      	movs	r4, #0
 800b4fe:	4623      	mov	r3, r4
 800b500:	e7e8      	b.n	800b4d4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b502:	4b04      	ldr	r3, [pc, #16]	; (800b514 <HAL_NVIC_SetPriority+0x68>)
 800b504:	f000 000f 	and.w	r0, r0, #15
 800b508:	4403      	add	r3, r0
 800b50a:	761a      	strb	r2, [r3, #24]
 800b50c:	bc30      	pop	{r4, r5}
 800b50e:	4770      	bx	lr
 800b510:	e000ed00 	.word	0xe000ed00
 800b514:	e000ecfc 	.word	0xe000ecfc

0800b518 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b518:	2800      	cmp	r0, #0
 800b51a:	db07      	blt.n	800b52c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b51c:	f000 011f 	and.w	r1, r0, #31
 800b520:	2301      	movs	r3, #1
 800b522:	0940      	lsrs	r0, r0, #5
 800b524:	4a02      	ldr	r2, [pc, #8]	; (800b530 <HAL_NVIC_EnableIRQ+0x18>)
 800b526:	408b      	lsls	r3, r1
 800b528:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	e000e100 	.word	0xe000e100

0800b534 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b534:	2800      	cmp	r0, #0
 800b536:	db0d      	blt.n	800b554 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b538:	0943      	lsrs	r3, r0, #5
 800b53a:	3320      	adds	r3, #32
 800b53c:	2201      	movs	r2, #1
 800b53e:	4906      	ldr	r1, [pc, #24]	; (800b558 <HAL_NVIC_DisableIRQ+0x24>)
 800b540:	f000 001f 	and.w	r0, r0, #31
 800b544:	fa02 f000 	lsl.w	r0, r2, r0
 800b548:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b54c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b550:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	e000e100 	.word	0xe000e100

0800b55c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b55c:	3801      	subs	r0, #1
 800b55e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b562:	d20e      	bcs.n	800b582 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b564:	4b08      	ldr	r3, [pc, #32]	; (800b588 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b566:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b568:	4c08      	ldr	r4, [pc, #32]	; (800b58c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b56a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b56c:	20f0      	movs	r0, #240	; 0xf0
 800b56e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b572:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b574:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b576:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b57a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800b57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b580:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b582:	2001      	movs	r0, #1
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	e000e010 	.word	0xe000e010
 800b58c:	e000ed00 	.word	0xe000ed00

0800b590 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b590:	2800      	cmp	r0, #0
 800b592:	d04e      	beq.n	800b632 <HAL_DMA_Init+0xa2>
 800b594:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b596:	4a2d      	ldr	r2, [pc, #180]	; (800b64c <HAL_DMA_Init+0xbc>)
 800b598:	6800      	ldr	r0, [r0, #0]
 800b59a:	4290      	cmp	r0, r2
{
 800b59c:	b4f0      	push	{r4, r5, r6, r7}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b59e:	d93f      	bls.n	800b620 <HAL_DMA_Init+0x90>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b5a0:	492b      	ldr	r1, [pc, #172]	; (800b650 <HAL_DMA_Init+0xc0>)
 800b5a2:	4a2c      	ldr	r2, [pc, #176]	; (800b654 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA2;
 800b5a4:	4d2c      	ldr	r5, [pc, #176]	; (800b658 <HAL_DMA_Init+0xc8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b5a6:	4401      	add	r1, r0
 800b5a8:	fba2 2101 	umull	r2, r1, r2, r1
 800b5ac:	0909      	lsrs	r1, r1, #4
 800b5ae:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b5b0:	e9d3 4202 	ldrd	r4, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5b4:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 800b5b8:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5ba:	433a      	orrs	r2, r7
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5bc:	2702      	movs	r7, #2
 800b5be:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5c2:	699f      	ldr	r7, [r3, #24]
 800b5c4:	641d      	str	r5, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5c6:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5c8:	433a      	orrs	r2, r7
 800b5ca:	69df      	ldr	r7, [r3, #28]
  tmp = hdma->Instance->CCR;
 800b5cc:	6806      	ldr	r6, [r0, #0]
 800b5ce:	6459      	str	r1, [r3, #68]	; 0x44
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5d0:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5d2:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b5d4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5d8:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b5da:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800b5de:	4332      	orrs	r2, r6
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800b5e0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800b5e4:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800b5e6:	d012      	beq.n	800b60e <HAL_DMA_Init+0x7e>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800b5e8:	4c1c      	ldr	r4, [pc, #112]	; (800b65c <HAL_DMA_Init+0xcc>)
 800b5ea:	6858      	ldr	r0, [r3, #4]
 800b5ec:	f001 011c 	and.w	r1, r1, #28
 800b5f0:	220f      	movs	r2, #15
 800b5f2:	408a      	lsls	r2, r1
 800b5f4:	42a5      	cmp	r5, r4
 800b5f6:	ea6f 0202 	mvn.w	r2, r2
 800b5fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b5fe:	d01a      	beq.n	800b636 <HAL_DMA_Init+0xa6>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b600:	4c17      	ldr	r4, [pc, #92]	; (800b660 <HAL_DMA_Init+0xd0>)
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	4002      	ands	r2, r0
 800b606:	6022      	str	r2, [r4, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	4301      	orrs	r1, r0
 800b60c:	6021      	str	r1, [r4, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b60e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b610:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b612:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b614:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800b618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
}
 800b61c:	bcf0      	pop	{r4, r5, r6, r7}
 800b61e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b620:	4910      	ldr	r1, [pc, #64]	; (800b664 <HAL_DMA_Init+0xd4>)
 800b622:	4a0c      	ldr	r2, [pc, #48]	; (800b654 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA1;
 800b624:	4d0d      	ldr	r5, [pc, #52]	; (800b65c <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b626:	4401      	add	r1, r0
 800b628:	fba2 2101 	umull	r2, r1, r2, r1
 800b62c:	0909      	lsrs	r1, r1, #4
 800b62e:	0089      	lsls	r1, r1, #2
 800b630:	e7be      	b.n	800b5b0 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800b632:	2001      	movs	r0, #1
}
 800b634:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b636:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800b63a:	4002      	ands	r2, r0
 800b63c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b640:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800b644:	4301      	orrs	r1, r0
 800b646:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 800b64a:	e7e0      	b.n	800b60e <HAL_DMA_Init+0x7e>
 800b64c:	40020407 	.word	0x40020407
 800b650:	bffdfbf8 	.word	0xbffdfbf8
 800b654:	cccccccd 	.word	0xcccccccd
 800b658:	40020400 	.word	0x40020400
 800b65c:	40020000 	.word	0x40020000
 800b660:	400204a8 	.word	0x400204a8
 800b664:	bffdfff8 	.word	0xbffdfff8

0800b668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b668:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b66a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800b66e:	2c01      	cmp	r4, #1
 800b670:	d034      	beq.n	800b6dc <HAL_DMA_Start_IT+0x74>

  if(HAL_DMA_STATE_READY == hdma->State)
 800b672:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800b676:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800b678:	b2ed      	uxtb	r5, r5
 800b67a:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800b67c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800b680:	d126      	bne.n	800b6d0 <HAL_DMA_Start_IT+0x68>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b682:	6804      	ldr	r4, [r0, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b684:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800b688:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b68a:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b68c:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b690:	63c6      	str	r6, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b692:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800b694:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b696:	f007 071c 	and.w	r7, r7, #28
    __HAL_DMA_DISABLE(hdma);
 800b69a:	f026 0601 	bic.w	r6, r6, #1
 800b69e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b6a0:	40bd      	lsls	r5, r7

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6a2:	6886      	ldr	r6, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b6a4:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 800b6a8:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800b6aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6ac:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b6ae:	bf0b      	itete	eq
 800b6b0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800b6b2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800b6b4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800b6b6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800b6b8:	b19b      	cbz	r3, 800b6e2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	f043 030e 	orr.w	r3, r3, #14
 800b6c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ca:	2000      	movs	r0, #0
}
 800b6cc:	bcf0      	pop	{r4, r5, r6, r7}
 800b6ce:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800b6d6:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800b6d8:	2002      	movs	r0, #2
}
 800b6da:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800b6dc:	2002      	movs	r0, #2
}
 800b6de:	bcf0      	pop	{r4, r5, r6, r7}
 800b6e0:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	f023 0304 	bic.w	r3, r3, #4
 800b6e8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	f043 030a 	orr.w	r3, r3, #10
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	e7e6      	b.n	800b6c2 <HAL_DMA_Start_IT+0x5a>

0800b6f4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b6f4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800b6f8:	2a02      	cmp	r2, #2
 800b6fa:	d003      	beq.n	800b704 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800b700:	2001      	movs	r0, #1
}
 800b702:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b704:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b706:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800b708:	b570      	push	{r4, r5, r6, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b70a:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b70c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    if(hdma->XferAbortCallback != NULL)
 800b70e:	6b85      	ldr	r5, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b710:	f024 040e 	bic.w	r4, r4, #14
 800b714:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800b716:	680c      	ldr	r4, [r1, #0]
 800b718:	f024 0401 	bic.w	r4, r4, #1
 800b71c:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b71e:	f002 021c 	and.w	r2, r2, #28
 800b722:	2101      	movs	r1, #1
 800b724:	fa01 f202 	lsl.w	r2, r1, r2
    __HAL_UNLOCK(hdma);
 800b728:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b72a:	6072      	str	r2, [r6, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b72c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800b730:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 800b734:	b115      	cbz	r5, 800b73c <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800b736:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 800b738:	4620      	mov	r0, r4
}
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800b73c:	4628      	mov	r0, r5
}
 800b73e:	bd70      	pop	{r4, r5, r6, pc}

0800b740 <HAL_DMA_IRQHandler>:
{
 800b740:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b742:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 800b746:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b748:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b74a:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b74c:	f003 031c 	and.w	r3, r3, #28
 800b750:	409a      	lsls	r2, r3
 800b752:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 800b754:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b756:	d00a      	beq.n	800b76e <HAL_DMA_IRQHandler+0x2e>
 800b758:	f014 0f04 	tst.w	r4, #4
 800b75c:	d007      	beq.n	800b76e <HAL_DMA_IRQHandler+0x2e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	069b      	lsls	r3, r3, #26
 800b762:	d537      	bpl.n	800b7d4 <HAL_DMA_IRQHandler+0x94>
      if(hdma->XferHalfCpltCallback != NULL)
 800b764:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b766:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 800b768:	b1cb      	cbz	r3, 800b79e <HAL_DMA_IRQHandler+0x5e>
}
 800b76a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800b76c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b76e:	2202      	movs	r2, #2
 800b770:	409a      	lsls	r2, r3
 800b772:	420a      	tst	r2, r1
 800b774:	d015      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x62>
 800b776:	f014 0f02 	tst.w	r4, #2
 800b77a:	d012      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x62>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	0699      	lsls	r1, r3, #26
 800b780:	d406      	bmi.n	800b790 <HAL_DMA_IRQHandler+0x50>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b782:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b784:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b786:	f023 030a 	bic.w	r3, r3, #10
 800b78a:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b78c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 800b790:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800b792:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800b794:	2200      	movs	r2, #0
 800b796:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1e5      	bne.n	800b76a <HAL_DMA_IRQHandler+0x2a>
}
 800b79e:	bc70      	pop	{r4, r5, r6}
 800b7a0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800b7a2:	2208      	movs	r2, #8
 800b7a4:	409a      	lsls	r2, r3
 800b7a6:	420a      	tst	r2, r1
 800b7a8:	d0f9      	beq.n	800b79e <HAL_DMA_IRQHandler+0x5e>
 800b7aa:	0722      	lsls	r2, r4, #28
 800b7ac:	d5f7      	bpl.n	800b79e <HAL_DMA_IRQHandler+0x5e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b7ae:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800b7b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b7b2:	f022 020e 	bic.w	r2, r2, #14
 800b7b6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800b7be:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b7c0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b7c2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800b7c4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800b7c8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800b7cc:	2900      	cmp	r1, #0
 800b7ce:	d0e6      	beq.n	800b79e <HAL_DMA_IRQHandler+0x5e>
}
 800b7d0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800b7d2:	4708      	bx	r1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	f023 0304 	bic.w	r3, r3, #4
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	e7c2      	b.n	800b764 <HAL_DMA_IRQHandler+0x24>
 800b7de:	bf00      	nop

0800b7e0 <HAL_DMA_GetState>:
  return hdma->State;
 800b7e0:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop

0800b7e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	4688      	mov	r8, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b7ee:	6809      	ldr	r1, [r1, #0]
{
 800b7f0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b7f2:	2900      	cmp	r1, #0
 800b7f4:	f000 80a0 	beq.w	800b938 <HAL_GPIO_Init+0x150>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b7f8:	f8df e210 	ldr.w	lr, [pc, #528]	; 800ba0c <HAL_GPIO_Init+0x224>
  uint32_t position = 0x00u;
 800b7fc:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b7fe:	2301      	movs	r3, #1
 800b800:	fa03 f205 	lsl.w	r2, r3, r5
    if (iocurrent != 0x00u)
 800b804:	ea12 0701 	ands.w	r7, r2, r1
 800b808:	f000 8091 	beq.w	800b92e <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b80c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b810:	f024 0610 	bic.w	r6, r4, #16
 800b814:	2e02      	cmp	r6, #2
 800b816:	f000 8092 	beq.w	800b93e <HAL_GPIO_Init+0x156>
 800b81a:	ea4f 0c45 	mov.w	ip, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b81e:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800b820:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b824:	fa03 f30c 	lsl.w	r3, r3, ip
 800b828:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b82a:	f004 0903 	and.w	r9, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b82e:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b832:	fa09 fa0c 	lsl.w	sl, r9, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b836:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b838:	ea4a 0a0b 	orr.w	sl, sl, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b83c:	2e01      	cmp	r6, #1
      GPIOx->MODER = temp;
 800b83e:	f8c0 a000 	str.w	sl, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b842:	f240 80a2 	bls.w	800b98a <HAL_GPIO_Init+0x1a2>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b846:	f1b9 0f03 	cmp.w	r9, #3
 800b84a:	d10a      	bne.n	800b862 <HAL_GPIO_Init+0x7a>
        temp = GPIOx->ASCR;
 800b84c:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b850:	f3c4 06c0 	ubfx	r6, r4, #3, #1
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b854:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b858:	4632      	mov	r2, r6
 800b85a:	40aa      	lsls	r2, r5
 800b85c:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->ASCR = temp;
 800b860:	62c2      	str	r2, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800b862:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b864:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b868:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b86a:	fa02 f20c 	lsl.w	r2, r2, ip
 800b86e:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b870:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 800b872:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b874:	d55b      	bpl.n	800b92e <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b876:	4a5e      	ldr	r2, [pc, #376]	; (800b9f0 <HAL_GPIO_Init+0x208>)
 800b878:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	6613      	str	r3, [r2, #96]	; 0x60
 800b880:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800b882:	f025 0603 	bic.w	r6, r5, #3
 800b886:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800b892:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b894:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b898:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800b89a:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b89e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800b8a2:	220f      	movs	r2, #15
 800b8a4:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b8a8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b8ac:	ea2c 0202 	bic.w	r2, ip, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b8b0:	d01b      	beq.n	800b8ea <HAL_GPIO_Init+0x102>
 800b8b2:	4b50      	ldr	r3, [pc, #320]	; (800b9f4 <HAL_GPIO_Init+0x20c>)
 800b8b4:	4298      	cmp	r0, r3
 800b8b6:	f000 8083 	beq.w	800b9c0 <HAL_GPIO_Init+0x1d8>
 800b8ba:	4b4f      	ldr	r3, [pc, #316]	; (800b9f8 <HAL_GPIO_Init+0x210>)
 800b8bc:	4298      	cmp	r0, r3
 800b8be:	d079      	beq.n	800b9b4 <HAL_GPIO_Init+0x1cc>
 800b8c0:	4b4e      	ldr	r3, [pc, #312]	; (800b9fc <HAL_GPIO_Init+0x214>)
 800b8c2:	4298      	cmp	r0, r3
 800b8c4:	f000 8087 	beq.w	800b9d6 <HAL_GPIO_Init+0x1ee>
 800b8c8:	4b4d      	ldr	r3, [pc, #308]	; (800ba00 <HAL_GPIO_Init+0x218>)
 800b8ca:	4298      	cmp	r0, r3
 800b8cc:	f000 8089 	beq.w	800b9e2 <HAL_GPIO_Init+0x1fa>
 800b8d0:	4b4c      	ldr	r3, [pc, #304]	; (800ba04 <HAL_GPIO_Init+0x21c>)
 800b8d2:	4298      	cmp	r0, r3
 800b8d4:	d079      	beq.n	800b9ca <HAL_GPIO_Init+0x1e2>
 800b8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ba08 <HAL_GPIO_Init+0x220>)
 800b8d8:	4298      	cmp	r0, r3
 800b8da:	bf0c      	ite	eq
 800b8dc:	f04f 0c06 	moveq.w	ip, #6
 800b8e0:	f04f 0c07 	movne.w	ip, #7
 800b8e4:	fa0c f309 	lsl.w	r3, ip, r9
 800b8e8:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b8ea:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR1;
 800b8ec:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 800b8f0:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b8f2:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 800b8f4:	bf54      	ite	pl
 800b8f6:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800b8f8:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 800b8fa:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 800b8fe:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b902:	03a6      	lsls	r6, r4, #14
        temp &= ~(iocurrent);
 800b904:	bf54      	ite	pl
 800b906:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800b908:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 800b90a:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b90e:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b912:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 800b914:	bf54      	ite	pl
 800b916:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800b918:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 800b91a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 800b91e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b922:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800b924:	bf54      	ite	pl
 800b926:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800b928:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 800b92a:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 800b92e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b930:	fa31 f305 	lsrs.w	r3, r1, r5
 800b934:	f47f af63 	bne.w	800b7fe <HAL_GPIO_Init+0x16>
  }
}
 800b938:	b003      	add	sp, #12
 800b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 800b93e:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800b942:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b946:	f005 0607 	and.w	r6, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 800b94a:	f8dc 3020 	ldr.w	r3, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b94e:	00b6      	lsls	r6, r6, #2
 800b950:	f04f 0a0f 	mov.w	sl, #15
 800b954:	fa0a fa06 	lsl.w	sl, sl, r6
 800b958:	ea23 090a 	bic.w	r9, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b95c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b960:	40b3      	lsls	r3, r6
 800b962:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->AFR[position >> 3u] = temp;
 800b966:	f8cc 3020 	str.w	r3, [ip, #32]
 800b96a:	ea4f 0c45 	mov.w	ip, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b96e:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800b970:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b972:	fa03 f30c 	lsl.w	r3, r3, ip
 800b976:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b978:	f004 0903 	and.w	r9, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b97c:	ea03 0a06 	and.w	sl, r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b980:	fa09 f60c 	lsl.w	r6, r9, ip
 800b984:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 800b988:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800b98a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b98c:	ea03 0a06 	and.w	sl, r3, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b990:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b994:	fa06 f60c 	lsl.w	r6, r6, ip
 800b998:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800b99c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800b99e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b9a2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9a6:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b9aa:	40ae      	lsls	r6, r5
 800b9ac:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800b9b0:	6046      	str	r6, [r0, #4]
 800b9b2:	e748      	b.n	800b846 <HAL_GPIO_Init+0x5e>
 800b9b4:	f04f 0c02 	mov.w	ip, #2
 800b9b8:	fa0c f309 	lsl.w	r3, ip, r9
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	e794      	b.n	800b8ea <HAL_GPIO_Init+0x102>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	fa03 f309 	lsl.w	r3, r3, r9
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	e78f      	b.n	800b8ea <HAL_GPIO_Init+0x102>
 800b9ca:	f04f 0c05 	mov.w	ip, #5
 800b9ce:	fa0c f309 	lsl.w	r3, ip, r9
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	e789      	b.n	800b8ea <HAL_GPIO_Init+0x102>
 800b9d6:	f04f 0c03 	mov.w	ip, #3
 800b9da:	fa0c f309 	lsl.w	r3, ip, r9
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	e783      	b.n	800b8ea <HAL_GPIO_Init+0x102>
 800b9e2:	f04f 0c04 	mov.w	ip, #4
 800b9e6:	fa0c f309 	lsl.w	r3, ip, r9
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	e77d      	b.n	800b8ea <HAL_GPIO_Init+0x102>
 800b9ee:	bf00      	nop
 800b9f0:	40021000 	.word	0x40021000
 800b9f4:	48000400 	.word	0x48000400
 800b9f8:	48000800 	.word	0x48000800
 800b9fc:	48000c00 	.word	0x48000c00
 800ba00:	48001000 	.word	0x48001000
 800ba04:	48001400 	.word	0x48001400
 800ba08:	48001800 	.word	0x48001800
 800ba0c:	40010400 	.word	0x40010400

0800ba10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ba10:	b90a      	cbnz	r2, 800ba16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ba12:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800ba14:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ba16:	6181      	str	r1, [r0, #24]
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop

0800ba1c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ba1c:	4b02      	ldr	r3, [pc, #8]	; (800ba28 <HAL_PWREx_GetVoltageRange+0xc>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
#endif
}
 800ba20:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	40007000 	.word	0x40007000

0800ba2c <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba2c:	4a1e      	ldr	r2, [pc, #120]	; (800baa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800ba2e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba38:	d00a      	beq.n	800ba50 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ba3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba3e:	d02e      	beq.n	800ba9e <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ba46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba54:	d023      	beq.n	800ba9e <HAL_PWREx_ControlVoltageScaling+0x72>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba56:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ba58:	4b14      	ldr	r3, [pc, #80]	; (800baac <HAL_PWREx_ControlVoltageScaling+0x80>)
 800ba5a:	4815      	ldr	r0, [pc, #84]	; (800bab0 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba5c:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800ba60:	f441 7100 	orr.w	r1, r1, #512	; 0x200
{
 800ba64:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba66:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ba68:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba6a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ba6c:	2332      	movs	r3, #50	; 0x32
 800ba6e:	fb03 f304 	mul.w	r3, r3, r4
 800ba72:	fba0 0303 	umull	r0, r3, r0, r3
 800ba76:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba78:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ba7a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba7e:	d506      	bpl.n	800ba8e <HAL_PWREx_ControlVoltageScaling+0x62>
 800ba80:	e000      	b.n	800ba84 <HAL_PWREx_ControlVoltageScaling+0x58>
 800ba82:	b123      	cbz	r3, 800ba8e <HAL_PWREx_ControlVoltageScaling+0x62>
 800ba84:	6951      	ldr	r1, [r2, #20]
 800ba86:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800ba88:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba8c:	d4f9      	bmi.n	800ba82 <HAL_PWREx_ControlVoltageScaling+0x56>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ba8e:	4b06      	ldr	r3, [pc, #24]	; (800baa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	055b      	lsls	r3, r3, #21
 800ba94:	d405      	bmi.n	800baa2 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 800ba96:	2000      	movs	r0, #0
}
 800ba98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9c:	4770      	bx	lr
  return HAL_OK;
 800ba9e:	2000      	movs	r0, #0
}
 800baa0:	4770      	bx	lr
        return HAL_TIMEOUT;
 800baa2:	2003      	movs	r0, #3
 800baa4:	e7f8      	b.n	800ba98 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800baa6:	bf00      	nop
 800baa8:	40007000 	.word	0x40007000
 800baac:	20000000 	.word	0x20000000
 800bab0:	431bde83 	.word	0x431bde83

0800bab4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bab4:	4a28      	ldr	r2, [pc, #160]	; (800bb58 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bab6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bab8:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800baba:	f013 030c 	ands.w	r3, r3, #12
 800babe:	d008      	beq.n	800bad2 <HAL_RCC_GetSysClockFreq+0x1e>
 800bac0:	2b0c      	cmp	r3, #12
 800bac2:	d038      	beq.n	800bb36 <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d034      	beq.n	800bb32 <HAL_RCC_GetSysClockFreq+0x7e>
 800bac8:	2b08      	cmp	r3, #8
 800baca:	4824      	ldr	r0, [pc, #144]	; (800bb5c <HAL_RCC_GetSysClockFreq+0xa8>)
 800bacc:	bf18      	it	ne
 800bace:	2000      	movne	r0, #0
 800bad0:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bad2:	4a21      	ldr	r2, [pc, #132]	; (800bb58 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bad4:	6811      	ldr	r1, [r2, #0]
 800bad6:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bad8:	bf54      	ite	pl
 800bada:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bade:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800bae0:	491f      	ldr	r1, [pc, #124]	; (800bb60 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bae2:	bf54      	ite	pl
 800bae4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bae8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800baec:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800baf0:	b303      	cbz	r3, 800bb34 <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800baf2:	2b0c      	cmp	r3, #12
 800baf4:	d12d      	bne.n	800bb52 <HAL_RCC_GetSysClockFreq+0x9e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800baf6:	4b18      	ldr	r3, [pc, #96]	; (800bb58 <HAL_RCC_GetSysClockFreq+0xa4>)
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d025      	beq.n	800bb4e <HAL_RCC_GetSysClockFreq+0x9a>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bb02:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <HAL_RCC_GetSysClockFreq+0xa8>)
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	bf08      	it	eq
 800bb08:	4610      	moveq	r0, r2
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb0a:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb0c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bb0e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800bb16:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb18:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bb1c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800bb20:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb24:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb26:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bb28:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 800bb2c:	fbb3 f0f0 	udiv	r0, r3, r0
 800bb30:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800bb32:	480c      	ldr	r0, [pc, #48]	; (800bb64 <HAL_RCC_GetSysClockFreq+0xb0>)
  }

  return sysclockfreq;
}
 800bb34:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb36:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bb3a:	2a01      	cmp	r2, #1
 800bb3c:	d0c9      	beq.n	800bad2 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb3e:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bb46:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bb48:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800bb4c:	d1d9      	bne.n	800bb02 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bb50:	e7db      	b.n	800bb0a <HAL_RCC_GetSysClockFreq+0x56>
 800bb52:	2000      	movs	r0, #0
  return sysclockfreq;
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	40021000 	.word	0x40021000
 800bb5c:	007a1200 	.word	0x007a1200
 800bb60:	0800e478 	.word	0x0800e478
 800bb64:	00f42400 	.word	0x00f42400

0800bb68 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f000 81b5 	beq.w	800bed8 <HAL_RCC_OscConfig+0x370>
{
 800bb6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb72:	4ab8      	ldr	r2, [pc, #736]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb74:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb76:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb78:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb7a:	06da      	lsls	r2, r3, #27
{
 800bb7c:	b085      	sub	sp, #20
 800bb7e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb80:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb84:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb88:	f100 80dc 	bmi.w	800bd44 <HAL_RCC_OscConfig+0x1dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb8c:	07d9      	lsls	r1, r3, #31
 800bb8e:	d529      	bpl.n	800bbe4 <HAL_RCC_OscConfig+0x7c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bb90:	2d08      	cmp	r5, #8
 800bb92:	f000 816f 	beq.w	800be74 <HAL_RCC_OscConfig+0x30c>
 800bb96:	2d0c      	cmp	r5, #12
 800bb98:	f000 8169 	beq.w	800be6e <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb9c:	6863      	ldr	r3, [r4, #4]
 800bb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba2:	f000 81af 	beq.w	800bf04 <HAL_RCC_OscConfig+0x39c>
 800bba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbaa:	f000 82ae 	beq.w	800c10a <HAL_RCC_OscConfig+0x5a2>
 800bbae:	4fa9      	ldr	r7, [pc, #676]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bbb6:	603a      	str	r2, [r7, #0]
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbbe:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f040 81a4 	bne.w	800bf0e <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 800bbc6:	f7ff fc47 	bl	800b458 <HAL_GetTick>
 800bbca:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bbcc:	e006      	b.n	800bbdc <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbce:	f7ff fc43 	bl	800b458 <HAL_GetTick>
 800bbd2:	eba0 0008 	sub.w	r0, r0, r8
 800bbd6:	2864      	cmp	r0, #100	; 0x64
 800bbd8:	f200 817a 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	0398      	lsls	r0, r3, #14
 800bbe0:	d4f5      	bmi.n	800bbce <HAL_RCC_OscConfig+0x66>
 800bbe2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbe4:	0799      	lsls	r1, r3, #30
 800bbe6:	d523      	bpl.n	800bc30 <HAL_RCC_OscConfig+0xc8>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bbe8:	2d04      	cmp	r5, #4
 800bbea:	f000 8150 	beq.w	800be8e <HAL_RCC_OscConfig+0x326>
 800bbee:	2d0c      	cmp	r5, #12
 800bbf0:	f000 814a 	beq.w	800be88 <HAL_RCC_OscConfig+0x320>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bbf4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800bbf6:	4e97      	ldr	r6, [pc, #604]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 81f7 	beq.w	800bfec <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_HSI_ENABLE();
 800bbfe:	6833      	ldr	r3, [r6, #0]
 800bc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800bc06:	f7ff fc27 	bl	800b458 <HAL_GetTick>
 800bc0a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc0c:	e005      	b.n	800bc1a <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc0e:	f7ff fc23 	bl	800b458 <HAL_GetTick>
 800bc12:	1bc0      	subs	r0, r0, r7
 800bc14:	2802      	cmp	r0, #2
 800bc16:	f200 815b 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc1a:	6833      	ldr	r3, [r6, #0]
 800bc1c:	055b      	lsls	r3, r3, #21
 800bc1e:	d5f6      	bpl.n	800bc0e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc20:	6873      	ldr	r3, [r6, #4]
 800bc22:	6922      	ldr	r2, [r4, #16]
 800bc24:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800bc28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc2c:	6073      	str	r3, [r6, #4]
 800bc2e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc30:	0719      	lsls	r1, r3, #28
 800bc32:	d519      	bpl.n	800bc68 <HAL_RCC_OscConfig+0x100>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bc34:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800bc36:	4e87      	ldr	r6, [pc, #540]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 814f 	beq.w	800bedc <HAL_RCC_OscConfig+0x374>
      __HAL_RCC_LSI_ENABLE();
 800bc3e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800bc42:	f043 0301 	orr.w	r3, r3, #1
 800bc46:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800bc4a:	f7ff fc05 	bl	800b458 <HAL_GetTick>
 800bc4e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bc50:	e005      	b.n	800bc5e <HAL_RCC_OscConfig+0xf6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc52:	f7ff fc01 	bl	800b458 <HAL_GetTick>
 800bc56:	1bc0      	subs	r0, r0, r7
 800bc58:	2802      	cmp	r0, #2
 800bc5a:	f200 8139 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bc5e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800bc62:	079a      	lsls	r2, r3, #30
 800bc64:	d5f5      	bpl.n	800bc52 <HAL_RCC_OscConfig+0xea>
 800bc66:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc68:	075e      	lsls	r6, r3, #29
 800bc6a:	d541      	bpl.n	800bcf0 <HAL_RCC_OscConfig+0x188>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bc6c:	4b79      	ldr	r3, [pc, #484]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bc6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc70:	00d0      	lsls	r0, r2, #3
 800bc72:	f100 81b9 	bmi.w	800bfe8 <HAL_RCC_OscConfig+0x480>
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc7c:	659a      	str	r2, [r3, #88]	; 0x58
 800bc7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800bc88:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc8a:	4e73      	ldr	r6, [pc, #460]	; (800be58 <HAL_RCC_OscConfig+0x2f0>)
 800bc8c:	6832      	ldr	r2, [r6, #0]
 800bc8e:	05d1      	lsls	r1, r2, #23
 800bc90:	f140 810d 	bpl.w	800beae <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc94:	68a3      	ldr	r3, [r4, #8]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	f000 81f8 	beq.w	800c08c <HAL_RCC_OscConfig+0x524>
 800bc9c:	2b05      	cmp	r3, #5
 800bc9e:	f000 81d5 	beq.w	800c04c <HAL_RCC_OscConfig+0x4e4>
 800bca2:	4e6c      	ldr	r6, [pc, #432]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bca4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800bca8:	f022 0201 	bic.w	r2, r2, #1
 800bcac:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800bcb0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800bcb4:	f022 0204 	bic.w	r2, r2, #4
 800bcb8:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f040 81d2 	bne.w	800c066 <HAL_RCC_OscConfig+0x4fe>
      tickstart = HAL_GetTick();
 800bcc2:	f7ff fbc9 	bl	800b458 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcc6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bcca:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bccc:	e006      	b.n	800bcdc <HAL_RCC_OscConfig+0x174>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcce:	f7ff fbc3 	bl	800b458 <HAL_GetTick>
 800bcd2:	eba0 0009 	sub.w	r0, r0, r9
 800bcd6:	4540      	cmp	r0, r8
 800bcd8:	f200 80fa 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bcdc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800bce0:	0798      	lsls	r0, r3, #30
 800bce2:	d4f4      	bmi.n	800bcce <HAL_RCC_OscConfig+0x166>
    if(pwrclkchanged == SET)
 800bce4:	b127      	cbz	r7, 800bcf0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bce6:	4a5b      	ldr	r2, [pc, #364]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bce8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bcea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcee:	6593      	str	r3, [r2, #88]	; 0x58
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bcf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bcf2:	b318      	cbz	r0, 800bd3c <HAL_RCC_OscConfig+0x1d4>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	f000 81d1 	beq.w	800c09c <HAL_RCC_OscConfig+0x534>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bcfa:	2802      	cmp	r0, #2
 800bcfc:	f000 8228 	beq.w	800c150 <HAL_RCC_OscConfig+0x5e8>
        __HAL_RCC_PLL_DISABLE();
 800bd00:	4b54      	ldr	r3, [pc, #336]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bd08:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 800bd10:	f000 8197 	beq.w	800c042 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800bd14:	4c4f      	ldr	r4, [pc, #316]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bd16:	68e3      	ldr	r3, [r4, #12]
 800bd18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bd1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd20:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800bd22:	f7ff fb99 	bl	800b458 <HAL_GetTick>
 800bd26:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd28:	e005      	b.n	800bd36 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd2a:	f7ff fb95 	bl	800b458 <HAL_GetTick>
 800bd2e:	1b40      	subs	r0, r0, r5
 800bd30:	2802      	cmp	r0, #2
 800bd32:	f200 80cd 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	019b      	lsls	r3, r3, #6
 800bd3a:	d4f6      	bmi.n	800bd2a <HAL_RCC_OscConfig+0x1c2>
  return HAL_OK;
 800bd3c:	2000      	movs	r0, #0
}
 800bd3e:	b005      	add	sp, #20
 800bd40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd44:	b36d      	cbz	r5, 800bda2 <HAL_RCC_OscConfig+0x23a>
 800bd46:	2d0c      	cmp	r5, #12
 800bd48:	d029      	beq.n	800bd9e <HAL_RCC_OscConfig+0x236>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bd4a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800bd4c:	4f41      	ldr	r7, [pc, #260]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80ec 	beq.w	800bf2c <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_MSI_ENABLE();
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	f043 0301 	orr.w	r3, r3, #1
 800bd5a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800bd5c:	f7ff fb7c 	bl	800b458 <HAL_GetTick>
 800bd60:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd62:	e006      	b.n	800bd72 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd64:	f7ff fb78 	bl	800b458 <HAL_GetTick>
 800bd68:	eba0 0008 	sub.w	r0, r0, r8
 800bd6c:	2802      	cmp	r0, #2
 800bd6e:	f200 80af 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	079b      	lsls	r3, r3, #30
 800bd76:	d5f5      	bpl.n	800bd64 <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f043 0308 	orr.w	r3, r3, #8
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	6a22      	ldr	r2, [r4, #32]
 800bd84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	69e2      	ldr	r2, [r4, #28]
 800bd90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd98:	607b      	str	r3, [r7, #4]
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	e6f6      	b.n	800bb8c <HAL_RCC_OscConfig+0x24>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bd9e:	2e01      	cmp	r6, #1
 800bda0:	d1d3      	bne.n	800bd4a <HAL_RCC_OscConfig+0x1e2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bda2:	4b2c      	ldr	r3, [pc, #176]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	079f      	lsls	r7, r3, #30
 800bda8:	d45a      	bmi.n	800be60 <HAL_RCC_OscConfig+0x2f8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bdaa:	4b2a      	ldr	r3, [pc, #168]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800bdac:	6a27      	ldr	r7, [r4, #32]
 800bdae:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bdb0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800be54 <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bdb4:	0710      	lsls	r0, r2, #28
 800bdb6:	bf56      	itet	pl
 800bdb8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800bdbc:	681b      	ldrmi	r3, [r3, #0]
 800bdbe:	091b      	lsrpl	r3, r3, #4
 800bdc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdc4:	429f      	cmp	r7, r3
 800bdc6:	f240 80c4 	bls.w	800bf52 <HAL_RCC_OscConfig+0x3ea>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bdca:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800bdce:	00d9      	lsls	r1, r3, #3
 800bdd0:	f100 8134 	bmi.w	800c03c <HAL_RCC_OscConfig+0x4d4>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdd4:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800bdd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bddc:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800bde0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800bde4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 800bdec:	f7ff fe16 	bl	800ba1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800bdf0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800bdf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdf8:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdfc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800be00:	f000 8197 	beq.w	800c132 <HAL_RCC_OscConfig+0x5ca>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800be04:	2f80      	cmp	r7, #128	; 0x80
 800be06:	f200 819d 	bhi.w	800c144 <HAL_RCC_OscConfig+0x5dc>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800be0a:	f000 81f2 	beq.w	800c1f2 <HAL_RCC_OscConfig+0x68a>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800be0e:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 800be12:	fab7 f787 	clz	r7, r7
 800be16:	097f      	lsrs	r7, r7, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800be18:	4a10      	ldr	r2, [pc, #64]	; (800be5c <HAL_RCC_OscConfig+0x2f4>)
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	f023 0307 	bic.w	r3, r3, #7
 800be20:	433b      	orrs	r3, r7
 800be22:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800be24:	6813      	ldr	r3, [r2, #0]
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	429f      	cmp	r7, r3
 800be2c:	d11b      	bne.n	800be66 <HAL_RCC_OscConfig+0x2fe>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <HAL_RCC_OscConfig+0x2ec>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	f042 0208 	orr.w	r2, r2, #8
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	6a21      	ldr	r1, [r4, #32]
 800be3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800be40:	430a      	orrs	r2, r1
 800be42:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	69e1      	ldr	r1, [r4, #28]
 800be48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800be4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800be50:	605a      	str	r2, [r3, #4]
 800be52:	e0b4      	b.n	800bfbe <HAL_RCC_OscConfig+0x456>
 800be54:	40021000 	.word	0x40021000
 800be58:	40007000 	.word	0x40007000
 800be5c:	40022000 	.word	0x40022000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800be60:	69a3      	ldr	r3, [r4, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1a1      	bne.n	800bdaa <HAL_RCC_OscConfig+0x242>
        return HAL_ERROR;
 800be66:	2001      	movs	r0, #1
}
 800be68:	b005      	add	sp, #20
 800be6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800be6e:	2e03      	cmp	r6, #3
 800be70:	f47f ae94 	bne.w	800bb9c <HAL_RCC_OscConfig+0x34>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be74:	4abb      	ldr	r2, [pc, #748]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	0392      	lsls	r2, r2, #14
 800be7a:	f57f aeb3 	bpl.w	800bbe4 <HAL_RCC_OscConfig+0x7c>
 800be7e:	6862      	ldr	r2, [r4, #4]
 800be80:	2a00      	cmp	r2, #0
 800be82:	f47f aeaf 	bne.w	800bbe4 <HAL_RCC_OscConfig+0x7c>
 800be86:	e7ee      	b.n	800be66 <HAL_RCC_OscConfig+0x2fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800be88:	2e02      	cmp	r6, #2
 800be8a:	f47f aeb3 	bne.w	800bbf4 <HAL_RCC_OscConfig+0x8c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be8e:	4ab5      	ldr	r2, [pc, #724]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	0552      	lsls	r2, r2, #21
 800be94:	d502      	bpl.n	800be9c <HAL_RCC_OscConfig+0x334>
 800be96:	68e2      	ldr	r2, [r4, #12]
 800be98:	2a00      	cmp	r2, #0
 800be9a:	d0e4      	beq.n	800be66 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be9c:	49b1      	ldr	r1, [pc, #708]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800be9e:	6920      	ldr	r0, [r4, #16]
 800bea0:	684a      	ldr	r2, [r1, #4]
 800bea2:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800bea6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800beaa:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800beac:	e6c0      	b.n	800bc30 <HAL_RCC_OscConfig+0xc8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800beae:	6832      	ldr	r2, [r6, #0]
 800beb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800beb4:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 800beb6:	f7ff facf 	bl	800b458 <HAL_GetTick>
 800beba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	05da      	lsls	r2, r3, #23
 800bec0:	f53f aee8 	bmi.w	800bc94 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bec4:	f7ff fac8 	bl	800b458 <HAL_GetTick>
 800bec8:	eba0 0008 	sub.w	r0, r0, r8
 800becc:	2802      	cmp	r0, #2
 800bece:	d9f5      	bls.n	800bebc <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 800bed0:	2003      	movs	r0, #3
}
 800bed2:	b005      	add	sp, #20
 800bed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 800bed8:	2001      	movs	r0, #1
}
 800beda:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 800bedc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800bee8:	f7ff fab6 	bl	800b458 <HAL_GetTick>
 800beec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800beee:	e004      	b.n	800befa <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bef0:	f7ff fab2 	bl	800b458 <HAL_GetTick>
 800bef4:	1bc0      	subs	r0, r0, r7
 800bef6:	2802      	cmp	r0, #2
 800bef8:	d8ea      	bhi.n	800bed0 <HAL_RCC_OscConfig+0x368>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800befa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800befe:	079b      	lsls	r3, r3, #30
 800bf00:	d4f6      	bmi.n	800bef0 <HAL_RCC_OscConfig+0x388>
 800bf02:	e6b0      	b.n	800bc66 <HAL_RCC_OscConfig+0xfe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf04:	4a97      	ldr	r2, [pc, #604]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800bf06:	6813      	ldr	r3, [r2, #0]
 800bf08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf0c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bf0e:	f7ff faa3 	bl	800b458 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf12:	4f94      	ldr	r7, [pc, #592]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
        tickstart = HAL_GetTick();
 800bf14:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf16:	e005      	b.n	800bf24 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf18:	f7ff fa9e 	bl	800b458 <HAL_GetTick>
 800bf1c:	eba0 0008 	sub.w	r0, r0, r8
 800bf20:	2864      	cmp	r0, #100	; 0x64
 800bf22:	d8d5      	bhi.n	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	039b      	lsls	r3, r3, #14
 800bf28:	d5f6      	bpl.n	800bf18 <HAL_RCC_OscConfig+0x3b0>
 800bf2a:	e65a      	b.n	800bbe2 <HAL_RCC_OscConfig+0x7a>
        __HAL_RCC_MSI_DISABLE();
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800bf34:	f7ff fa90 	bl	800b458 <HAL_GetTick>
 800bf38:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf3a:	e005      	b.n	800bf48 <HAL_RCC_OscConfig+0x3e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf3c:	f7ff fa8c 	bl	800b458 <HAL_GetTick>
 800bf40:	eba0 0008 	sub.w	r0, r0, r8
 800bf44:	2802      	cmp	r0, #2
 800bf46:	d8c3      	bhi.n	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	0798      	lsls	r0, r3, #30
 800bf4c:	d4f6      	bmi.n	800bf3c <HAL_RCC_OscConfig+0x3d4>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	e61c      	b.n	800bb8c <HAL_RCC_OscConfig+0x24>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf52:	f8d8 3000 	ldr.w	r3, [r8]
 800bf56:	f043 0308 	orr.w	r3, r3, #8
 800bf5a:	f8c8 3000 	str.w	r3, [r8]
 800bf5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf66:	433b      	orrs	r3, r7
 800bf68:	f8c8 3000 	str.w	r3, [r8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf70:	69e2      	ldr	r2, [r4, #28]
 800bf72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf7a:	f8c8 3004 	str.w	r3, [r8, #4]
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bf7e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800bf82:	00da      	lsls	r2, r3, #3
 800bf84:	d545      	bpl.n	800c012 <HAL_RCC_OscConfig+0x4aa>
    vos = HAL_PWREx_GetVoltageRange();
 800bf86:	f7ff fd49 	bl	800ba1c <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf8a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bf8e:	f000 80c9 	beq.w	800c124 <HAL_RCC_OscConfig+0x5bc>
    if(msirange > RCC_MSIRANGE_8)
 800bf92:	2f80      	cmp	r7, #128	; 0x80
 800bf94:	f200 80d4 	bhi.w	800c140 <HAL_RCC_OscConfig+0x5d8>
      if(msirange == RCC_MSIRANGE_8)
 800bf98:	f000 8129 	beq.w	800c1ee <HAL_RCC_OscConfig+0x686>
      else if(msirange == RCC_MSIRANGE_7)
 800bf9c:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 800bfa0:	fab7 f787 	clz	r7, r7
 800bfa4:	097f      	lsrs	r7, r7, #5
  __HAL_FLASH_SET_LATENCY(latency);
 800bfa6:	4a70      	ldr	r2, [pc, #448]	; (800c168 <HAL_RCC_OscConfig+0x600>)
 800bfa8:	6813      	ldr	r3, [r2, #0]
 800bfaa:	f023 0307 	bic.w	r3, r3, #7
 800bfae:	433b      	orrs	r3, r7
 800bfb0:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	429f      	cmp	r7, r3
 800bfba:	f47f af54 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfbe:	f7ff fd79 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800bfc2:	4b68      	ldr	r3, [pc, #416]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800bfc4:	4a69      	ldr	r2, [pc, #420]	; (800c16c <HAL_RCC_OscConfig+0x604>)
 800bfc6:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 800bfc8:	4969      	ldr	r1, [pc, #420]	; (800c170 <HAL_RCC_OscConfig+0x608>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bfce:	5cd3      	ldrb	r3, [r2, r3]
 800bfd0:	4a68      	ldr	r2, [pc, #416]	; (800c174 <HAL_RCC_OscConfig+0x60c>)
 800bfd2:	f003 031f 	and.w	r3, r3, #31
 800bfd6:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800bfda:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfdc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800bfde:	f7ff f9ed 	bl	800b3bc <HAL_InitTick>
        if(status != HAL_OK)
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0b3      	beq.n	800bf4e <HAL_RCC_OscConfig+0x3e6>
 800bfe6:	e73f      	b.n	800be68 <HAL_RCC_OscConfig+0x300>
    FlagStatus       pwrclkchanged = RESET;
 800bfe8:	2700      	movs	r7, #0
 800bfea:	e64e      	b.n	800bc8a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 800bfec:	6833      	ldr	r3, [r6, #0]
 800bfee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bff2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800bff4:	f7ff fa30 	bl	800b458 <HAL_GetTick>
 800bff8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bffa:	e005      	b.n	800c008 <HAL_RCC_OscConfig+0x4a0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bffc:	f7ff fa2c 	bl	800b458 <HAL_GetTick>
 800c000:	1bc0      	subs	r0, r0, r7
 800c002:	2802      	cmp	r0, #2
 800c004:	f63f af64 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c008:	6833      	ldr	r3, [r6, #0]
 800c00a:	0558      	lsls	r0, r3, #21
 800c00c:	d4f6      	bmi.n	800bffc <HAL_RCC_OscConfig+0x494>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	e60e      	b.n	800bc30 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_PWR_CLK_ENABLE();
 800c012:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800c016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c01a:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800c01e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800c022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c026:	9303      	str	r3, [sp, #12]
 800c028:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c02a:	f7ff fcf7 	bl	800ba1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800c02e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800c032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c036:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800c03a:	e7a6      	b.n	800bf8a <HAL_RCC_OscConfig+0x422>
    vos = HAL_PWREx_GetVoltageRange();
 800c03c:	f7ff fcee 	bl	800ba1c <HAL_PWREx_GetVoltageRange>
 800c040:	e6dc      	b.n	800bdfc <HAL_RCC_OscConfig+0x294>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	f022 0203 	bic.w	r2, r2, #3
 800c048:	60da      	str	r2, [r3, #12]
 800c04a:	e663      	b.n	800bd14 <HAL_RCC_OscConfig+0x1ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c04c:	4b45      	ldr	r3, [pc, #276]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800c04e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c052:	f042 0204 	orr.w	r2, r2, #4
 800c056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c05a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c05e:	f042 0201 	orr.w	r2, r2, #1
 800c062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 800c066:	f7ff f9f7 	bl	800b458 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c06a:	4e3e      	ldr	r6, [pc, #248]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
      tickstart = HAL_GetTick();
 800c06c:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c06e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c072:	e006      	b.n	800c082 <HAL_RCC_OscConfig+0x51a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c074:	f7ff f9f0 	bl	800b458 <HAL_GetTick>
 800c078:	eba0 0009 	sub.w	r0, r0, r9
 800c07c:	4540      	cmp	r0, r8
 800c07e:	f63f af27 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c082:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800c086:	079b      	lsls	r3, r3, #30
 800c088:	d5f4      	bpl.n	800c074 <HAL_RCC_OscConfig+0x50c>
 800c08a:	e62b      	b.n	800bce4 <HAL_RCC_OscConfig+0x17c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c08c:	4a35      	ldr	r2, [pc, #212]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800c08e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800c092:	f043 0301 	orr.w	r3, r3, #1
 800c096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c09a:	e7e4      	b.n	800c066 <HAL_RCC_OscConfig+0x4fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c09c:	2801      	cmp	r0, #1
 800c09e:	f43f aee3 	beq.w	800be68 <HAL_RCC_OscConfig+0x300>
        pll_config = RCC->PLLCFGR;
 800c0a2:	4b30      	ldr	r3, [pc, #192]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        pll_config = RCC->PLLCFGR;
 800c0a6:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0a8:	f003 0103 	and.w	r1, r3, #3
 800c0ac:	4291      	cmp	r1, r2
 800c0ae:	f47f aeda 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c0b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c0b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c0b8:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0ba:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800c0be:	f47f aed2 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c0c8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800c0cc:	f47f aecb 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c0d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c0d2:	3a07      	subs	r2, #7
 800c0d4:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800c0d8:	bf18      	it	ne
 800c0da:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0dc:	4291      	cmp	r1, r2
 800c0de:	f47f aec2 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c0e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c0e4:	0852      	lsrs	r2, r2, #1
 800c0e6:	3a01      	subs	r2, #1
 800c0e8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c0ec:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800c0f0:	f47f aeb9 	bne.w	800be66 <HAL_RCC_OscConfig+0x2fe>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c0f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c0f6:	0852      	lsrs	r2, r2, #1
 800c0f8:	3a01      	subs	r2, #1
 800c0fa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c0fe:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800c102:	bf14      	ite	ne
 800c104:	2001      	movne	r0, #1
 800c106:	2000      	moveq	r0, #0
 800c108:	e6ae      	b.n	800be68 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c10a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c10e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	e6f4      	b.n	800bf0e <HAL_RCC_OscConfig+0x3a6>
    if(msirange > RCC_MSIRANGE_8)
 800c124:	2f80      	cmp	r7, #128	; 0x80
 800c126:	d90f      	bls.n	800c148 <HAL_RCC_OscConfig+0x5e0>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c128:	2fa1      	cmp	r7, #161	; 0xa1
 800c12a:	bf34      	ite	cc
 800c12c:	2701      	movcc	r7, #1
 800c12e:	2702      	movcs	r7, #2
 800c130:	e739      	b.n	800bfa6 <HAL_RCC_OscConfig+0x43e>
    if(msirange > RCC_MSIRANGE_8)
 800c132:	2f80      	cmp	r7, #128	; 0x80
 800c134:	d90a      	bls.n	800c14c <HAL_RCC_OscConfig+0x5e4>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c136:	2fa1      	cmp	r7, #161	; 0xa1
 800c138:	bf34      	ite	cc
 800c13a:	2701      	movcc	r7, #1
 800c13c:	2702      	movcs	r7, #2
 800c13e:	e66b      	b.n	800be18 <HAL_RCC_OscConfig+0x2b0>
      latency = FLASH_LATENCY_3; /* 3WS */
 800c140:	2703      	movs	r7, #3
 800c142:	e730      	b.n	800bfa6 <HAL_RCC_OscConfig+0x43e>
 800c144:	2703      	movs	r7, #3
 800c146:	e667      	b.n	800be18 <HAL_RCC_OscConfig+0x2b0>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c148:	2700      	movs	r7, #0
 800c14a:	e72c      	b.n	800bfa6 <HAL_RCC_OscConfig+0x43e>
 800c14c:	2700      	movs	r7, #0
 800c14e:	e663      	b.n	800be18 <HAL_RCC_OscConfig+0x2b0>
        __HAL_RCC_PLL_DISABLE();
 800c150:	4d04      	ldr	r5, [pc, #16]	; (800c164 <HAL_RCC_OscConfig+0x5fc>)
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c158:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c15a:	f7ff f97d 	bl	800b458 <HAL_GetTick>
 800c15e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c160:	e010      	b.n	800c184 <HAL_RCC_OscConfig+0x61c>
 800c162:	bf00      	nop
 800c164:	40021000 	.word	0x40021000
 800c168:	40022000 	.word	0x40022000
 800c16c:	0800e460 	.word	0x0800e460
 800c170:	20000008 	.word	0x20000008
 800c174:	20000000 	.word	0x20000000
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c178:	f7ff f96e 	bl	800b458 <HAL_GetTick>
 800c17c:	1b80      	subs	r0, r0, r6
 800c17e:	2802      	cmp	r0, #2
 800c180:	f63f aea6 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	0199      	lsls	r1, r3, #6
 800c188:	d4f6      	bmi.n	800c178 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c18a:	68e9      	ldr	r1, [r5, #12]
 800c18c:	4b1a      	ldr	r3, [pc, #104]	; (800c1f8 <HAL_RCC_OscConfig+0x690>)
 800c18e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c190:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800c192:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800c194:	400b      	ands	r3, r1
 800c196:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800c19a:	4313      	orrs	r3, r2
 800c19c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800c1a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c1a2:	1e74      	subs	r4, r6, #1
 800c1a4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800c1a8:	0900      	lsrs	r0, r0, #4
 800c1aa:	0849      	lsrs	r1, r1, #1
 800c1ac:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 800c1b0:	3901      	subs	r1, #1
 800c1b2:	0852      	lsrs	r2, r2, #1
 800c1b4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800c1b8:	3a01      	subs	r2, #1
 800c1ba:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c1be:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800c1c0:	682b      	ldr	r3, [r5, #0]
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1c2:	4c0e      	ldr	r4, [pc, #56]	; (800c1fc <HAL_RCC_OscConfig+0x694>)
        __HAL_RCC_PLL_ENABLE();
 800c1c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1c8:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c1ca:	68eb      	ldr	r3, [r5, #12]
 800c1cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1d0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800c1d2:	f7ff f941 	bl	800b458 <HAL_GetTick>
 800c1d6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1d8:	e005      	b.n	800c1e6 <HAL_RCC_OscConfig+0x67e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1da:	f7ff f93d 	bl	800b458 <HAL_GetTick>
 800c1de:	1b40      	subs	r0, r0, r5
 800c1e0:	2802      	cmp	r0, #2
 800c1e2:	f63f ae75 	bhi.w	800bed0 <HAL_RCC_OscConfig+0x368>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	019a      	lsls	r2, r3, #6
 800c1ea:	d5f6      	bpl.n	800c1da <HAL_RCC_OscConfig+0x672>
 800c1ec:	e5a6      	b.n	800bd3c <HAL_RCC_OscConfig+0x1d4>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c1ee:	2702      	movs	r7, #2
 800c1f0:	e6d9      	b.n	800bfa6 <HAL_RCC_OscConfig+0x43e>
 800c1f2:	2702      	movs	r7, #2
 800c1f4:	e610      	b.n	800be18 <HAL_RCC_OscConfig+0x2b0>
 800c1f6:	bf00      	nop
 800c1f8:	f99d808c 	.word	0xf99d808c
 800c1fc:	40021000 	.word	0x40021000

0800c200 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800c200:	b178      	cbz	r0, 800c222 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c202:	4a46      	ldr	r2, [pc, #280]	; (800c31c <HAL_RCC_ClockConfig+0x11c>)
 800c204:	6813      	ldr	r3, [r2, #0]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	428b      	cmp	r3, r1
 800c20c:	d20b      	bcs.n	800c226 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c20e:	6813      	ldr	r3, [r2, #0]
 800c210:	f023 0307 	bic.w	r3, r3, #7
 800c214:	430b      	orrs	r3, r1
 800c216:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c218:	6813      	ldr	r3, [r2, #0]
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	428b      	cmp	r3, r1
 800c220:	d001      	beq.n	800c226 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800c222:	2001      	movs	r0, #1
}
 800c224:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c226:	6803      	ldr	r3, [r0, #0]
{
 800c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	4604      	mov	r4, r0
 800c232:	d524      	bpl.n	800c27e <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c234:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c236:	4a3a      	ldr	r2, [pc, #232]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c238:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c23a:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c23c:	d062      	beq.n	800c304 <HAL_RCC_ClockConfig+0x104>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d065      	beq.n	800c30e <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c242:	2b00      	cmp	r3, #0
 800c244:	d166      	bne.n	800c314 <HAL_RCC_ClockConfig+0x114>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c246:	0796      	lsls	r6, r2, #30
 800c248:	d532      	bpl.n	800c2b0 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c24a:	4e35      	ldr	r6, [pc, #212]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
 800c24c:	68b2      	ldr	r2, [r6, #8]
 800c24e:	f022 0203 	bic.w	r2, r2, #3
 800c252:	4313      	orrs	r3, r2
 800c254:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c256:	f7ff f8ff 	bl	800b458 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c25a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800c25e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c260:	e005      	b.n	800c26e <HAL_RCC_ClockConfig+0x6e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c262:	f7ff f8f9 	bl	800b458 <HAL_GetTick>
 800c266:	eba0 0008 	sub.w	r0, r0, r8
 800c26a:	42b8      	cmp	r0, r7
 800c26c:	d84d      	bhi.n	800c30a <HAL_RCC_ClockConfig+0x10a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c26e:	68b3      	ldr	r3, [r6, #8]
 800c270:	6862      	ldr	r2, [r4, #4]
 800c272:	f003 030c 	and.w	r3, r3, #12
 800c276:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c27a:	d1f2      	bne.n	800c262 <HAL_RCC_ClockConfig+0x62>
 800c27c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c27e:	0799      	lsls	r1, r3, #30
 800c280:	d506      	bpl.n	800c290 <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c282:	4927      	ldr	r1, [pc, #156]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
 800c284:	68a0      	ldr	r0, [r4, #8]
 800c286:	688a      	ldr	r2, [r1, #8]
 800c288:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800c28c:	4302      	orrs	r2, r0
 800c28e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c290:	4922      	ldr	r1, [pc, #136]	; (800c31c <HAL_RCC_ClockConfig+0x11c>)
 800c292:	680a      	ldr	r2, [r1, #0]
 800c294:	f002 0207 	and.w	r2, r2, #7
 800c298:	42aa      	cmp	r2, r5
 800c29a:	d90c      	bls.n	800c2b6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c29c:	680a      	ldr	r2, [r1, #0]
 800c29e:	f022 0207 	bic.w	r2, r2, #7
 800c2a2:	432a      	orrs	r2, r5
 800c2a4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2a6:	680a      	ldr	r2, [r1, #0]
 800c2a8:	f002 0207 	and.w	r2, r2, #7
 800c2ac:	42aa      	cmp	r2, r5
 800c2ae:	d002      	beq.n	800c2b6 <HAL_RCC_ClockConfig+0xb6>
    return HAL_ERROR;
 800c2b0:	2001      	movs	r0, #1
}
 800c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2b6:	075a      	lsls	r2, r3, #29
 800c2b8:	d506      	bpl.n	800c2c8 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c2ba:	4919      	ldr	r1, [pc, #100]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
 800c2bc:	68e0      	ldr	r0, [r4, #12]
 800c2be:	688a      	ldr	r2, [r1, #8]
 800c2c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c2c4:	4302      	orrs	r2, r0
 800c2c6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2c8:	071b      	lsls	r3, r3, #28
 800c2ca:	d507      	bpl.n	800c2dc <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c2cc:	4a14      	ldr	r2, [pc, #80]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
 800c2ce:	6921      	ldr	r1, [r4, #16]
 800c2d0:	6893      	ldr	r3, [r2, #8]
 800c2d2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800c2d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c2da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c2dc:	f7ff fbea 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <HAL_RCC_ClockConfig+0x120>)
 800c2e2:	4c10      	ldr	r4, [pc, #64]	; (800c324 <HAL_RCC_ClockConfig+0x124>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800c2e6:	4910      	ldr	r1, [pc, #64]	; (800c328 <HAL_RCC_ClockConfig+0x128>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c2e8:	4a10      	ldr	r2, [pc, #64]	; (800c32c <HAL_RCC_ClockConfig+0x12c>)
 800c2ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c2ee:	5ce3      	ldrb	r3, [r4, r3]
 800c2f0:	f003 031f 	and.w	r3, r3, #31
 800c2f4:	fa20 f303 	lsr.w	r3, r0, r3
}
 800c2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800c2fc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c2fe:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800c300:	f7ff b85c 	b.w	800b3bc <HAL_InitTick>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c304:	0192      	lsls	r2, r2, #6
 800c306:	d4a0      	bmi.n	800c24a <HAL_RCC_ClockConfig+0x4a>
 800c308:	e7d2      	b.n	800c2b0 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 800c30a:	2003      	movs	r0, #3
 800c30c:	e7d1      	b.n	800c2b2 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c30e:	0397      	lsls	r7, r2, #14
 800c310:	d49b      	bmi.n	800c24a <HAL_RCC_ClockConfig+0x4a>
 800c312:	e7cd      	b.n	800c2b0 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c314:	0550      	lsls	r0, r2, #21
 800c316:	d5cb      	bpl.n	800c2b0 <HAL_RCC_ClockConfig+0xb0>
 800c318:	e797      	b.n	800c24a <HAL_RCC_ClockConfig+0x4a>
 800c31a:	bf00      	nop
 800c31c:	40022000 	.word	0x40022000
 800c320:	40021000 	.word	0x40021000
 800c324:	0800e460 	.word	0x0800e460
 800c328:	20000008 	.word	0x20000008
 800c32c:	20000000 	.word	0x20000000

0800c330 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c332:	4a06      	ldr	r2, [pc, #24]	; (800c34c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c334:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c336:	4906      	ldr	r1, [pc, #24]	; (800c350 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c338:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c33c:	6808      	ldr	r0, [r1, #0]
 800c33e:	5cd3      	ldrb	r3, [r2, r3]
 800c340:	f003 031f 	and.w	r3, r3, #31
}
 800c344:	40d8      	lsrs	r0, r3
 800c346:	4770      	bx	lr
 800c348:	40021000 	.word	0x40021000
 800c34c:	0800e470 	.word	0x0800e470
 800c350:	20000000 	.word	0x20000000

0800c354 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <HAL_RCC_GetPCLK2Freq+0x18>)
 800c356:	4a06      	ldr	r2, [pc, #24]	; (800c370 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c358:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c35a:	4906      	ldr	r1, [pc, #24]	; (800c374 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c35c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800c360:	6808      	ldr	r0, [r1, #0]
 800c362:	5cd3      	ldrb	r3, [r2, r3]
 800c364:	f003 031f 	and.w	r3, r3, #31
}
 800c368:	40d8      	lsrs	r0, r3
 800c36a:	4770      	bx	lr
 800c36c:	40021000 	.word	0x40021000
 800c370:	0800e470 	.word	0x0800e470
 800c374:	20000000 	.word	0x20000000

0800c378 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c378:	4a45      	ldr	r2, [pc, #276]	; (800c490 <RCCEx_PLLSAI1_Config+0x118>)
{
 800c37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c37c:	68d4      	ldr	r4, [r2, #12]
 800c37e:	6803      	ldr	r3, [r0, #0]
 800c380:	07a4      	lsls	r4, r4, #30
 800c382:	d006      	beq.n	800c392 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c384:	68d4      	ldr	r4, [r2, #12]
 800c386:	f004 0403 	and.w	r4, r4, #3
 800c38a:	429c      	cmp	r4, r3
 800c38c:	d00b      	beq.n	800c3a6 <RCCEx_PLLSAI1_Config+0x2e>
 800c38e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800c390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800c392:	2b02      	cmp	r3, #2
 800c394:	d011      	beq.n	800c3ba <RCCEx_PLLSAI1_Config+0x42>
 800c396:	2b03      	cmp	r3, #3
 800c398:	d056      	beq.n	800c448 <RCCEx_PLLSAI1_Config+0xd0>
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d1f7      	bne.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c39e:	6812      	ldr	r2, [r2, #0]
 800c3a0:	0797      	lsls	r7, r2, #30
 800c3a2:	d5f4      	bpl.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
 800c3a4:	e00c      	b.n	800c3c0 <RCCEx_PLLSAI1_Config+0x48>
       ||
 800c3a6:	2c00      	cmp	r4, #0
 800c3a8:	d0f1      	beq.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c3aa:	68d3      	ldr	r3, [r2, #12]
       ||
 800c3ac:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c3ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c3b2:	3301      	adds	r3, #1
       ||
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d1ea      	bne.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
 800c3b8:	e00c      	b.n	800c3d4 <RCCEx_PLLSAI1_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	0556      	lsls	r6, r2, #21
 800c3be:	d5e6      	bpl.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c3c0:	4d33      	ldr	r5, [pc, #204]	; (800c490 <RCCEx_PLLSAI1_Config+0x118>)
 800c3c2:	6844      	ldr	r4, [r0, #4]
 800c3c4:	68ea      	ldr	r2, [r5, #12]
 800c3c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	3c01      	subs	r4, #1
 800c3ce:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800c3d2:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800c3d4:	4c2e      	ldr	r4, [pc, #184]	; (800c490 <RCCEx_PLLSAI1_Config+0x118>)
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	460f      	mov	r7, r1
 800c3e0:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800c3e2:	f7ff f839 	bl	800b458 <HAL_GetTick>
 800c3e6:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c3e8:	e004      	b.n	800c3f4 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c3ea:	f7ff f835 	bl	800b458 <HAL_GetTick>
 800c3ee:	1b80      	subs	r0, r0, r6
 800c3f0:	2802      	cmp	r0, #2
 800c3f2:	d827      	bhi.n	800c444 <RCCEx_PLLSAI1_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	011a      	lsls	r2, r3, #4
 800c3f8:	d4f7      	bmi.n	800c3ea <RCCEx_PLLSAI1_Config+0x72>
 800c3fa:	68ab      	ldr	r3, [r5, #8]
 800c3fc:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800c3fe:	bb57      	cbnz	r7, 800c456 <RCCEx_PLLSAI1_Config+0xde>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	68ea      	ldr	r2, [r5, #12]
 800c404:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c40c:	430b      	orrs	r3, r1
 800c40e:	0912      	lsrs	r2, r2, #4
 800c410:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800c414:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800c416:	4c1e      	ldr	r4, [pc, #120]	; (800c490 <RCCEx_PLLSAI1_Config+0x118>)
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c41e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800c420:	f7ff f81a 	bl	800b458 <HAL_GetTick>
 800c424:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c426:	e004      	b.n	800c432 <RCCEx_PLLSAI1_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c428:	f7ff f816 	bl	800b458 <HAL_GetTick>
 800c42c:	1b80      	subs	r0, r0, r6
 800c42e:	2802      	cmp	r0, #2
 800c430:	d808      	bhi.n	800c444 <RCCEx_PLLSAI1_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	011b      	lsls	r3, r3, #4
 800c436:	d5f7      	bpl.n	800c428 <RCCEx_PLLSAI1_Config+0xb0>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c438:	69aa      	ldr	r2, [r5, #24]
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	6123      	str	r3, [r4, #16]
 800c440:	2000      	movs	r0, #0
}
 800c442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 800c444:	2003      	movs	r0, #3
}
 800c446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c448:	6814      	ldr	r4, [r2, #0]
 800c44a:	03a5      	lsls	r5, r4, #14
 800c44c:	d4b8      	bmi.n	800c3c0 <RCCEx_PLLSAI1_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c44e:	6812      	ldr	r2, [r2, #0]
 800c450:	0354      	lsls	r4, r2, #13
 800c452:	d59c      	bpl.n	800c38e <RCCEx_PLLSAI1_Config+0x16>
 800c454:	e7b4      	b.n	800c3c0 <RCCEx_PLLSAI1_Config+0x48>
      else if(Divider == DIVIDER_Q_UPDATE)
 800c456:	2f01      	cmp	r7, #1
 800c458:	d00c      	beq.n	800c474 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	696b      	ldr	r3, [r5, #20]
 800c45e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800c462:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	430a      	orrs	r2, r1
 800c46a:	3b01      	subs	r3, #1
 800c46c:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 800c470:	6122      	str	r2, [r4, #16]
 800c472:	e7d0      	b.n	800c416 <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	692a      	ldr	r2, [r5, #16]
 800c478:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c47c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c480:	0852      	lsrs	r2, r2, #1
 800c482:	430b      	orrs	r3, r1
 800c484:	3a01      	subs	r2, #1
 800c486:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800c48a:	6123      	str	r3, [r4, #16]
 800c48c:	e7c3      	b.n	800c416 <RCCEx_PLLSAI1_Config+0x9e>
 800c48e:	bf00      	nop
 800c490:	40021000 	.word	0x40021000

0800c494 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c494:	4a3d      	ldr	r2, [pc, #244]	; (800c58c <RCCEx_PLLSAI2_Config+0xf8>)
{
 800c496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c498:	68d4      	ldr	r4, [r2, #12]
 800c49a:	6803      	ldr	r3, [r0, #0]
 800c49c:	07a4      	lsls	r4, r4, #30
 800c49e:	d006      	beq.n	800c4ae <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c4a0:	68d4      	ldr	r4, [r2, #12]
 800c4a2:	f004 0403 	and.w	r4, r4, #3
 800c4a6:	429c      	cmp	r4, r3
 800c4a8:	d00b      	beq.n	800c4c2 <RCCEx_PLLSAI2_Config+0x2e>
 800c4aa:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800c4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d011      	beq.n	800c4d6 <RCCEx_PLLSAI2_Config+0x42>
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	d056      	beq.n	800c564 <RCCEx_PLLSAI2_Config+0xd0>
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d1f7      	bne.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c4ba:	6812      	ldr	r2, [r2, #0]
 800c4bc:	0797      	lsls	r7, r2, #30
 800c4be:	d5f4      	bpl.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
 800c4c0:	e00c      	b.n	800c4dc <RCCEx_PLLSAI2_Config+0x48>
       ||
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	d0f1      	beq.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c4c6:	68d3      	ldr	r3, [r2, #12]
       ||
 800c4c8:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c4ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c4ce:	3301      	adds	r3, #1
       ||
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d1ea      	bne.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
 800c4d4:	e00c      	b.n	800c4f0 <RCCEx_PLLSAI2_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c4d6:	6812      	ldr	r2, [r2, #0]
 800c4d8:	0556      	lsls	r6, r2, #21
 800c4da:	d5e6      	bpl.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c4dc:	4d2b      	ldr	r5, [pc, #172]	; (800c58c <RCCEx_PLLSAI2_Config+0xf8>)
 800c4de:	6844      	ldr	r4, [r0, #4]
 800c4e0:	68ea      	ldr	r2, [r5, #12]
 800c4e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	3c01      	subs	r4, #1
 800c4ea:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800c4ee:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 800c4f0:	4c26      	ldr	r4, [pc, #152]	; (800c58c <RCCEx_PLLSAI2_Config+0xf8>)
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800c4fe:	f7fe ffab 	bl	800b458 <HAL_GetTick>
 800c502:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c504:	e004      	b.n	800c510 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c506:	f7fe ffa7 	bl	800b458 <HAL_GetTick>
 800c50a:	1b80      	subs	r0, r0, r6
 800c50c:	2802      	cmp	r0, #2
 800c50e:	d827      	bhi.n	800c560 <RCCEx_PLLSAI2_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	009a      	lsls	r2, r3, #2
 800c514:	d4f7      	bmi.n	800c506 <RCCEx_PLLSAI2_Config+0x72>
 800c516:	68ab      	ldr	r3, [r5, #8]
 800c518:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800c51a:	bb57      	cbnz	r7, 800c572 <RCCEx_PLLSAI2_Config+0xde>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c51c:	6962      	ldr	r2, [r4, #20]
 800c51e:	68eb      	ldr	r3, [r5, #12]
 800c520:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800c524:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c528:	430a      	orrs	r2, r1
 800c52a:	091b      	lsrs	r3, r3, #4
 800c52c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800c530:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800c532:	4c16      	ldr	r4, [pc, #88]	; (800c58c <RCCEx_PLLSAI2_Config+0xf8>)
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c53a:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800c53c:	f7fe ff8c 	bl	800b458 <HAL_GetTick>
 800c540:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c542:	e004      	b.n	800c54e <RCCEx_PLLSAI2_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c544:	f7fe ff88 	bl	800b458 <HAL_GetTick>
 800c548:	1b80      	subs	r0, r0, r6
 800c54a:	2802      	cmp	r0, #2
 800c54c:	d808      	bhi.n	800c560 <RCCEx_PLLSAI2_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	d5f7      	bpl.n	800c544 <RCCEx_PLLSAI2_Config+0xb0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c554:	696a      	ldr	r2, [r5, #20]
 800c556:	6963      	ldr	r3, [r4, #20]
 800c558:	4313      	orrs	r3, r2
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	2000      	movs	r0, #0
}
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 800c560:	2003      	movs	r0, #3
}
 800c562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c564:	6814      	ldr	r4, [r2, #0]
 800c566:	03a5      	lsls	r5, r4, #14
 800c568:	d4b8      	bmi.n	800c4dc <RCCEx_PLLSAI2_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c56a:	6812      	ldr	r2, [r2, #0]
 800c56c:	0354      	lsls	r4, r2, #13
 800c56e:	d59c      	bpl.n	800c4aa <RCCEx_PLLSAI2_Config+0x16>
 800c570:	e7b4      	b.n	800c4dc <RCCEx_PLLSAI2_Config+0x48>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c572:	6963      	ldr	r3, [r4, #20]
 800c574:	692a      	ldr	r2, [r5, #16]
 800c576:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c57a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c57e:	0852      	lsrs	r2, r2, #1
 800c580:	430b      	orrs	r3, r1
 800c582:	3a01      	subs	r2, #1
 800c584:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c588:	6163      	str	r3, [r4, #20]
 800c58a:	e7d2      	b.n	800c532 <RCCEx_PLLSAI2_Config+0x9e>
 800c58c:	40021000 	.word	0x40021000

0800c590 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c594:	6803      	ldr	r3, [r0, #0]
 800c596:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 800c59a:	b083      	sub	sp, #12
 800c59c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c59e:	d017      	beq.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c5a0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800c5a2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800c5a6:	f000 81bb 	beq.w	800c920 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800c5aa:	f240 81ee 	bls.w	800c98a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800c5ae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c5b2:	f000 81af 	beq.w	800c914 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800c5b6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800c5ba:	f040 81ec 	bne.w	800c996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c5be:	48c3      	ldr	r0, [pc, #780]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c5c0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800c5c4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800c5c8:	4311      	orrs	r1, r2
 800c5ca:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 800c5ce:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c5d0:	04d8      	lsls	r0, r3, #19
 800c5d2:	f140 8100 	bpl.w	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->Sai2ClockSelection)
 800c5d6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c5d8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800c5dc:	f000 8187 	beq.w	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800c5e0:	f240 81ca 	bls.w	800c978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c5e4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800c5e8:	f000 818d 	beq.w	800c906 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c5ec:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800c5f0:	f040 80f0 	bne.w	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800c5f4:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 800c5f6:	2f00      	cmp	r7, #0
 800c5f8:	f040 8183 	bne.w	800c902 <HAL_RCCEx_PeriphCLKConfig+0x372>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c5fc:	49b3      	ldr	r1, [pc, #716]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c5fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c600:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c608:	4302      	orrs	r2, r0
 800c60a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c60e:	0399      	lsls	r1, r3, #14
 800c610:	f100 80e5 	bmi.w	800c7de <HAL_RCCEx_PeriphCLKConfig+0x24e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c614:	07da      	lsls	r2, r3, #31
 800c616:	d508      	bpl.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c618:	49ac      	ldr	r1, [pc, #688]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c61a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c61c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c620:	f022 0203 	bic.w	r2, r2, #3
 800c624:	4302      	orrs	r2, r0
 800c626:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c62a:	079f      	lsls	r7, r3, #30
 800c62c:	d508      	bpl.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c62e:	49a7      	ldr	r1, [pc, #668]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c630:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c632:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c636:	f022 020c 	bic.w	r2, r2, #12
 800c63a:	4302      	orrs	r2, r0
 800c63c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c640:	075d      	lsls	r5, r3, #29
 800c642:	d508      	bpl.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c644:	49a1      	ldr	r1, [pc, #644]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c646:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c648:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c64c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800c650:	4302      	orrs	r2, r0
 800c652:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c656:	0718      	lsls	r0, r3, #28
 800c658:	d508      	bpl.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c65a:	499c      	ldr	r1, [pc, #624]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c65c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c65e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c662:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c666:	4302      	orrs	r2, r0
 800c668:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c66c:	06d9      	lsls	r1, r3, #27
 800c66e:	d508      	bpl.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c670:	4996      	ldr	r1, [pc, #600]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c672:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c674:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c678:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c67c:	4302      	orrs	r2, r0
 800c67e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c682:	069a      	lsls	r2, r3, #26
 800c684:	d508      	bpl.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c686:	4991      	ldr	r1, [pc, #580]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c688:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c68a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c68e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c692:	4302      	orrs	r2, r0
 800c694:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c698:	059f      	lsls	r7, r3, #22
 800c69a:	d508      	bpl.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c69c:	498b      	ldr	r1, [pc, #556]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c69e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800c6a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c6a4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800c6a8:	4302      	orrs	r2, r0
 800c6aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c6ae:	055d      	lsls	r5, r3, #21
 800c6b0:	d508      	bpl.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c6b2:	4986      	ldr	r1, [pc, #536]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c6b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800c6b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c6ba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c6be:	4302      	orrs	r2, r0
 800c6c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6c4:	0658      	lsls	r0, r3, #25
 800c6c6:	d508      	bpl.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6c8:	4980      	ldr	r1, [pc, #512]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c6ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c6cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c6d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c6d4:	4302      	orrs	r2, r0
 800c6d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c6da:	0619      	lsls	r1, r3, #24
 800c6dc:	d508      	bpl.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c6de:	497b      	ldr	r1, [pc, #492]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c6e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c6e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c6ea:	4302      	orrs	r2, r0
 800c6ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6f0:	05da      	lsls	r2, r3, #23
 800c6f2:	d508      	bpl.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6f4:	4975      	ldr	r1, [pc, #468]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c6f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c6fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800c700:	4302      	orrs	r2, r0
 800c702:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c706:	049f      	lsls	r7, r3, #18
 800c708:	d510      	bpl.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c70a:	4970      	ldr	r1, [pc, #448]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c70c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c70e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c712:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c716:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c718:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c71c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c720:	f000 80ce 	beq.w	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c724:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c728:	f000 8116 	beq.w	800c958 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c72c:	031d      	lsls	r5, r3, #12
 800c72e:	d510      	bpl.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c730:	4966      	ldr	r1, [pc, #408]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c732:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c734:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c738:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c73c:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c73e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c746:	f000 80c5 	beq.w	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c74a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c74e:	f000 810b 	beq.w	800c968 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c752:	0358      	lsls	r0, r3, #13
 800c754:	d510      	bpl.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c756:	495d      	ldr	r1, [pc, #372]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c758:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c75a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c75e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c762:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c764:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c768:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c76c:	f000 80a3 	beq.w	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x326>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c770:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c774:	f000 80e8 	beq.w	800c948 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c778:	0459      	lsls	r1, r3, #17
 800c77a:	d510      	bpl.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c77c:	4853      	ldr	r0, [pc, #332]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c77e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c780:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800c784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c788:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c78a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c78e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c792:	f000 80a4 	beq.w	800c8de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c796:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c79a:	f000 80cc 	beq.w	800c936 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c79e:	041a      	lsls	r2, r3, #16
 800c7a0:	d508      	bpl.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7a2:	494a      	ldr	r1, [pc, #296]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c7a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c7a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800c7aa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800c7ae:	4302      	orrs	r2, r0
 800c7b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c7b4:	03db      	lsls	r3, r3, #15
 800c7b6:	d509      	bpl.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7b8:	4a44      	ldr	r2, [pc, #272]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c7ba:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c7be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c7c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7c6:	430b      	orrs	r3, r1
 800c7c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	b003      	add	sp, #12
 800c7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 800c7d4:	2601      	movs	r6, #1
 800c7d6:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7d8:	0399      	lsls	r1, r3, #14
 800c7da:	f57f af1b 	bpl.w	800c614 <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c7de:	4b3b      	ldr	r3, [pc, #236]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c7e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c7e2:	00d2      	lsls	r2, r2, #3
 800c7e4:	d559      	bpl.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x30a>
    FlagStatus       pwrclkchanged = RESET;
 800c7e6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7ea:	4d39      	ldr	r5, [pc, #228]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800c7f4:	f7fe fe30 	bl	800b458 <HAL_GetTick>
 800c7f8:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c7fa:	e005      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7fc:	f7fe fe2c 	bl	800b458 <HAL_GetTick>
 800c800:	eba0 0009 	sub.w	r0, r0, r9
 800c804:	2802      	cmp	r0, #2
 800c806:	d854      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	05db      	lsls	r3, r3, #23
 800c80c:	d5f6      	bpl.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if(ret == HAL_OK)
 800c80e:	2f00      	cmp	r7, #0
 800c810:	f040 80c9 	bne.w	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c814:	4b2d      	ldr	r3, [pc, #180]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c816:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800c81a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c81e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800c822:	d028      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800c824:	428a      	cmp	r2, r1
 800c826:	d026      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c828:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800c82c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c830:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c838:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c83c:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c840:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c844:	07c0      	lsls	r0, r0, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800c84a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c84e:	d512      	bpl.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c850:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 800c852:	f7fe fe01 	bl	800b458 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c856:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c85a:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c85c:	e005      	b.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x2da>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c85e:	f7fe fdfb 	bl	800b458 <HAL_GetTick>
 800c862:	eba0 0009 	sub.w	r0, r0, r9
 800c866:	42b8      	cmp	r0, r7
 800c868:	d823      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x322>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c86a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800c86e:	0799      	lsls	r1, r3, #30
 800c870:	d5f5      	bpl.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800c872:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c876:	4a15      	ldr	r2, [pc, #84]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c878:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800c87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c880:	430b      	orrs	r3, r1
 800c882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 800c886:	f1b8 0f00 	cmp.w	r8, #0
 800c88a:	d004      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c88c:	4a0f      	ldr	r2, [pc, #60]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c88e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c894:	6593      	str	r3, [r2, #88]	; 0x58
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	e6bc      	b.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c89a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c89c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c8a0:	659a      	str	r2, [r3, #88]	; 0x58
 800c8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c8ac:	f04f 0801 	mov.w	r8, #1
 800c8b0:	e79b      	b.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = HAL_TIMEOUT;
 800c8b2:	2603      	movs	r6, #3
 800c8b4:	e7e7      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c8b6:	68ca      	ldr	r2, [r1, #12]
 800c8b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8bc:	60ca      	str	r2, [r1, #12]
 800c8be:	e75b      	b.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c8c0:	68ca      	ldr	r2, [r1, #12]
 800c8c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8c6:	60ca      	str	r2, [r1, #12]
 800c8c8:	e730      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c8ca:	bf00      	nop
 800c8cc:	40021000 	.word	0x40021000
 800c8d0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c8d4:	68ca      	ldr	r2, [r1, #12]
 800c8d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8da:	60ca      	str	r2, [r1, #12]
 800c8dc:	e739      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c8de:	2102      	movs	r1, #2
 800c8e0:	1d20      	adds	r0, r4, #4
 800c8e2:	f7ff fd49 	bl	800c378 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c8e6:	b368      	cbz	r0, 800c944 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      if(ret != HAL_OK)
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	e757      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	f104 0020 	add.w	r0, r4, #32
 800c8f4:	f7ff fdce 	bl	800c494 <RCCEx_PLLSAI2_Config>
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	f43f ae7d 	beq.w	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800c902:	463e      	mov	r6, r7
 800c904:	e768      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c906:	4929      	ldr	r1, [pc, #164]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800c908:	68ca      	ldr	r2, [r1, #12]
 800c90a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c90e:	60ca      	str	r2, [r1, #12]
      break;
 800c910:	4637      	mov	r7, r6
 800c912:	e670      	b.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c914:	4825      	ldr	r0, [pc, #148]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800c916:	68c2      	ldr	r2, [r0, #12]
 800c918:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c91c:	60c2      	str	r2, [r0, #12]
 800c91e:	e64e      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c920:	2100      	movs	r1, #0
 800c922:	3020      	adds	r0, #32
 800c924:	f7ff fdb6 	bl	800c494 <RCCEx_PLLSAI2_Config>
 800c928:	4606      	mov	r6, r0
 800c92a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800c92c:	2e00      	cmp	r6, #0
 800c92e:	f47f ae4f 	bne.w	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c932:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c934:	e643      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c936:	2102      	movs	r1, #2
 800c938:	f104 0020 	add.w	r0, r4, #32
 800c93c:	f7ff fdaa 	bl	800c494 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800c940:	2800      	cmp	r0, #0
 800c942:	d1d1      	bne.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x358>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	e72a      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c948:	2101      	movs	r1, #1
 800c94a:	1d20      	adds	r0, r4, #4
 800c94c:	f7ff fd14 	bl	800c378 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c950:	b338      	cbz	r0, 800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
 800c952:	4606      	mov	r6, r0
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	e70f      	b.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c958:	2101      	movs	r1, #1
 800c95a:	1d20      	adds	r0, r4, #4
 800c95c:	f7ff fd0c 	bl	800c378 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800c960:	b1e8      	cbz	r0, 800c99e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c962:	4606      	mov	r6, r0
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	e6e1      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c968:	2101      	movs	r1, #1
 800c96a:	1d20      	adds	r0, r4, #4
 800c96c:	f7ff fd04 	bl	800c378 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c970:	b198      	cbz	r0, 800c99a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c972:	4606      	mov	r6, r0
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	e6ec      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch(PeriphClkInit->Sai2ClockSelection)
 800c978:	2900      	cmp	r1, #0
 800c97a:	f47f af2b 	bne.w	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c97e:	1d20      	adds	r0, r4, #4
 800c980:	f7ff fcfa 	bl	800c378 <RCCEx_PLLSAI1_Config>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	4607      	mov	r7, r0
      break;
 800c988:	e635      	b.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c98a:	b921      	cbnz	r1, 800c996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c98c:	3004      	adds	r0, #4
 800c98e:	f7ff fcf3 	bl	800c378 <RCCEx_PLLSAI1_Config>
 800c992:	4606      	mov	r6, r0
      break;
 800c994:	e7c9      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = HAL_ERROR;
 800c996:	2601      	movs	r6, #1
 800c998:	e61a      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	e6d9      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	e6c4      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	e6e8      	b.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c9a6:	463e      	mov	r6, r7
 800c9a8:	e76d      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800c9aa:	bf00      	nop
 800c9ac:	40021000 	.word	0x40021000

0800c9b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	4616      	mov	r6, r2
 800c9b8:	1c68      	adds	r0, r5, #1
  while ((hspi->Instance->SR & Fifo) != State)
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	d110      	bne.n	800c9e0 <SPI_EndRxTxTransaction+0x30>
 800c9be:	689a      	ldr	r2, [r3, #8]
 800c9c0:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800c9c4:	d1fb      	bne.n	800c9be <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	0611      	lsls	r1, r2, #24
 800c9ca:	d504      	bpl.n	800c9d6 <SPI_EndRxTxTransaction+0x26>
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	0611      	lsls	r1, r2, #24
 800c9d0:	d4f9      	bmi.n	800c9c6 <SPI_EndRxTxTransaction+0x16>
 800c9d2:	e000      	b.n	800c9d6 <SPI_EndRxTxTransaction+0x26>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c9d4:	7b1a      	ldrb	r2, [r3, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 800c9d6:	6898      	ldr	r0, [r3, #8]
 800c9d8:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800c9dc:	d1fa      	bne.n	800c9d4 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800c9e0:	689a      	ldr	r2, [r3, #8]
 800c9e2:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800c9e6:	d02b      	beq.n	800ca40 <SPI_EndRxTxTransaction+0x90>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c9e8:	f7fe fd36 	bl	800b458 <HAL_GetTick>
 800c9ec:	1b80      	subs	r0, r0, r6
 800c9ee:	4285      	cmp	r5, r0
 800c9f0:	d8e2      	bhi.n	800c9b8 <SPI_EndRxTxTransaction+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9f2:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9f4:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9f6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9f8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca00:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca02:	d02d      	beq.n	800ca60 <SPI_EndRxTxTransaction+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ca06:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ca0a:	d107      	bne.n	800ca1c <SPI_EndRxTxTransaction+0x6c>
          SPI_RESET_CRC(hspi);
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca1a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca22:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800ca24:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca26:	f043 0320 	orr.w	r3, r3, #32
 800ca2a:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800ca2c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800ca30:	2003      	movs	r0, #3
}
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca34:	f7fe fd10 	bl	800b458 <HAL_GetTick>
 800ca38:	1b80      	subs	r0, r0, r6
 800ca3a:	4285      	cmp	r5, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca3c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca3e:	d9d9      	bls.n	800c9f4 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	0612      	lsls	r2, r2, #24
 800ca44:	d4f6      	bmi.n	800ca34 <SPI_EndRxTxTransaction+0x84>
 800ca46:	e006      	b.n	800ca56 <SPI_EndRxTxTransaction+0xa6>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ca48:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca4a:	f7fe fd05 	bl	800b458 <HAL_GetTick>
 800ca4e:	1b80      	subs	r0, r0, r6
 800ca50:	4285      	cmp	r5, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca52:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca54:	d9ce      	bls.n	800c9f4 <SPI_EndRxTxTransaction+0x44>
  while ((hspi->Instance->SR & Fifo) != State)
 800ca56:	6898      	ldr	r0, [r3, #8]
 800ca58:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800ca5c:	d1f4      	bne.n	800ca48 <SPI_EndRxTxTransaction+0x98>
}
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca60:	68a2      	ldr	r2, [r4, #8]
 800ca62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ca66:	d002      	beq.n	800ca6e <SPI_EndRxTxTransaction+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ca6c:	d1ca      	bne.n	800ca04 <SPI_EndRxTxTransaction+0x54>
          __HAL_SPI_DISABLE(hspi);
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	e7c5      	b.n	800ca04 <SPI_EndRxTxTransaction+0x54>

0800ca78 <HAL_SPI_Init>:
  if (hspi == NULL)
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d051      	beq.n	800cb20 <HAL_SPI_Init+0xa8>
{
 800ca7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca7e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca82:	2200      	movs	r2, #0
{
 800ca84:	b083      	sub	sp, #12
 800ca86:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca88:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca8c:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d041      	beq.n	800cb16 <HAL_SPI_Init+0x9e>
  hspi->State = HAL_SPI_STATE_BUSY;
 800ca92:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800ca94:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800ca96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800ca9a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca9c:	68e6      	ldr	r6, [r4, #12]
 800ca9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
  __HAL_SPI_DISABLE(hspi);
 800caa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caa4:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800caa8:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caaa:	d92d      	bls.n	800cb08 <HAL_SPI_Init+0x90>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800caac:	f5b6 6f70 	cmp.w	r6, #3840	; 0xf00
 800cab0:	d138      	bne.n	800cb24 <HAL_SPI_Init+0xac>
 800cab2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	d03a      	beq.n	800cb2e <HAL_SPI_Init+0xb6>
 800cab8:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cabc:	68a2      	ldr	r2, [r4, #8]
 800cabe:	6863      	ldr	r3, [r4, #4]
 800cac0:	6927      	ldr	r7, [r4, #16]
 800cac2:	4313      	orrs	r3, r2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cac4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cac6:	9201      	str	r2, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cac8:	6962      	ldr	r2, [r4, #20]
 800caca:	433b      	orrs	r3, r7
 800cacc:	4313      	orrs	r3, r2
 800cace:	e9d4 7506 	ldrd	r7, r5, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cad2:	9a01      	ldr	r2, [sp, #4]
 800cad4:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cad6:	6a26      	ldr	r6, [r4, #32]
 800cad8:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cada:	6b65      	ldr	r5, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cadc:	4333      	orrs	r3, r6
 800cade:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cae2:	0c3f      	lsrs	r7, r7, #16
 800cae4:	f007 0704 	and.w	r7, r7, #4
 800cae8:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800caea:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800caec:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800caee:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800caf0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800caf2:	ea45 050c 	orr.w	r5, r5, ip
  hspi->State     = HAL_SPI_STATE_READY;
 800caf6:	2601      	movs	r6, #1
  return HAL_OK;
 800caf8:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cafa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cafc:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cafe:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cb00:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 800cb04:	b003      	add	sp, #12
 800cb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cb08:	d014      	beq.n	800cb34 <HAL_SPI_Init+0xbc>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cb0e:	b1aa      	cbz	r2, 800cb3c <HAL_SPI_Init+0xc4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cb10:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800cb14:	e7d2      	b.n	800cabc <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 800cb16:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800cb1a:	f7fe fad7 	bl	800b0cc <HAL_SPI_MspInit>
 800cb1e:	e7b8      	b.n	800ca92 <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 800cb20:	2001      	movs	r0, #1
}
 800cb22:	4770      	bx	lr
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb24:	2000      	movs	r0, #0
 800cb26:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	d1c5      	bne.n	800cab8 <HAL_SPI_Init+0x40>
 800cb2c:	4610      	mov	r0, r2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	6323      	str	r3, [r4, #48]	; 0x30
 800cb32:	e7c1      	b.n	800cab8 <HAL_SPI_Init+0x40>
 800cb34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cb36:	2a00      	cmp	r2, #0
 800cb38:	d1ea      	bne.n	800cb10 <HAL_SPI_Init+0x98>
 800cb3a:	4602      	mov	r2, r0
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4610      	mov	r0, r2
 800cb40:	6323      	str	r3, [r4, #48]	; 0x30
 800cb42:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800cb46:	e7b9      	b.n	800cabc <HAL_SPI_Init+0x44>

0800cb48 <HAL_SPI_Transmit>:
{
 800cb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800cb4c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800cb50:	2c01      	cmp	r4, #1
{
 800cb52:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800cb54:	d07a      	beq.n	800cc4c <HAL_SPI_Transmit+0x104>
 800cb56:	461d      	mov	r5, r3
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800cb5e:	4604      	mov	r4, r0
 800cb60:	4617      	mov	r7, r2
 800cb62:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 800cb64:	f7fe fc78 	bl	800b458 <HAL_GetTick>
 800cb68:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800cb6a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800cb6e:	b2c0      	uxtb	r0, r0
 800cb70:	2801      	cmp	r0, #1
 800cb72:	d009      	beq.n	800cb88 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800cb74:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800cb76:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800cb78:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800cb7a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cb7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800cb82:	b002      	add	sp, #8
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800cb88:	f1b8 0f00 	cmp.w	r8, #0
 800cb8c:	d0f3      	beq.n	800cb76 <HAL_SPI_Transmit+0x2e>
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	d0f1      	beq.n	800cb76 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb92:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb94:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb98:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb9a:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cba0:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cba4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cba6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = 0U;
 800cba8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cbac:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800cbb0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800cbb2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cbb4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cbb8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbba:	d103      	bne.n	800cbc4 <HAL_SPI_Transmit+0x7c>
    SPI_1LINE_TX(hspi);
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbc2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	0651      	lsls	r1, r2, #25
 800cbc8:	d403      	bmi.n	800cbd2 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbd0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbd2:	68e2      	ldr	r2, [r4, #12]
 800cbd4:	6861      	ldr	r1, [r4, #4]
 800cbd6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800cbda:	d83b      	bhi.n	800cc54 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	f000 80a6 	beq.w	800cd2e <HAL_SPI_Transmit+0x1e6>
 800cbe2:	2f01      	cmp	r7, #1
 800cbe4:	f000 80a3 	beq.w	800cd2e <HAL_SPI_Transmit+0x1e6>
 800cbe8:	1c69      	adds	r1, r5, #1
 800cbea:	d179      	bne.n	800cce0 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 800cbec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	b1b3      	cbz	r3, 800cc20 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	0792      	lsls	r2, r2, #30
 800cbf8:	f140 808c 	bpl.w	800cd14 <HAL_SPI_Transmit+0x1cc>
        if (hspi->TxXferCount > 1U)
 800cbfc:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800cbfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc00:	2801      	cmp	r0, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc02:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800cc04:	f240 8089 	bls.w	800cd1a <HAL_SPI_Transmit+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc08:	f832 1b02 	ldrh.w	r1, [r2], #2
 800cc0c:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800cc0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc10:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cc12:	3b02      	subs	r3, #2
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800cc18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e8      	bne.n	800cbf2 <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc20:	4632      	mov	r2, r6
 800cc22:	4629      	mov	r1, r5
 800cc24:	4620      	mov	r0, r4
 800cc26:	f7ff fec3 	bl	800c9b0 <SPI_EndRxTxTransaction>
 800cc2a:	b108      	cbz	r0, 800cc30 <HAL_SPI_Transmit+0xe8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc2c:	2320      	movs	r3, #32
 800cc2e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc30:	68a3      	ldr	r3, [r4, #8]
 800cc32:	b933      	cbnz	r3, 800cc42 <HAL_SPI_Transmit+0xfa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc34:	6822      	ldr	r2, [r4, #0]
 800cc36:	9301      	str	r3, [sp, #4]
 800cc38:	68d3      	ldr	r3, [r2, #12]
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	6893      	ldr	r3, [r2, #8]
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc42:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800cc44:	3000      	adds	r0, #0
 800cc46:	bf18      	it	ne
 800cc48:	2001      	movne	r0, #1
error:
 800cc4a:	e794      	b.n	800cb76 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800cc4c:	2002      	movs	r0, #2
}
 800cc4e:	b002      	add	sp, #8
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d077      	beq.n	800cd48 <HAL_SPI_Transmit+0x200>
 800cc58:	2f01      	cmp	r7, #1
 800cc5a:	d075      	beq.n	800cd48 <HAL_SPI_Transmit+0x200>
 800cc5c:	1c6b      	adds	r3, r5, #1
 800cc5e:	d120      	bne.n	800cca2 <HAL_SPI_Transmit+0x15a>
    while (hspi->TxXferCount > 0U)
 800cc60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0db      	beq.n	800cc20 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	689a      	ldr	r2, [r3, #8]
 800cc6c:	0797      	lsls	r7, r2, #30
 800cc6e:	d510      	bpl.n	800cc92 <HAL_SPI_Transmit+0x14a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cc72:	f832 1b02 	ldrh.w	r1, [r2], #2
 800cc76:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800cc78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc7a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800cc82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0ca      	beq.n	800cc20 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	689a      	ldr	r2, [r3, #8]
 800cc8e:	0797      	lsls	r7, r2, #30
 800cc90:	d4ee      	bmi.n	800cc70 <HAL_SPI_Transmit+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc92:	f7fe fbe1 	bl	800b458 <HAL_GetTick>
 800cc96:	e7e3      	b.n	800cc60 <HAL_SPI_Transmit+0x118>
 800cc98:	f7fe fbde 	bl	800b458 <HAL_GetTick>
 800cc9c:	1b80      	subs	r0, r0, r6
 800cc9e:	42a8      	cmp	r0, r5
 800cca0:	d261      	bcs.n	800cd66 <HAL_SPI_Transmit+0x21e>
    while (hspi->TxXferCount > 0U)
 800cca2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d0ba      	beq.n	800cc20 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	0792      	lsls	r2, r2, #30
 800ccb0:	d5f2      	bpl.n	800cc98 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ccb4:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ccb8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800ccba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccbc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ccc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1ee      	bne.n	800ccaa <HAL_SPI_Transmit+0x162>
 800cccc:	e7a8      	b.n	800cc20 <HAL_SPI_Transmit+0xd8>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ccce:	780a      	ldrb	r2, [r1, #0]
 800ccd0:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800ccd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800ccd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800ccda:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800ccdc:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800ccde:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 800cce0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d09b      	beq.n	800cc20 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	689a      	ldr	r2, [r3, #8]
 800ccec:	0790      	lsls	r0, r2, #30
 800ccee:	d535      	bpl.n	800cd5c <HAL_SPI_Transmit+0x214>
        if (hspi->TxXferCount > 1U)
 800ccf0:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800ccf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ccf4:	2801      	cmp	r0, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccf6:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800ccf8:	d9e9      	bls.n	800ccce <HAL_SPI_Transmit+0x186>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccfa:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ccfe:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800cd00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd02:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cd04:	3b02      	subs	r3, #2
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800cd0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1ea      	bne.n	800cce8 <HAL_SPI_Transmit+0x1a0>
 800cd12:	e785      	b.n	800cc20 <HAL_SPI_Transmit+0xd8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd14:	f7fe fba0 	bl	800b458 <HAL_GetTick>
 800cd18:	e768      	b.n	800cbec <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd1a:	780a      	ldrb	r2, [r1, #0]
 800cd1c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800cd1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800cd20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800cd22:	3b01      	subs	r3, #1
 800cd24:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800cd26:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800cd28:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800cd2a:	63a2      	str	r2, [r4, #56]	; 0x38
 800cd2c:	e75e      	b.n	800cbec <HAL_SPI_Transmit+0xa4>
      if (hspi->TxXferCount > 1U)
 800cd2e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800cd30:	2a01      	cmp	r2, #1
 800cd32:	d91a      	bls.n	800cd6a <HAL_SPI_Transmit+0x222>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd34:	4641      	mov	r1, r8
 800cd36:	f831 2b02 	ldrh.w	r2, [r1], #2
 800cd3a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800cd3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd3e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cd40:	3b02      	subs	r3, #2
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800cd46:	e74f      	b.n	800cbe8 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd48:	4641      	mov	r1, r8
 800cd4a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800cd4e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800cd50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd52:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800cd5a:	e77f      	b.n	800cc5c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd5c:	f7fe fb7c 	bl	800b458 <HAL_GetTick>
 800cd60:	1b80      	subs	r0, r0, r6
 800cd62:	42a8      	cmp	r0, r5
 800cd64:	d3bc      	bcc.n	800cce0 <HAL_SPI_Transmit+0x198>
          errorcode = HAL_TIMEOUT;
 800cd66:	2003      	movs	r0, #3
 800cd68:	e705      	b.n	800cb76 <HAL_SPI_Transmit+0x2e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd6a:	f898 2000 	ldrb.w	r2, [r8]
 800cd6e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800cd70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800cd72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800cd78:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800cd7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800cd7c:	63a2      	str	r2, [r4, #56]	; 0x38
 800cd7e:	e733      	b.n	800cbe8 <HAL_SPI_Transmit+0xa0>

0800cd80 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d06f      	beq.n	800ce64 <HAL_TIM_Base_Init+0xe4>
{
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cd90:	b383      	cbz	r3, 800cdf4 <HAL_TIM_Base_Init+0x74>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd92:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd94:	4e3d      	ldr	r6, [pc, #244]	; (800ce8c <HAL_TIM_Base_Init+0x10c>)
 800cd96:	69a5      	ldr	r5, [r4, #24]
 800cd98:	68e0      	ldr	r0, [r4, #12]
 800cd9a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cda2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800cda4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cda6:	d05f      	beq.n	800ce68 <HAL_TIM_Base_Init+0xe8>
 800cda8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cdac:	d040      	beq.n	800ce30 <HAL_TIM_Base_Init+0xb0>
 800cdae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800cdb2:	42b2      	cmp	r2, r6
 800cdb4:	d023      	beq.n	800cdfe <HAL_TIM_Base_Init+0x7e>
 800cdb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cdba:	42b2      	cmp	r2, r6
 800cdbc:	d01f      	beq.n	800cdfe <HAL_TIM_Base_Init+0x7e>
 800cdbe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cdc2:	42b2      	cmp	r2, r6
 800cdc4:	d01b      	beq.n	800cdfe <HAL_TIM_Base_Init+0x7e>
 800cdc6:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800cdca:	42b2      	cmp	r2, r6
 800cdcc:	d017      	beq.n	800cdfe <HAL_TIM_Base_Init+0x7e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdce:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800cdd2:	42b2      	cmp	r2, r6
 800cdd4:	d057      	beq.n	800ce86 <HAL_TIM_Base_Init+0x106>
 800cdd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cdda:	42b2      	cmp	r2, r6
 800cddc:	d053      	beq.n	800ce86 <HAL_TIM_Base_Init+0x106>
 800cdde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cde2:	42b2      	cmp	r2, r6
 800cde4:	d04f      	beq.n	800ce86 <HAL_TIM_Base_Init+0x106>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cde6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdea:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 800cdec:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdee:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdf0:	6291      	str	r1, [r2, #40]	; 0x28
 800cdf2:	e017      	b.n	800ce24 <HAL_TIM_Base_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 800cdf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cdf8:	f7fe f9b4 	bl	800b164 <HAL_TIM_Base_MspInit>
 800cdfc:	e7c9      	b.n	800cd92 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800cdfe:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce00:	4f23      	ldr	r7, [pc, #140]	; (800ce90 <HAL_TIM_Base_Init+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce06:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce08:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce0e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce14:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce16:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800ce18:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce1a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce1c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce1e:	d115      	bne.n	800ce4c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce20:	6963      	ldr	r3, [r4, #20]
 800ce22:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce24:	2301      	movs	r3, #1
 800ce26:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800ce28:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ce2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800ce30:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce32:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce38:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce3e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce44:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ce46:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce48:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce4a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce4c:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <HAL_TIM_Base_Init+0x114>)
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d0e6      	beq.n	800ce20 <HAL_TIM_Base_Init+0xa0>
 800ce52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d0e2      	beq.n	800ce20 <HAL_TIM_Base_Init+0xa0>
 800ce5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d1e0      	bne.n	800ce24 <HAL_TIM_Base_Init+0xa4>
 800ce62:	e7dd      	b.n	800ce20 <HAL_TIM_Base_Init+0xa0>
    return HAL_ERROR;
 800ce64:	2001      	movs	r0, #1
}
 800ce66:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800ce68:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce6a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce70:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce76:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce7c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ce7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce80:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce82:	6291      	str	r1, [r2, #40]	; 0x28
 800ce84:	e7cc      	b.n	800ce20 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce86:	6926      	ldr	r6, [r4, #16]
 800ce88:	e7f3      	b.n	800ce72 <HAL_TIM_Base_Init+0xf2>
 800ce8a:	bf00      	nop
 800ce8c:	40012c00 	.word	0x40012c00
 800ce90:	40013400 	.word	0x40013400
 800ce94:	40014000 	.word	0x40014000

0800ce98 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce98:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce9a:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce9c:	68d9      	ldr	r1, [r3, #12]
 800ce9e:	f041 0101 	orr.w	r1, r1, #1
 800cea2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cea4:	6899      	ldr	r1, [r3, #8]
 800cea6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cea8:	2a06      	cmp	r2, #6
 800ceaa:	d006      	beq.n	800ceba <HAL_TIM_Base_Start_IT+0x22>
 800ceac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ceb0:	d003      	beq.n	800ceba <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	f042 0201 	orr.w	r2, r2, #1
 800ceb8:	601a      	str	r2, [r3, #0]
}
 800ceba:	2000      	movs	r0, #0
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	00010007 	.word	0x00010007

0800cec4 <HAL_TIM_PWM_MspInit>:
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop

0800cec8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d06f      	beq.n	800cfac <HAL_TIM_PWM_Init+0xe4>
{
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800cece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ced2:	4604      	mov	r4, r0
 800ced4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ced8:	b383      	cbz	r3, 800cf3c <HAL_TIM_PWM_Init+0x74>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceda:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cedc:	4e3d      	ldr	r6, [pc, #244]	; (800cfd4 <HAL_TIM_PWM_Init+0x10c>)
 800cede:	69a5      	ldr	r5, [r4, #24]
 800cee0:	68e0      	ldr	r0, [r4, #12]
 800cee2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800cee4:	2302      	movs	r3, #2
 800cee6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ceea:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800ceec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ceee:	d05f      	beq.n	800cfb0 <HAL_TIM_PWM_Init+0xe8>
 800cef0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cef4:	d040      	beq.n	800cf78 <HAL_TIM_PWM_Init+0xb0>
 800cef6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800cefa:	42b2      	cmp	r2, r6
 800cefc:	d023      	beq.n	800cf46 <HAL_TIM_PWM_Init+0x7e>
 800cefe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf02:	42b2      	cmp	r2, r6
 800cf04:	d01f      	beq.n	800cf46 <HAL_TIM_PWM_Init+0x7e>
 800cf06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf0a:	42b2      	cmp	r2, r6
 800cf0c:	d01b      	beq.n	800cf46 <HAL_TIM_PWM_Init+0x7e>
 800cf0e:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800cf12:	42b2      	cmp	r2, r6
 800cf14:	d017      	beq.n	800cf46 <HAL_TIM_PWM_Init+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf16:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800cf1a:	42b2      	cmp	r2, r6
 800cf1c:	d057      	beq.n	800cfce <HAL_TIM_PWM_Init+0x106>
 800cf1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf22:	42b2      	cmp	r2, r6
 800cf24:	d053      	beq.n	800cfce <HAL_TIM_PWM_Init+0x106>
 800cf26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf2a:	42b2      	cmp	r2, r6
 800cf2c:	d04f      	beq.n	800cfce <HAL_TIM_PWM_Init+0x106>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf32:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800cf34:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf36:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf38:	6291      	str	r1, [r2, #40]	; 0x28
 800cf3a:	e017      	b.n	800cf6c <HAL_TIM_PWM_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 800cf3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800cf40:	f7ff ffc0 	bl	800cec4 <HAL_TIM_PWM_MspInit>
 800cf44:	e7c9      	b.n	800ceda <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800cf46:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf48:	4f23      	ldr	r7, [pc, #140]	; (800cfd8 <HAL_TIM_PWM_Init+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cf4e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf50:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf56:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf5c:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf5e:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800cf60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf62:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf64:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf66:	d115      	bne.n	800cf94 <HAL_TIM_PWM_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800cf68:	6963      	ldr	r3, [r4, #20]
 800cf6a:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800cf70:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cf72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800cf78:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf7a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cf80:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf86:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf8c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800cf8e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf90:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf92:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <HAL_TIM_PWM_Init+0x114>)
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d0e6      	beq.n	800cf68 <HAL_TIM_PWM_Init+0xa0>
 800cf9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d0e2      	beq.n	800cf68 <HAL_TIM_PWM_Init+0xa0>
 800cfa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d1e0      	bne.n	800cf6c <HAL_TIM_PWM_Init+0xa4>
 800cfaa:	e7dd      	b.n	800cf68 <HAL_TIM_PWM_Init+0xa0>
    return HAL_ERROR;
 800cfac:	2001      	movs	r0, #1
}
 800cfae:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800cfb0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfb2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cfb8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfbe:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800cfc6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfc8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cfca:	6291      	str	r1, [r2, #40]	; 0x28
 800cfcc:	e7cc      	b.n	800cf68 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfce:	6926      	ldr	r6, [r4, #16]
 800cfd0:	e7f3      	b.n	800cfba <HAL_TIM_PWM_Init+0xf2>
 800cfd2:	bf00      	nop
 800cfd4:	40012c00 	.word	0x40012c00
 800cfd8:	40013400 	.word	0x40013400
 800cfdc:	40014000 	.word	0x40014000

0800cfe0 <HAL_TIM_PWM_Start>:
 800cfe0:	6803      	ldr	r3, [r0, #0]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	6a18      	ldr	r0, [r3, #32]
 800cfe6:	f001 011f 	and.w	r1, r1, #31
 800cfea:	fa02 f101 	lsl.w	r1, r2, r1
 800cfee:	ea20 0001 	bic.w	r0, r0, r1
 800cff2:	b410      	push	{r4}
 800cff4:	6218      	str	r0, [r3, #32]
 800cff6:	6a1a      	ldr	r2, [r3, #32]
 800cff8:	4c13      	ldr	r4, [pc, #76]	; (800d048 <HAL_TIM_PWM_Start+0x68>)
 800cffa:	4311      	orrs	r1, r2
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	6219      	str	r1, [r3, #32]
 800d000:	d00e      	beq.n	800d020 <HAL_TIM_PWM_Start+0x40>
 800d002:	4a12      	ldr	r2, [pc, #72]	; (800d04c <HAL_TIM_PWM_Start+0x6c>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <HAL_TIM_PWM_Start+0x40>
 800d008:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <HAL_TIM_PWM_Start+0x40>
 800d010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <HAL_TIM_PWM_Start+0x40>
 800d018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d103      	bne.n	800d028 <HAL_TIM_PWM_Start+0x48>
 800d020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d026:	645a      	str	r2, [r3, #68]	; 0x44
 800d028:	6899      	ldr	r1, [r3, #8]
 800d02a:	4a09      	ldr	r2, [pc, #36]	; (800d050 <HAL_TIM_PWM_Start+0x70>)
 800d02c:	400a      	ands	r2, r1
 800d02e:	2a06      	cmp	r2, #6
 800d030:	d006      	beq.n	800d040 <HAL_TIM_PWM_Start+0x60>
 800d032:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d036:	d003      	beq.n	800d040 <HAL_TIM_PWM_Start+0x60>
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	f042 0201 	orr.w	r2, r2, #1
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	2000      	movs	r0, #0
 800d042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d046:	4770      	bx	lr
 800d048:	40012c00 	.word	0x40012c00
 800d04c:	40013400 	.word	0x40013400
 800d050:	00010007 	.word	0x00010007

0800d054 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d054:	6803      	ldr	r3, [r0, #0]
{
 800d056:	b430      	push	{r4, r5}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d058:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d05a:	4c1f      	ldr	r4, [pc, #124]	; (800d0d8 <HAL_TIM_PWM_Stop+0x84>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d05c:	f001 051f 	and.w	r5, r1, #31
 800d060:	2101      	movs	r1, #1
 800d062:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 800d064:	ea22 0101 	bic.w	r1, r2, r1
 800d068:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d06a:	6a1a      	ldr	r2, [r3, #32]
 800d06c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d06e:	42a3      	cmp	r3, r4
 800d070:	d022      	beq.n	800d0b8 <HAL_TIM_PWM_Stop+0x64>
 800d072:	4a1a      	ldr	r2, [pc, #104]	; (800d0dc <HAL_TIM_PWM_Stop+0x88>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d01f      	beq.n	800d0b8 <HAL_TIM_PWM_Stop+0x64>
 800d078:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d01b      	beq.n	800d0b8 <HAL_TIM_PWM_Stop+0x64>
 800d080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d084:	4293      	cmp	r3, r2
 800d086:	d017      	beq.n	800d0b8 <HAL_TIM_PWM_Stop+0x64>
 800d088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d013      	beq.n	800d0b8 <HAL_TIM_PWM_Stop+0x64>
  __HAL_TIM_DISABLE(htim);
 800d090:	6a19      	ldr	r1, [r3, #32]
 800d092:	f241 1211 	movw	r2, #4369	; 0x1111
 800d096:	4211      	tst	r1, r2
 800d098:	d108      	bne.n	800d0ac <HAL_TIM_PWM_Stop+0x58>
 800d09a:	6a19      	ldr	r1, [r3, #32]
 800d09c:	f240 4244 	movw	r2, #1092	; 0x444
 800d0a0:	4211      	tst	r1, r2
 800d0a2:	d103      	bne.n	800d0ac <HAL_TIM_PWM_Stop+0x58>
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	f022 0201 	bic.w	r2, r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800d0b2:	bc30      	pop	{r4, r5}
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 800d0b8:	6a19      	ldr	r1, [r3, #32]
 800d0ba:	f241 1211 	movw	r2, #4369	; 0x1111
 800d0be:	4211      	tst	r1, r2
 800d0c0:	d1e6      	bne.n	800d090 <HAL_TIM_PWM_Stop+0x3c>
 800d0c2:	6a19      	ldr	r1, [r3, #32]
 800d0c4:	f240 4244 	movw	r2, #1092	; 0x444
 800d0c8:	4211      	tst	r1, r2
 800d0ca:	d1e1      	bne.n	800d090 <HAL_TIM_PWM_Stop+0x3c>
 800d0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0d2:	645a      	str	r2, [r3, #68]	; 0x44
 800d0d4:	e7dc      	b.n	800d090 <HAL_TIM_PWM_Stop+0x3c>
 800d0d6:	bf00      	nop
 800d0d8:	40012c00 	.word	0x40012c00
 800d0dc:	40013400 	.word	0x40013400

0800d0e0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800d0e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	f000 81ae 	beq.w	800d446 <HAL_TIM_PWM_ConfigChannel+0x366>
{
 800d0ea:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800d0ec:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d0ee:	2401      	movs	r4, #1
 800d0f0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800d0f8:	2a14      	cmp	r2, #20
 800d0fa:	d854      	bhi.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800d0fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d100:	00530015 	.word	0x00530015
 800d104:	00530053 	.word	0x00530053
 800d108:	0053009c 	.word	0x0053009c
 800d10c:	00530053 	.word	0x00530053
 800d110:	00530162 	.word	0x00530162
 800d114:	00530053 	.word	0x00530053
 800d118:	005300e0 	.word	0x005300e0
 800d11c:	00530053 	.word	0x00530053
 800d120:	00530120 	.word	0x00530120
 800d124:	00530053 	.word	0x00530053
 800d128:	005c      	.short	0x005c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d12a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 800d12c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d130:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800d132:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d134:	4ea2      	ldr	r6, [pc, #648]	; (800d3c0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d136:	f025 0501 	bic.w	r5, r5, #1
 800d13a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d13c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d13e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800d140:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d142:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800d146:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d14a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d14e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800d150:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 800d154:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d158:	d008      	beq.n	800d16c <HAL_TIM_PWM_ConfigChannel+0x8c>
 800d15a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d15e:	42b3      	cmp	r3, r6
 800d160:	d004      	beq.n	800d16c <HAL_TIM_PWM_ConfigChannel+0x8c>
 800d162:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d166:	42b3      	cmp	r3, r6
 800d168:	f040 817f 	bne.w	800d46a <HAL_TIM_PWM_ConfigChannel+0x38a>
    tmpccer |= OC_Config->OCNPolarity;
 800d16c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800d16e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800d172:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800d174:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d178:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800d17c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800d17e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800d182:	4335      	orrs	r5, r6
  TIMx->CCR1 = OC_Config->Pulse;
 800d184:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d186:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d188:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800d18a:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800d18c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d18e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d190:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d192:	f044 0408 	orr.w	r4, r4, #8
 800d196:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d198:	6999      	ldr	r1, [r3, #24]
 800d19a:	f021 0104 	bic.w	r1, r1, #4
 800d19e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	432a      	orrs	r2, r5
 800d1a4:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800d1a6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d1ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800d1b2:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800d1b4:	4618      	mov	r0, r3
}
 800d1b6:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d1b8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1ba:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1be:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1c0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1c2:	4e7f      	ldr	r6, [pc, #508]	; (800d3c0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1c4:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 800d1c8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d1ca:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d1cc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d1ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1d4:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1dc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1de:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e6:	d00f      	beq.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x128>
 800d1e8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d1ec:	42b3      	cmp	r3, r6
 800d1ee:	d00b      	beq.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x128>
 800d1f0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d1f4:	42b3      	cmp	r3, r6
 800d1f6:	d007      	beq.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x128>
 800d1f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d1fc:	42b3      	cmp	r3, r6
 800d1fe:	d003      	beq.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x128>
 800d200:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d204:	42b3      	cmp	r3, r6
 800d206:	d104      	bne.n	800d212 <HAL_TIM_PWM_ConfigChannel+0x132>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d208:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d20a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d20e:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 800d212:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d214:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d216:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800d218:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800d21a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d21c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d21e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d220:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800d224:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d226:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d228:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d22c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d22e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d230:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800d234:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d236:	e7b6      	b.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d238:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d23a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d23e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d240:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d242:	4e5f      	ldr	r6, [pc, #380]	; (800d3c0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d244:	f025 0510 	bic.w	r5, r5, #16
 800d248:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d24a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d24c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800d24e:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d250:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800d254:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d258:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d25c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d25e:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d262:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d266:	f000 80f0 	beq.w	800d44a <HAL_TIM_PWM_ConfigChannel+0x36a>
 800d26a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d26e:	42b3      	cmp	r3, r6
 800d270:	f000 80eb 	beq.w	800d44a <HAL_TIM_PWM_ConfigChannel+0x36a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d274:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d278:	42b3      	cmp	r3, r6
 800d27a:	d007      	beq.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800d27c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d280:	42b3      	cmp	r3, r6
 800d282:	d003      	beq.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800d284:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d288:	42b3      	cmp	r3, r6
 800d28a:	d106      	bne.n	800d29a <HAL_TIM_PWM_ConfigChannel+0x1ba>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d28c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d290:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d294:	433e      	orrs	r6, r7
 800d296:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800d29a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d29c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d29e:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800d2a0:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d2a2:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2a4:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d2a6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2a8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800d2ac:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d2ae:	6999      	ldr	r1, [r3, #24]
 800d2b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d2b4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d2b6:	699a      	ldr	r2, [r3, #24]
 800d2b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800d2bc:	619a      	str	r2, [r3, #24]
      break;
 800d2be:	e772      	b.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2c0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2c2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2c6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2c8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ca:	4e3d      	ldr	r6, [pc, #244]	; (800d3c0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2cc:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800d2d0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d2d2:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d2d4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800d2d6:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800d2dc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2e0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2e4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2e6:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2ea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ee:	d00f      	beq.n	800d310 <HAL_TIM_PWM_ConfigChannel+0x230>
 800d2f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d2f4:	42b3      	cmp	r3, r6
 800d2f6:	d00b      	beq.n	800d310 <HAL_TIM_PWM_ConfigChannel+0x230>
 800d2f8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d2fc:	42b3      	cmp	r3, r6
 800d2fe:	d007      	beq.n	800d310 <HAL_TIM_PWM_ConfigChannel+0x230>
 800d300:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d304:	42b3      	cmp	r3, r6
 800d306:	d003      	beq.n	800d310 <HAL_TIM_PWM_ConfigChannel+0x230>
 800d308:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d30c:	42b3      	cmp	r3, r6
 800d30e:	d104      	bne.n	800d31a <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d310:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d312:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d316:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800d31a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d31c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d31e:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800d320:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800d322:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d324:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d326:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d328:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800d32c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d32e:	69d9      	ldr	r1, [r3, #28]
 800d330:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d334:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d336:	69da      	ldr	r2, [r3, #28]
 800d338:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800d33c:	61da      	str	r2, [r3, #28]
      break;
 800d33e:	e732      	b.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d340:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d342:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d346:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800d348:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d34a:	4e1d      	ldr	r6, [pc, #116]	; (800d3c0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d34c:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 800d350:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d352:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d354:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d358:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800d35c:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d360:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d364:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d366:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800d36a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d36e:	d00f      	beq.n	800d390 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 800d370:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d374:	42b3      	cmp	r3, r6
 800d376:	d00b      	beq.n	800d390 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 800d378:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d37c:	42b3      	cmp	r3, r6
 800d37e:	d007      	beq.n	800d390 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 800d380:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d384:	42b3      	cmp	r3, r6
 800d386:	d003      	beq.n	800d390 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 800d388:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d38c:	42b3      	cmp	r3, r6
 800d38e:	d104      	bne.n	800d39a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d390:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d392:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d396:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800d39a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d39c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d39e:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800d3a0:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800d3a2:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3a4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d3a6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3a8:	f044 0408 	orr.w	r4, r4, #8
 800d3ac:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d3ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d3b0:	f021 0104 	bic.w	r1, r1, #4
 800d3b4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d3b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3b8:	432a      	orrs	r2, r5
 800d3ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d3bc:	e6f3      	b.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800d3be:	bf00      	nop
 800d3c0:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3c4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3c6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3ca:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800d3cc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3ce:	4e2c      	ldr	r6, [pc, #176]	; (800d480 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3d0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800d3d4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800d3d6:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d3d8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800d3da:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800d3e0:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3e8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3ea:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800d3ee:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3f2:	d032      	beq.n	800d45a <HAL_TIM_PWM_ConfigChannel+0x37a>
 800d3f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d3f8:	42b3      	cmp	r3, r6
 800d3fa:	d02e      	beq.n	800d45a <HAL_TIM_PWM_ConfigChannel+0x37a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3fc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d400:	42b3      	cmp	r3, r6
 800d402:	d007      	beq.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x334>
 800d404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d408:	42b3      	cmp	r3, r6
 800d40a:	d003      	beq.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x334>
 800d40c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d410:	42b3      	cmp	r3, r6
 800d412:	d106      	bne.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x342>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d414:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d418:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d41c:	433e      	orrs	r6, r7
 800d41e:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800d422:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d424:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d426:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800d428:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800d42a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d42c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d42e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d430:	f044 0408 	orr.w	r4, r4, #8
 800d434:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d436:	69d9      	ldr	r1, [r3, #28]
 800d438:	f021 0104 	bic.w	r1, r1, #4
 800d43c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d43e:	69da      	ldr	r2, [r3, #28]
 800d440:	432a      	orrs	r2, r5
 800d442:	61da      	str	r2, [r3, #28]
      break;
 800d444:	e6af      	b.n	800d1a6 <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 800d446:	2002      	movs	r0, #2
}
 800d448:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d44a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800d44c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d450:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800d454:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800d458:	e718      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x1ac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d45a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800d45c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d460:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800d464:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800d468:	e7d4      	b.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x334>
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d46a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d46e:	42b3      	cmp	r3, r6
 800d470:	f43f ae7c 	beq.w	800d16c <HAL_TIM_PWM_ConfigChannel+0x8c>
 800d474:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d478:	42b3      	cmp	r3, r6
 800d47a:	f47f ae83 	bne.w	800d184 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800d47e:	e675      	b.n	800d16c <HAL_TIM_PWM_ConfigChannel+0x8c>
 800d480:	40012c00 	.word	0x40012c00

0800d484 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d484:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d05a      	beq.n	800d542 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 800d48c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800d48e:	6803      	ldr	r3, [r0, #0]
{
 800d490:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800d492:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800d496:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800d498:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d49a:	4c4d      	ldr	r4, [pc, #308]	; (800d5d0 <HAL_TIM_ConfigClockSource+0x14c>)
  switch (sClockSourceConfig->ClockSource)
 800d49c:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d49e:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 800d4a2:	f04f 0501 	mov.w	r5, #1
 800d4a6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800d4aa:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800d4ac:	d074      	beq.n	800d598 <HAL_TIM_ConfigClockSource+0x114>
 800d4ae:	d94a      	bls.n	800d546 <HAL_TIM_ConfigClockSource+0xc2>
 800d4b0:	2a60      	cmp	r2, #96	; 0x60
 800d4b2:	d02d      	beq.n	800d510 <HAL_TIM_ConfigClockSource+0x8c>
 800d4b4:	d956      	bls.n	800d564 <HAL_TIM_ConfigClockSource+0xe0>
 800d4b6:	2a70      	cmp	r2, #112	; 0x70
 800d4b8:	d01a      	beq.n	800d4f0 <HAL_TIM_ConfigClockSource+0x6c>
 800d4ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d4be:	d10e      	bne.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4c0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800d4c4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800d4c6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4c8:	432a      	orrs	r2, r5
 800d4ca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4ce:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4d2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800d4d4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4d6:	689a      	ldr	r2, [r3, #8]
 800d4d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4dc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800d4de:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d4e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800d4ea:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800d4ec:	4618      	mov	r0, r3
}
 800d4ee:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4f0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800d4f4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800d4f6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4f8:	432a      	orrs	r2, r5
 800d4fa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4fe:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d502:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800d504:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d506:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d508:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d50c:	609a      	str	r2, [r3, #8]
      break;
 800d50e:	e7e6      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d510:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d512:	684d      	ldr	r5, [r1, #4]
 800d514:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d516:	f024 0410 	bic.w	r4, r4, #16
 800d51a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d51c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800d51e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d520:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800d528:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d52c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800d530:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800d532:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d534:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d536:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d53a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d53e:	609a      	str	r2, [r3, #8]
 800d540:	e7cd      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800d542:	2002      	movs	r0, #2
}
 800d544:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d546:	2a10      	cmp	r2, #16
 800d548:	d004      	beq.n	800d554 <HAL_TIM_ConfigClockSource+0xd0>
 800d54a:	d93d      	bls.n	800d5c8 <HAL_TIM_ConfigClockSource+0x144>
 800d54c:	2a20      	cmp	r2, #32
 800d54e:	d001      	beq.n	800d554 <HAL_TIM_ConfigClockSource+0xd0>
 800d550:	2a30      	cmp	r2, #48	; 0x30
 800d552:	d1c4      	bne.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800d554:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d556:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800d55a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d55e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800d560:	609a      	str	r2, [r3, #8]
 800d562:	e7bc      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800d564:	2a50      	cmp	r2, #80	; 0x50
 800d566:	d1ba      	bne.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800d568:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d56a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d56c:	684c      	ldr	r4, [r1, #4]
 800d56e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d570:	f026 0601 	bic.w	r6, r6, #1
 800d574:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d576:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d578:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d57c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d580:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800d584:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800d586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d588:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d58a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d58c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d590:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d594:	609a      	str	r2, [r3, #8]
 800d596:	e7a2      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800d598:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d59a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d59c:	684c      	ldr	r4, [r1, #4]
 800d59e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5a0:	f026 0601 	bic.w	r6, r6, #1
 800d5a4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5a6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5a8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5b0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800d5b4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800d5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5b8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d5ba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5c0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d5c4:	609a      	str	r2, [r3, #8]
 800d5c6:	e78a      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800d5c8:	2a00      	cmp	r2, #0
 800d5ca:	d0c3      	beq.n	800d554 <HAL_TIM_ConfigClockSource+0xd0>
 800d5cc:	e787      	b.n	800d4de <HAL_TIM_ConfigClockSource+0x5a>
 800d5ce:	bf00      	nop
 800d5d0:	fffe0088 	.word	0xfffe0088

0800d5d4 <HAL_TIM_OC_DelayElapsedCallback>:
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop

0800d5d8 <HAL_TIM_IC_CaptureCallback>:
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop

0800d5dc <HAL_TIM_PWM_PulseFinishedCallback>:
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop

0800d5e0 <HAL_TIM_TriggerCallback>:
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop

0800d5e4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5e4:	6803      	ldr	r3, [r0, #0]
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	0791      	lsls	r1, r2, #30
{
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5ee:	d502      	bpl.n	800d5f6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	0792      	lsls	r2, r2, #30
 800d5f4:	d468      	bmi.n	800d6c8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5f6:	691a      	ldr	r2, [r3, #16]
 800d5f8:	0752      	lsls	r2, r2, #29
 800d5fa:	d502      	bpl.n	800d602 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5fc:	68da      	ldr	r2, [r3, #12]
 800d5fe:	0750      	lsls	r0, r2, #29
 800d600:	d44f      	bmi.n	800d6a2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d602:	691a      	ldr	r2, [r3, #16]
 800d604:	0711      	lsls	r1, r2, #28
 800d606:	d502      	bpl.n	800d60e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d608:	68da      	ldr	r2, [r3, #12]
 800d60a:	0712      	lsls	r2, r2, #28
 800d60c:	d437      	bmi.n	800d67e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d60e:	691a      	ldr	r2, [r3, #16]
 800d610:	06d0      	lsls	r0, r2, #27
 800d612:	d502      	bpl.n	800d61a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	06d1      	lsls	r1, r2, #27
 800d618:	d41e      	bmi.n	800d658 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d61a:	691a      	ldr	r2, [r3, #16]
 800d61c:	07d2      	lsls	r2, r2, #31
 800d61e:	d502      	bpl.n	800d626 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	07d0      	lsls	r0, r2, #31
 800d624:	d469      	bmi.n	800d6fa <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d626:	691a      	ldr	r2, [r3, #16]
 800d628:	0611      	lsls	r1, r2, #24
 800d62a:	d502      	bpl.n	800d632 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	0612      	lsls	r2, r2, #24
 800d630:	d46b      	bmi.n	800d70a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d632:	691a      	ldr	r2, [r3, #16]
 800d634:	05d0      	lsls	r0, r2, #23
 800d636:	d502      	bpl.n	800d63e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	0611      	lsls	r1, r2, #24
 800d63c:	d46d      	bmi.n	800d71a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d63e:	691a      	ldr	r2, [r3, #16]
 800d640:	0652      	lsls	r2, r2, #25
 800d642:	d502      	bpl.n	800d64a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	0650      	lsls	r0, r2, #25
 800d648:	d46f      	bmi.n	800d72a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d64a:	691a      	ldr	r2, [r3, #16]
 800d64c:	0691      	lsls	r1, r2, #26
 800d64e:	d502      	bpl.n	800d656 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	0692      	lsls	r2, r2, #26
 800d654:	d449      	bmi.n	800d6ea <HAL_TIM_IRQHandler+0x106>
}
 800d656:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d658:	f06f 0210 	mvn.w	r2, #16
 800d65c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d65e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d660:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d662:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d666:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800d668:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d66a:	d16f      	bne.n	800d74c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d66c:	f7ff ffb2 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d670:	4620      	mov	r0, r4
 800d672:	f7ff ffb3 	bl	800d5dc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d676:	2200      	movs	r2, #0
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	7722      	strb	r2, [r4, #28]
 800d67c:	e7cd      	b.n	800d61a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d67e:	f06f 0208 	mvn.w	r2, #8
 800d682:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d684:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d686:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d688:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d68a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800d68c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d68e:	d15a      	bne.n	800d746 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d690:	f7ff ffa0 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d694:	4620      	mov	r0, r4
 800d696:	f7ff ffa1 	bl	800d5dc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d69a:	2200      	movs	r2, #0
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	7722      	strb	r2, [r4, #28]
 800d6a0:	e7b5      	b.n	800d60e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d6a2:	f06f 0204 	mvn.w	r2, #4
 800d6a6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6a8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6aa:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6ac:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6b0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6b4:	d144      	bne.n	800d740 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6b6:	f7ff ff8d 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f7ff ff8e 	bl	800d5dc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	7722      	strb	r2, [r4, #28]
 800d6c6:	e79c      	b.n	800d602 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6c8:	f06f 0202 	mvn.w	r2, #2
 800d6cc:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6ce:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6d0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6d2:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6d4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6d6:	d130      	bne.n	800d73a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6d8:	f7ff ff7c 	bl	800d5d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f7ff ff7d 	bl	800d5dc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	7722      	strb	r2, [r4, #28]
 800d6e8:	e785      	b.n	800d5f6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d6ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6f0:	611a      	str	r2, [r3, #16]
}
 800d6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d6f6:	f000 b8a3 	b.w	800d840 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6fa:	f06f 0201 	mvn.w	r2, #1
 800d6fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d700:	4620      	mov	r0, r4
 800d702:	f7fd fb03 	bl	800ad0c <HAL_TIM_PeriodElapsedCallback>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	e78d      	b.n	800d626 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d70a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d70e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d710:	4620      	mov	r0, r4
 800d712:	f000 f897 	bl	800d844 <HAL_TIMEx_BreakCallback>
 800d716:	6823      	ldr	r3, [r4, #0]
 800d718:	e78b      	b.n	800d632 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d71a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d71e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d720:	4620      	mov	r0, r4
 800d722:	f000 f891 	bl	800d848 <HAL_TIMEx_Break2Callback>
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	e789      	b.n	800d63e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d72a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d72e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d730:	4620      	mov	r0, r4
 800d732:	f7ff ff55 	bl	800d5e0 <HAL_TIM_TriggerCallback>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	e787      	b.n	800d64a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d73a:	f7ff ff4d 	bl	800d5d8 <HAL_TIM_IC_CaptureCallback>
 800d73e:	e7d0      	b.n	800d6e2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d740:	f7ff ff4a 	bl	800d5d8 <HAL_TIM_IC_CaptureCallback>
 800d744:	e7bc      	b.n	800d6c0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d746:	f7ff ff47 	bl	800d5d8 <HAL_TIM_IC_CaptureCallback>
 800d74a:	e7a6      	b.n	800d69a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d74c:	f7ff ff44 	bl	800d5d8 <HAL_TIM_IC_CaptureCallback>
 800d750:	e791      	b.n	800d676 <HAL_TIM_IRQHandler+0x92>
 800d752:	bf00      	nop

0800d754 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d754:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d025      	beq.n	800d7a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
{
 800d75c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d75e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d760:	4d13      	ldr	r5, [pc, #76]	; (800d7b0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d762:	2302      	movs	r3, #2
 800d764:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d768:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800d76a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d76c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d76e:	d016      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800d770:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d774:	42aa      	cmp	r2, r5
 800d776:	d012      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d778:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d77a:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d780:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d784:	4333      	orrs	r3, r6
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d786:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d788:	4329      	orrs	r1, r5
  htim->State = HAL_TIM_STATE_READY;
 800d78a:	2501      	movs	r5, #1
  htim->Instance->CR2 = tmpcr2;
 800d78c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 800d78e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d790:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d794:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800d798:	4620      	mov	r0, r4
 800d79a:	bc70      	pop	{r4, r5, r6}
 800d79c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d79e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7a4:	432b      	orrs	r3, r5
 800d7a6:	e7e7      	b.n	800d778 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 800d7a8:	2302      	movs	r3, #2
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	40012c00 	.word	0x40012c00

0800d7b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d03c      	beq.n	800d836 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800d7bc:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7be:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7c8:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7cc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d7d8:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7dc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7e2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d7e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d7e8:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d7ea:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d7ec:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7f2:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d7f4:	4c11      	ldr	r4, [pc, #68]	; (800d83c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800d7f6:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d7f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d7fc:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d7fe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d802:	d00a      	beq.n	800d81a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800d804:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800d808:	42a0      	cmp	r0, r4
 800d80a:	d006      	beq.n	800d81a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800d80c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800d80e:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 800d810:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800d812:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 800d814:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 800d818:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d81a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800d81c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d820:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d824:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d82c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d82e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d832:	430b      	orrs	r3, r1
 800d834:	e7ea      	b.n	800d80c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800d836:	2002      	movs	r0, #2
}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	40012c00 	.word	0x40012c00

0800d840 <HAL_TIMEx_CommutCallback>:
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop

0800d844 <HAL_TIMEx_BreakCallback>:
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop

0800d848 <HAL_TIMEx_Break2Callback>:
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop

0800d84c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d84c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800d84e:	2b20      	cmp	r3, #32
 800d850:	d11f      	bne.n	800d892 <HAL_UART_Receive_IT+0x46>
  {
    if ((pData == NULL) || (Size == 0U))
 800d852:	b301      	cbz	r1, 800d896 <HAL_UART_Receive_IT+0x4a>
 800d854:	b1fa      	cbz	r2, 800d896 <HAL_UART_Receive_IT+0x4a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800d856:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d019      	beq.n	800d892 <HAL_UART_Receive_IT+0x46>
    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;
    huart->RxISR       = NULL;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d85e:	6883      	ldr	r3, [r0, #8]
{
 800d860:	b410      	push	{r4}
    UART_MASK_COMPUTATION(huart);
 800d862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->pRxBuffPtr  = pData;
 800d866:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 800d868:	f04f 0401 	mov.w	r4, #1
    huart->RxISR       = NULL;
 800d86c:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 800d870:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800d874:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 800d878:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 800d87c:	6601      	str	r1, [r0, #96]	; 0x60
 800d87e:	6802      	ldr	r2, [r0, #0]
    UART_MASK_COMPUTATION(huart);
 800d880:	d00b      	beq.n	800d89a <HAL_UART_Receive_IT+0x4e>
 800d882:	b9cb      	cbnz	r3, 800d8b8 <HAL_UART_Receive_IT+0x6c>
 800d884:	6903      	ldr	r3, [r0, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d13c      	bne.n	800d904 <HAL_UART_Receive_IT+0xb8>
 800d88a:	23ff      	movs	r3, #255	; 0xff
 800d88c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800d890:	e017      	b.n	800d8c2 <HAL_UART_Receive_IT+0x76>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800d892:	2002      	movs	r0, #2
  }
}
 800d894:	4770      	bx	lr
      return HAL_ERROR;
 800d896:	2001      	movs	r0, #1
 800d898:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800d89a:	6903      	ldr	r3, [r0, #16]
 800d89c:	bb33      	cbnz	r3, 800d8ec <HAL_UART_Receive_IT+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d89e:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8a0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8a2:	6781      	str	r1, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8a4:	6893      	ldr	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 800d8a6:	4c1d      	ldr	r4, [pc, #116]	; (800d91c <HAL_UART_Receive_IT+0xd0>)
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8a8:	f043 0301 	orr.w	r3, r3, #1
 800d8ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d8b0:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 800d8b4:	6093      	str	r3, [r2, #8]
 800d8b6:	e00d      	b.n	800d8d4 <HAL_UART_Receive_IT+0x88>
    UART_MASK_COMPUTATION(huart);
 800d8b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8bc:	d026      	beq.n	800d90c <HAL_UART_Receive_IT+0xc0>
 800d8be:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8c2:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8c8:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ca:	6893      	ldr	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800d8cc:	4c14      	ldr	r4, [pc, #80]	; (800d920 <HAL_UART_Receive_IT+0xd4>)
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ce:	f043 0301 	orr.w	r3, r3, #1
 800d8d2:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d8d4:	6811      	ldr	r1, [r2, #0]
 800d8d6:	6604      	str	r4, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 800d8d8:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d8da:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    __HAL_UNLOCK(huart);
 800d8de:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 800d8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d8e6:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800d8e8:	4618      	mov	r0, r3
}
 800d8ea:	4770      	bx	lr
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8ec:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ee:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8f0:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f2:	6893      	ldr	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800d8f4:	4c0a      	ldr	r4, [pc, #40]	; (800d920 <HAL_UART_Receive_IT+0xd4>)
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f6:	f043 0301 	orr.w	r3, r3, #1
 800d8fa:	21ff      	movs	r1, #255	; 0xff
 800d8fc:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 800d900:	6093      	str	r3, [r2, #8]
 800d902:	e7e7      	b.n	800d8d4 <HAL_UART_Receive_IT+0x88>
    UART_MASK_COMPUTATION(huart);
 800d904:	237f      	movs	r3, #127	; 0x7f
 800d906:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800d90a:	e7da      	b.n	800d8c2 <HAL_UART_Receive_IT+0x76>
 800d90c:	6903      	ldr	r3, [r0, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d0f8      	beq.n	800d904 <HAL_UART_Receive_IT+0xb8>
 800d912:	233f      	movs	r3, #63	; 0x3f
 800d914:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800d918:	e7d3      	b.n	800d8c2 <HAL_UART_Receive_IT+0x76>
 800d91a:	bf00      	nop
 800d91c:	0800da55 	.word	0x0800da55
 800d920:	0800d9f9 	.word	0x0800d9f9

0800d924 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d928:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800d92a:	2e20      	cmp	r6, #32
 800d92c:	d131      	bne.n	800d992 <HAL_UART_Transmit_DMA+0x6e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d92e:	b399      	cbz	r1, 800d998 <HAL_UART_Transmit_DMA+0x74>
 800d930:	b392      	cbz	r2, 800d998 <HAL_UART_Transmit_DMA+0x74>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800d932:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800d936:	2c01      	cmp	r4, #1
 800d938:	d02b      	beq.n	800d992 <HAL_UART_Transmit_DMA+0x6e>
 800d93a:	4605      	mov	r5, r0
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800d93c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    huart->TxXferCount = Size;
 800d93e:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
 800d942:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d944:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d948:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 800d94a:	2401      	movs	r4, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d94c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 800d950:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d952:	676a      	str	r2, [r5, #116]	; 0x74
    huart->TxXferSize  = Size;
 800d954:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    __HAL_LOCK(huart);
 800d958:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
 800d95c:	682a      	ldr	r2, [r5, #0]
    if (huart->hdmatx != NULL)
 800d95e:	b168      	cbz	r0, 800d97c <HAL_UART_Transmit_DMA+0x58>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d960:	4f12      	ldr	r7, [pc, #72]	; (800d9ac <HAL_UART_Transmit_DMA+0x88>)

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d962:	f8df c050 	ldr.w	ip, [pc, #80]	; 800d9b4 <HAL_UART_Transmit_DMA+0x90>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d966:	62c7      	str	r7, [r0, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d968:	4f11      	ldr	r7, [pc, #68]	; (800d9b0 <HAL_UART_Transmit_DMA+0x8c>)

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d96a:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d96e:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d970:	e9c0 c70c 	strd	ip, r7, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d974:	f7fd fe78 	bl	800b668 <HAL_DMA_Start_IT>
 800d978:	b988      	cbnz	r0, 800d99e <HAL_UART_Transmit_DMA+0x7a>
 800d97a:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d97c:	2340      	movs	r3, #64	; 0x40
 800d97e:	6213      	str	r3, [r2, #32]

    __HAL_UNLOCK(huart);

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d980:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 800d982:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 800d988:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d98c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800d992:	2002      	movs	r0, #2
}
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800d998:	2001      	movs	r0, #1
}
 800d99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d99e:	2310      	movs	r3, #16
 800d9a0:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800d9a2:	f885 8070 	strb.w	r8, [r5, #112]	; 0x70
        return HAL_ERROR;
 800d9a6:	4620      	mov	r0, r4
        huart->gState = HAL_UART_STATE_READY;
 800d9a8:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800d9aa:	e7f3      	b.n	800d994 <HAL_UART_Transmit_DMA+0x70>
 800d9ac:	0800d9bd 	.word	0x0800d9bd
 800d9b0:	0800dab1 	.word	0x0800dab1
 800d9b4:	0800d9ed 	.word	0x0800d9ed

0800d9b8 <HAL_UART_TxCpltCallback>:
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop

0800d9bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d9bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d9be:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f013 0320 	ands.w	r3, r3, #32
 800d9c8:	d10b      	bne.n	800d9e2 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9ca:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0U;
 800d9cc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9d0:	6893      	ldr	r3, [r2, #8]
 800d9d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d6:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9d8:	6813      	ldr	r3, [r2, #0]
 800d9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9de:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9e0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800d9e2:	f7ff ffe9 	bl	800d9b8 <HAL_UART_TxCpltCallback>
}
 800d9e6:	bd08      	pop	{r3, pc}

0800d9e8 <HAL_UART_TxHalfCpltCallback>:
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop

0800d9ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9ec:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d9f0:	f7ff fffa 	bl	800d9e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9f4:	bd08      	pop	{r3, pc}
 800d9f6:	bf00      	nop

0800d9f8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9f8:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800d9fa:	6802      	ldr	r2, [r0, #0]
 800d9fc:	2922      	cmp	r1, #34	; 0x22
{
 800d9fe:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da00:	d004      	beq.n	800da0c <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da02:	8b13      	ldrh	r3, [r2, #24]
 800da04:	f043 0308 	orr.w	r3, r3, #8
 800da08:	8313      	strh	r3, [r2, #24]
  }
}
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da0c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da0e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800da12:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800da14:	4022      	ands	r2, r4
 800da16:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800da18:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800da1c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800da1e:	3a01      	subs	r2, #1
 800da20:	b292      	uxth	r2, r2
 800da22:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800da26:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800da2a:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800da2c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800da2e:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 800da30:	2a00      	cmp	r2, #0
 800da32:	d1ea      	bne.n	800da0a <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da34:	6801      	ldr	r1, [r0, #0]
 800da36:	680c      	ldr	r4, [r1, #0]
 800da38:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800da3c:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3e:	688c      	ldr	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800da40:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da42:	f024 0401 	bic.w	r4, r4, #1
 800da46:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 800da48:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800da4a:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 800da4c:	f7fb fcd4 	bl	80093f8 <HAL_UART_RxCpltCallback>
}
 800da50:	bd38      	pop	{r3, r4, r5, pc}
 800da52:	bf00      	nop

0800da54 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da54:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800da56:	6802      	ldr	r2, [r0, #0]
 800da58:	2922      	cmp	r1, #34	; 0x22
{
 800da5a:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da5c:	d004      	beq.n	800da68 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da5e:	8b13      	ldrh	r3, [r2, #24]
 800da60:	f043 0308 	orr.w	r3, r3, #8
 800da64:	8313      	strh	r3, [r2, #24]
  }
}
 800da66:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da68:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800da6a:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
 800da6e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800da70:	4029      	ands	r1, r5
 800da72:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800da76:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 800da7a:	6544      	str	r4, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800da7c:	3901      	subs	r1, #1
 800da7e:	b289      	uxth	r1, r1
 800da80:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800da84:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 800da88:	b289      	uxth	r1, r1
 800da8a:	2900      	cmp	r1, #0
 800da8c:	d1eb      	bne.n	800da66 <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da8e:	6814      	ldr	r4, [r2, #0]
 800da90:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800da94:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da96:	6894      	ldr	r4, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800da98:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da9a:	f024 0401 	bic.w	r4, r4, #1
 800da9e:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 800daa0:	6601      	str	r1, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800daa2:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 800daa4:	f7fb fca8 	bl	80093f8 <HAL_UART_RxCpltCallback>
}
 800daa8:	bd38      	pop	{r3, r4, r5, pc}
 800daaa:	bf00      	nop

0800daac <HAL_UART_ErrorCallback>:
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop

0800dab0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dab2:	6803      	ldr	r3, [r0, #0]
{
 800dab4:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dab6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dab8:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800daba:	689a      	ldr	r2, [r3, #8]
 800dabc:	0612      	lsls	r2, r2, #24
 800dabe:	d501      	bpl.n	800dac4 <UART_DMAError+0x14>
 800dac0:	2c21      	cmp	r4, #33	; 0x21
 800dac2:	d01a      	beq.n	800dafa <UART_DMAError+0x4a>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	0652      	lsls	r2, r2, #25
 800dac8:	d501      	bpl.n	800dace <UART_DMAError+0x1e>
 800daca:	2922      	cmp	r1, #34	; 0x22
 800dacc:	d006      	beq.n	800dadc <UART_DMAError+0x2c>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dace:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800dad0:	f043 0310 	orr.w	r3, r3, #16
 800dad4:	67c3      	str	r3, [r0, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800dad6:	f7ff ffe9 	bl	800daac <HAL_UART_ErrorCallback>
}
 800dada:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800dadc:	2100      	movs	r1, #0
 800dade:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dae8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daea:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800daec:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daee:	f022 0201 	bic.w	r2, r2, #1
 800daf2:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 800daf4:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800daf6:	6784      	str	r4, [r0, #120]	; 0x78
 800daf8:	e7e9      	b.n	800dace <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800db00:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800db02:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800db04:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800db08:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800db0a:	6744      	str	r4, [r0, #116]	; 0x74
 800db0c:	e7da      	b.n	800dac4 <UART_DMAError+0x14>
 800db0e:	bf00      	nop

0800db10 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db10:	6803      	ldr	r3, [r0, #0]
 800db12:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db14:	6819      	ldr	r1, [r3, #0]
{
 800db16:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800db18:	0716      	lsls	r6, r2, #28
{
 800db1a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db1c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800db1e:	d04c      	beq.n	800dbba <HAL_UART_IRQHandler+0xaa>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800db20:	f015 0001 	ands.w	r0, r5, #1
 800db24:	d052      	beq.n	800dbcc <HAL_UART_IRQHandler+0xbc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db26:	07d6      	lsls	r6, r2, #31
 800db28:	d507      	bpl.n	800db3a <HAL_UART_IRQHandler+0x2a>
 800db2a:	05cd      	lsls	r5, r1, #23
 800db2c:	d505      	bpl.n	800db3a <HAL_UART_IRQHandler+0x2a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db2e:	2501      	movs	r5, #1
 800db30:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db32:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800db34:	f045 0501 	orr.w	r5, r5, #1
 800db38:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db3a:	0796      	lsls	r6, r2, #30
 800db3c:	d56f      	bpl.n	800dc1e <HAL_UART_IRQHandler+0x10e>
 800db3e:	b138      	cbz	r0, 800db50 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db40:	2502      	movs	r5, #2
 800db42:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db44:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800db46:	f045 0504 	orr.w	r5, r5, #4
 800db4a:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db4c:	0755      	lsls	r5, r2, #29
 800db4e:	d46a      	bmi.n	800dc26 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db50:	0715      	lsls	r5, r2, #28
 800db52:	d503      	bpl.n	800db5c <HAL_UART_IRQHandler+0x4c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800db54:	068e      	lsls	r6, r1, #26
 800db56:	d46d      	bmi.n	800dc34 <HAL_UART_IRQHandler+0x124>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d16b      	bne.n	800dc34 <HAL_UART_IRQHandler+0x124>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800db5e:	2800      	cmp	r0, #0
 800db60:	d05c      	beq.n	800dc1c <HAL_UART_IRQHandler+0x10c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800db62:	0695      	lsls	r5, r2, #26
 800db64:	d501      	bpl.n	800db6a <HAL_UART_IRQHandler+0x5a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800db66:	0688      	lsls	r0, r1, #26
 800db68:	d46f      	bmi.n	800dc4a <HAL_UART_IRQHandler+0x13a>
      errorcode = huart->ErrorCode;
 800db6a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db6c:	6899      	ldr	r1, [r3, #8]
 800db6e:	0649      	lsls	r1, r1, #25
 800db70:	d402      	bmi.n	800db78 <HAL_UART_IRQHandler+0x68>
 800db72:	f015 0508 	ands.w	r5, r5, #8
 800db76:	d06f      	beq.n	800dc58 <HAL_UART_IRQHandler+0x148>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db80:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800db82:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db84:	f022 0201 	bic.w	r2, r2, #1
 800db88:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800db8a:	67a1      	str	r1, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db8c:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800db8e:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db90:	0652      	lsls	r2, r2, #25
  huart->RxISR = NULL;
 800db92:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db94:	d555      	bpl.n	800dc42 <HAL_UART_IRQHandler+0x132>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db96:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800db98:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db9e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d04e      	beq.n	800dc42 <HAL_UART_IRQHandler+0x132>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dba4:	4b2f      	ldr	r3, [pc, #188]	; (800dc64 <HAL_UART_IRQHandler+0x154>)
 800dba6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dba8:	f7fd fda4 	bl	800b6f4 <HAL_DMA_Abort_IT>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d035      	beq.n	800dc1c <HAL_UART_IRQHandler+0x10c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbb0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800dbb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dbb8:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dbba:	0696      	lsls	r6, r2, #26
 800dbbc:	d509      	bpl.n	800dbd2 <HAL_UART_IRQHandler+0xc2>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dbbe:	068e      	lsls	r6, r1, #26
 800dbc0:	d507      	bpl.n	800dbd2 <HAL_UART_IRQHandler+0xc2>
      if (huart->RxISR != NULL)
 800dbc2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dbc4:	b353      	cbz	r3, 800dc1c <HAL_UART_IRQHandler+0x10c>
}
 800dbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dbca:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800dbcc:	f411 7f90 	tst.w	r1, #288	; 0x120
 800dbd0:	d1a9      	bne.n	800db26 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbd2:	02d6      	lsls	r6, r2, #11
 800dbd4:	d409      	bmi.n	800dbea <HAL_UART_IRQHandler+0xda>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dbd6:	0616      	lsls	r6, r2, #24
 800dbd8:	d511      	bpl.n	800dbfe <HAL_UART_IRQHandler+0xee>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dbda:	060d      	lsls	r5, r1, #24
 800dbdc:	d50f      	bpl.n	800dbfe <HAL_UART_IRQHandler+0xee>
    if (huart->TxISR != NULL)
 800dbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbe0:	b1e3      	cbz	r3, 800dc1c <HAL_UART_IRQHandler+0x10c>
      huart->TxISR(huart);
 800dbe2:	4620      	mov	r0, r4
}
 800dbe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dbe8:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbea:	0268      	lsls	r0, r5, #9
 800dbec:	d5f3      	bpl.n	800dbd6 <HAL_UART_IRQHandler+0xc6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800dbf2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbf4:	621a      	str	r2, [r3, #32]
}
 800dbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800dbfa:	f000 baad 	b.w	800e158 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dbfe:	0650      	lsls	r0, r2, #25
 800dc00:	d50c      	bpl.n	800dc1c <HAL_UART_IRQHandler+0x10c>
 800dc02:	064a      	lsls	r2, r1, #25
 800dc04:	d50a      	bpl.n	800dc1c <HAL_UART_IRQHandler+0x10c>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc06:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800dc08:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  huart->TxISR = NULL;
 800dc0e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc10:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800dc12:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800dc14:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800dc16:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800dc18:	f7ff fece 	bl	800d9b8 <HAL_UART_TxCpltCallback>
}
 800dc1c:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc1e:	0756      	lsls	r6, r2, #29
 800dc20:	d596      	bpl.n	800db50 <HAL_UART_IRQHandler+0x40>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d094      	beq.n	800db50 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc26:	2504      	movs	r5, #4
 800dc28:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc2a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800dc2c:	f045 0502 	orr.w	r5, r5, #2
 800dc30:	67e5      	str	r5, [r4, #124]	; 0x7c
 800dc32:	e78d      	b.n	800db50 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc34:	2008      	movs	r0, #8
 800dc36:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dc38:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800dc3a:	f040 0008 	orr.w	r0, r0, #8
 800dc3e:	67e0      	str	r0, [r4, #124]	; 0x7c
 800dc40:	e78c      	b.n	800db5c <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 800dc42:	4620      	mov	r0, r4
 800dc44:	f7ff ff32 	bl	800daac <HAL_UART_ErrorCallback>
}
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800dc4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	d08c      	beq.n	800db6a <HAL_UART_IRQHandler+0x5a>
          huart->RxISR(huart);
 800dc50:	4620      	mov	r0, r4
 800dc52:	4790      	blx	r2
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	e788      	b.n	800db6a <HAL_UART_IRQHandler+0x5a>
        HAL_UART_ErrorCallback(huart);
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7ff ff27 	bl	800daac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc5e:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	bf00      	nop
 800dc64:	0800dc69 	.word	0x0800dc69

0800dc68 <UART_DMAAbortOnError>:
{
 800dc68:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 800dc72:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800dc74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800dc78:	f7ff ff18 	bl	800daac <HAL_UART_ErrorCallback>
}
 800dc7c:	bd08      	pop	{r3, pc}
 800dc7e:	bf00      	nop

0800dc80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dc82:	07da      	lsls	r2, r3, #31
{
 800dc84:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc86:	d506      	bpl.n	800dc96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc88:	6801      	ldr	r1, [r0, #0]
 800dc8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc8c:	684a      	ldr	r2, [r1, #4]
 800dc8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dc92:	4322      	orrs	r2, r4
 800dc94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc96:	079c      	lsls	r4, r3, #30
 800dc98:	d506      	bpl.n	800dca8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc9a:	6801      	ldr	r1, [r0, #0]
 800dc9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800dc9e:	684a      	ldr	r2, [r1, #4]
 800dca0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dca4:	4322      	orrs	r2, r4
 800dca6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dca8:	0759      	lsls	r1, r3, #29
 800dcaa:	d506      	bpl.n	800dcba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dcac:	6801      	ldr	r1, [r0, #0]
 800dcae:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800dcb0:	684a      	ldr	r2, [r1, #4]
 800dcb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dcb6:	4322      	orrs	r2, r4
 800dcb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dcba:	071a      	lsls	r2, r3, #28
 800dcbc:	d506      	bpl.n	800dccc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcbe:	6801      	ldr	r1, [r0, #0]
 800dcc0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800dcc2:	684a      	ldr	r2, [r1, #4]
 800dcc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcc8:	4322      	orrs	r2, r4
 800dcca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dccc:	06dc      	lsls	r4, r3, #27
 800dcce:	d506      	bpl.n	800dcde <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dcd0:	6801      	ldr	r1, [r0, #0]
 800dcd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800dcd4:	688a      	ldr	r2, [r1, #8]
 800dcd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dcda:	4322      	orrs	r2, r4
 800dcdc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcde:	0699      	lsls	r1, r3, #26
 800dce0:	d506      	bpl.n	800dcf0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dce2:	6801      	ldr	r1, [r0, #0]
 800dce4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800dce6:	688a      	ldr	r2, [r1, #8]
 800dce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dcec:	4322      	orrs	r2, r4
 800dcee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcf0:	065a      	lsls	r2, r3, #25
 800dcf2:	d509      	bpl.n	800dd08 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcf4:	6801      	ldr	r1, [r0, #0]
 800dcf6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800dcf8:	684a      	ldr	r2, [r1, #4]
 800dcfa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dcfe:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd04:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd06:	d00b      	beq.n	800dd20 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd08:	061b      	lsls	r3, r3, #24
 800dd0a:	d506      	bpl.n	800dd1a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd0c:	6802      	ldr	r2, [r0, #0]
 800dd0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800dd10:	6853      	ldr	r3, [r2, #4]
 800dd12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800dd16:	430b      	orrs	r3, r1
 800dd18:	6053      	str	r3, [r2, #4]
}
 800dd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd1e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd20:	684a      	ldr	r2, [r1, #4]
 800dd22:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800dd24:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800dd28:	4322      	orrs	r2, r4
 800dd2a:	604a      	str	r2, [r1, #4]
 800dd2c:	e7ec      	b.n	800dd08 <UART_AdvFeatureConfig+0x88>
 800dd2e:	bf00      	nop

0800dd30 <HAL_UART_Init>:
  if (huart == NULL)
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f000 8173 	beq.w	800e01c <HAL_UART_Init+0x2ec>
{
 800dd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800dd38:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d04c      	beq.n	800ddda <HAL_UART_Init+0xaa>
  __HAL_UART_DISABLE(huart);
 800dd40:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd42:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd44:	49b6      	ldr	r1, [pc, #728]	; (800e020 <HAL_UART_Init+0x2f0>)
  huart->gState = HAL_UART_STATE_BUSY;
 800dd46:	2224      	movs	r2, #36	; 0x24
 800dd48:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800dd4a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd4c:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800dd4e:	f020 0001 	bic.w	r0, r0, #1
 800dd52:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd54:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd56:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd58:	4332      	orrs	r2, r6
 800dd5a:	4302      	orrs	r2, r0
 800dd5c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd5e:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd62:	430a      	orrs	r2, r1
 800dd64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd6a:	49ae      	ldr	r1, [pc, #696]	; (800e024 <HAL_UART_Init+0x2f4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dd70:	432a      	orrs	r2, r5
 800dd72:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd74:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd76:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd78:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd7a:	d033      	beq.n	800dde4 <HAL_UART_Init+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 800dd7c:	6a26      	ldr	r6, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd7e:	4daa      	ldr	r5, [pc, #680]	; (800e028 <HAL_UART_Init+0x2f8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd80:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800dd84:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd86:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd88:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd8a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd8c:	d044      	beq.n	800de18 <HAL_UART_Init+0xe8>
 800dd8e:	4aa7      	ldr	r2, [pc, #668]	; (800e02c <HAL_UART_Init+0x2fc>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d05a      	beq.n	800de4a <HAL_UART_Init+0x11a>
 800dd94:	4aa6      	ldr	r2, [pc, #664]	; (800e030 <HAL_UART_Init+0x300>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	f000 811b 	beq.w	800dfd2 <HAL_UART_Init+0x2a2>
 800dd9c:	4aa5      	ldr	r2, [pc, #660]	; (800e034 <HAL_UART_Init+0x304>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	f000 80d9 	beq.w	800df56 <HAL_UART_Init+0x226>
 800dda4:	4aa4      	ldr	r2, [pc, #656]	; (800e038 <HAL_UART_Init+0x308>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d112      	bne.n	800ddd0 <HAL_UART_Init+0xa0>
 800ddaa:	4ba4      	ldr	r3, [pc, #656]	; (800e03c <HAL_UART_Init+0x30c>)
 800ddac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddb8:	f000 80bb 	beq.w	800df32 <HAL_UART_Init+0x202>
 800ddbc:	f240 80e4 	bls.w	800df88 <HAL_UART_Init+0x258>
 800ddc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddc4:	f000 8171 	beq.w	800e0aa <HAL_UART_Init+0x37a>
 800ddc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ddcc:	f000 80d1 	beq.w	800df72 <HAL_UART_Init+0x242>
  huart->RxISR = NULL;
 800ddd0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ddd2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 800ddd6:	2001      	movs	r0, #1
}
 800ddd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800ddda:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800ddde:	f7fd fa21 	bl	800b224 <HAL_UART_MspInit>
 800dde2:	e7ad      	b.n	800dd40 <HAL_UART_Init+0x10>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dde4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dde8:	4894      	ldr	r0, [pc, #592]	; (800e03c <HAL_UART_Init+0x30c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ddea:	430a      	orrs	r2, r1
 800ddec:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ddee:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800ddf2:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800ddf6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ddfa:	f000 814f 	beq.w	800e09c <HAL_UART_Init+0x36c>
 800ddfe:	f240 8123 	bls.w	800e048 <HAL_UART_Init+0x318>
 800de02:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800de06:	f000 8198 	beq.w	800e13a <HAL_UART_Init+0x40a>
 800de0a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800de0e:	d1df      	bne.n	800ddd0 <HAL_UART_Init+0xa0>
 800de10:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800de12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800de16:	e11e      	b.n	800e056 <HAL_UART_Init+0x326>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de18:	4b88      	ldr	r3, [pc, #544]	; (800e03c <HAL_UART_Init+0x30c>)
 800de1a:	4a89      	ldr	r2, [pc, #548]	; (800e040 <HAL_UART_Init+0x310>)
 800de1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de20:	f003 0303 	and.w	r3, r3, #3
 800de24:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800de2a:	f000 80df 	beq.w	800dfec <HAL_UART_Init+0x2bc>
    switch (clocksource)
 800de2e:	2b08      	cmp	r3, #8
 800de30:	f200 8189 	bhi.w	800e146 <HAL_UART_Init+0x416>
 800de34:	e8df f013 	tbh	[pc, r3, lsl #1]
 800de38:	0011007a 	.word	0x0011007a
 800de3c:	01870084 	.word	0x01870084
 800de40:	01870081 	.word	0x01870081
 800de44:	01870187 	.word	0x01870187
 800de48:	0071      	.short	0x0071
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de4a:	4b7c      	ldr	r3, [pc, #496]	; (800e03c <HAL_UART_Init+0x30c>)
 800de4c:	4a7d      	ldr	r2, [pc, #500]	; (800e044 <HAL_UART_Init+0x314>)
 800de4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de52:	f003 030c 	and.w	r3, r3, #12
 800de56:	5cd3      	ldrb	r3, [r2, r3]
 800de58:	e7e5      	b.n	800de26 <HAL_UART_Init+0xf6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800de5a:	f7fe fa7b 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800de5e:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800de60:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800de62:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800de66:	fbb3 f3f1 	udiv	r3, r3, r1
 800de6a:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de6c:	f1a3 0010 	sub.w	r0, r3, #16
 800de70:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800de74:	4288      	cmp	r0, r1
 800de76:	d8ab      	bhi.n	800ddd0 <HAL_UART_Init+0xa0>
      huart->Instance->BRR = usartdiv;
 800de78:	6820      	ldr	r0, [r4, #0]
  huart->RxISR = NULL;
 800de7a:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 800de7c:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 800de7e:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de82:	2a00      	cmp	r2, #0
 800de84:	d1a7      	bne.n	800ddd6 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f040 809e 	bne.w	800dfca <HAL_UART_Init+0x29a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de98:	689a      	ldr	r2, [r3, #8]
 800de9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de9e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800dea0:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea2:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 800dea4:	f042 0201 	orr.w	r2, r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deaa:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800deac:	f7fd fad4 	bl	800b458 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800deb6:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800deb8:	d409      	bmi.n	800dece <HAL_UART_Init+0x19e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	0752      	lsls	r2, r2, #29
 800debe:	d420      	bmi.n	800df02 <HAL_UART_Init+0x1d2>
  huart->gState = HAL_UART_STATE_READY;
 800dec0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800dec2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800dec4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800dec6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800deca:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800decc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dece:	69dd      	ldr	r5, [r3, #28]
 800ded0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800ded4:	d1f1      	bne.n	800deba <HAL_UART_Init+0x18a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ded6:	f7fd fabf 	bl	800b458 <HAL_GetTick>
 800deda:	1b80      	subs	r0, r0, r6
 800dedc:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dee0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dee2:	d3f4      	bcc.n	800dece <HAL_UART_Init+0x19e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800deea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deec:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800deee:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800def0:	f022 0201 	bic.w	r2, r2, #1
 800def4:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 800def6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800def8:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800defa:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800defe:	67a1      	str	r1, [r4, #120]	; 0x78
}
 800df00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df02:	69dd      	ldr	r5, [r3, #28]
 800df04:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800df08:	d1da      	bne.n	800dec0 <HAL_UART_Init+0x190>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df0a:	f7fd faa5 	bl	800b458 <HAL_GetTick>
 800df0e:	1b80      	subs	r0, r0, r6
 800df10:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800df14:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df16:	d3f4      	bcc.n	800df02 <HAL_UART_Init+0x1d2>
 800df18:	e7e4      	b.n	800dee4 <HAL_UART_Init+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800df1a:	6861      	ldr	r1, [r4, #4]
 800df1c:	084b      	lsrs	r3, r1, #1
 800df1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 800df22:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800df24:	fbb3 f3f1 	udiv	r3, r3, r1
 800df28:	b29b      	uxth	r3, r3
 800df2a:	e79f      	b.n	800de6c <HAL_UART_Init+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800df2c:	f7fe fa00 	bl	800c330 <HAL_RCC_GetPCLK1Freq>
 800df30:	e795      	b.n	800de5e <HAL_UART_Init+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df32:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df36:	f000 80c6 	beq.w	800e0c6 <HAL_UART_Init+0x396>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800df3a:	f7fd fdbb 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800df3e:	e78e      	b.n	800de5e <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800df40:	6861      	ldr	r1, [r4, #4]
 800df42:	084b      	lsrs	r3, r1, #1
 800df44:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800df48:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
  HAL_StatusTypeDef ret               = HAL_OK;
 800df4c:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800df4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800df52:	b29b      	uxth	r3, r3
 800df54:	e78a      	b.n	800de6c <HAL_UART_Init+0x13c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df56:	4b39      	ldr	r3, [pc, #228]	; (800e03c <HAL_UART_Init+0x30c>)
 800df58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df60:	2b40      	cmp	r3, #64	; 0x40
 800df62:	d0e6      	beq.n	800df32 <HAL_UART_Init+0x202>
 800df64:	d910      	bls.n	800df88 <HAL_UART_Init+0x258>
 800df66:	2b80      	cmp	r3, #128	; 0x80
 800df68:	f000 809f 	beq.w	800e0aa <HAL_UART_Init+0x37a>
 800df6c:	2bc0      	cmp	r3, #192	; 0xc0
 800df6e:	f47f af2f 	bne.w	800ddd0 <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df76:	d1d0      	bne.n	800df1a <HAL_UART_Init+0x1ea>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800df78:	6862      	ldr	r2, [r4, #4]
 800df7a:	0853      	lsrs	r3, r2, #1
 800df7c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800df80:	fbb3 f3f2 	udiv	r3, r3, r2
 800df84:	b29b      	uxth	r3, r3
 800df86:	e00e      	b.n	800dfa6 <HAL_UART_Init+0x276>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f47f af21 	bne.w	800ddd0 <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df92:	d1cb      	bne.n	800df2c <HAL_UART_Init+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800df94:	f7fe f9cc 	bl	800c330 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800df98:	6862      	ldr	r2, [r4, #4]
 800df9a:	0853      	lsrs	r3, r2, #1
 800df9c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800dfa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfa4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfa6:	f1a3 0110 	sub.w	r1, r3, #16
 800dfaa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800dfae:	4291      	cmp	r1, r2
 800dfb0:	f63f af0e 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dfb4:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800dfb8:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dfba:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800dfbe:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 800dfc0:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 800dfc2:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 800dfc4:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
 800dfc8:	e75d      	b.n	800de86 <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff fe58 	bl	800dc80 <UART_AdvFeatureConfig>
 800dfd0:	e75d      	b.n	800de8e <HAL_UART_Init+0x15e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfd2:	4b1a      	ldr	r3, [pc, #104]	; (800e03c <HAL_UART_Init+0x30c>)
 800dfd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dfdc:	2b10      	cmp	r3, #16
 800dfde:	d0a8      	beq.n	800df32 <HAL_UART_Init+0x202>
 800dfe0:	d9d2      	bls.n	800df88 <HAL_UART_Init+0x258>
 800dfe2:	2b20      	cmp	r3, #32
 800dfe4:	d061      	beq.n	800e0aa <HAL_UART_Init+0x37a>
 800dfe6:	2b30      	cmp	r3, #48	; 0x30
 800dfe8:	d0c3      	beq.n	800df72 <HAL_UART_Init+0x242>
 800dfea:	e6f1      	b.n	800ddd0 <HAL_UART_Init+0xa0>
    switch (clocksource)
 800dfec:	2b08      	cmp	r3, #8
 800dfee:	f63f aeef 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
 800dff2:	a201      	add	r2, pc, #4	; (adr r2, 800dff8 <HAL_UART_Init+0x2c8>)
 800dff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff8:	0800df95 	.word	0x0800df95
 800dffc:	0800e0a5 	.word	0x0800e0a5
 800e000:	0800e0b3 	.word	0x0800e0b3
 800e004:	0800ddd1 	.word	0x0800ddd1
 800e008:	0800e0c7 	.word	0x0800e0c7
 800e00c:	0800ddd1 	.word	0x0800ddd1
 800e010:	0800ddd1 	.word	0x0800ddd1
 800e014:	0800ddd1 	.word	0x0800ddd1
 800e018:	0800df79 	.word	0x0800df79
    return HAL_ERROR;
 800e01c:	2001      	movs	r0, #1
}
 800e01e:	4770      	bx	lr
 800e020:	efff69f3 	.word	0xefff69f3
 800e024:	40008000 	.word	0x40008000
 800e028:	40013800 	.word	0x40013800
 800e02c:	40004400 	.word	0x40004400
 800e030:	40004800 	.word	0x40004800
 800e034:	40004c00 	.word	0x40004c00
 800e038:	40005000 	.word	0x40005000
 800e03c:	40021000 	.word	0x40021000
 800e040:	0800e4a8 	.word	0x0800e4a8
 800e044:	0800e4ac 	.word	0x0800e4ac
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e048:	2d00      	cmp	r5, #0
 800e04a:	f47f aec1 	bne.w	800ddd0 <HAL_UART_Init+0xa0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800e04e:	f7fe f96f 	bl	800c330 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800e052:	2800      	cmp	r0, #0
 800e054:	d074      	beq.n	800e140 <HAL_UART_Init+0x410>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e056:	6862      	ldr	r2, [r4, #4]
 800e058:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e05c:	4283      	cmp	r3, r0
 800e05e:	f63f aeb7 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
 800e062:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800e066:	f63f aeb3 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
        switch (clocksource)
 800e06a:	2d08      	cmp	r5, #8
 800e06c:	f63f aeb0 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
 800e070:	a301      	add	r3, pc, #4	; (adr r3, 800e078 <HAL_UART_Init+0x348>)
 800e072:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800e076:	bf00      	nop
 800e078:	0800e135 	.word	0x0800e135
 800e07c:	0800ddd1 	.word	0x0800ddd1
 800e080:	0800e11b 	.word	0x0800e11b
 800e084:	0800ddd1 	.word	0x0800ddd1
 800e088:	0800e0f9 	.word	0x0800e0f9
 800e08c:	0800ddd1 	.word	0x0800ddd1
 800e090:	0800ddd1 	.word	0x0800ddd1
 800e094:	0800ddd1 	.word	0x0800ddd1
 800e098:	0800e0cd 	.word	0x0800e0cd
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800e09c:	f7fd fd0a 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800e0a0:	2504      	movs	r5, #4
 800e0a2:	e7d6      	b.n	800e052 <HAL_UART_Init+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800e0a4:	f7fe f956 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
 800e0a8:	e776      	b.n	800df98 <HAL_UART_Init+0x268>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e0ae:	f47f af47 	bne.w	800df40 <HAL_UART_Init+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e0b2:	6862      	ldr	r2, [r4, #4]
 800e0b4:	0853      	lsrs	r3, r2, #1
 800e0b6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800e0ba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800e0be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	e76f      	b.n	800dfa6 <HAL_UART_Init+0x276>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800e0c6:	f7fd fcf5 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800e0ca:	e765      	b.n	800df98 <HAL_UART_Init+0x268>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800e0cc:	0850      	lsrs	r0, r2, #1
 800e0ce:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800e0d2:	f04f 0600 	mov.w	r6, #0
 800e0d6:	f146 0100 	adc.w	r1, r6, #0
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f7f2 f874 	bl	80001c8 <__aeabi_uldivmod>
 800e0e0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0e4:	4b19      	ldr	r3, [pc, #100]	; (800e14c <HAL_UART_Init+0x41c>)
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	f63f ae72 	bhi.w	800ddd0 <HAL_UART_Init+0xa0>
          huart->Instance->BRR = usartdiv;
 800e0ec:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800e0ee:	2300      	movs	r3, #0
          huart->Instance->BRR = usartdiv;
 800e0f0:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800e0f2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 800e0f6:	e6c6      	b.n	800de86 <HAL_UART_Init+0x156>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800e0f8:	f7fd fcdc 	bl	800bab4 <HAL_RCC_GetSysClockFreq>
 800e0fc:	6862      	ldr	r2, [r4, #4]
 800e0fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e102:	0856      	lsrs	r6, r2, #1
 800e104:	2700      	movs	r7, #0
 800e106:	fbe3 6700 	umlal	r6, r7, r3, r0
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	2300      	movs	r3, #0
 800e110:	f7f2 f85a 	bl	80001c8 <__aeabi_uldivmod>
 800e114:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800e118:	e7e4      	b.n	800e0e4 <HAL_UART_Init+0x3b4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800e11a:	4d0d      	ldr	r5, [pc, #52]	; (800e150 <HAL_UART_Init+0x420>)
 800e11c:	0853      	lsrs	r3, r2, #1
 800e11e:	18e8      	adds	r0, r5, r3
 800e120:	f04f 0600 	mov.w	r6, #0
 800e124:	f146 0100 	adc.w	r1, r6, #0
 800e128:	2300      	movs	r3, #0
 800e12a:	f7f2 f84d 	bl	80001c8 <__aeabi_uldivmod>
 800e12e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800e132:	e7d7      	b.n	800e0e4 <HAL_UART_Init+0x3b4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800e134:	f7fe f8fc 	bl	800c330 <HAL_RCC_GetPCLK1Freq>
 800e138:	e7e0      	b.n	800e0fc <HAL_UART_Init+0x3cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e13a:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800e13c:	4805      	ldr	r0, [pc, #20]	; (800e154 <HAL_UART_Init+0x424>)
 800e13e:	e78a      	b.n	800e056 <HAL_UART_Init+0x326>
  huart->TxISR = NULL;
 800e140:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 800e144:	e69f      	b.n	800de86 <HAL_UART_Init+0x156>
        ret = HAL_ERROR;
 800e146:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800e148:	2300      	movs	r3, #0
 800e14a:	e68f      	b.n	800de6c <HAL_UART_Init+0x13c>
 800e14c:	000ffcff 	.word	0x000ffcff
 800e150:	f4240000 	.word	0xf4240000
 800e154:	00f42400 	.word	0x00f42400

0800e158 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop

0800e15c <__libc_init_array>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	4e0d      	ldr	r6, [pc, #52]	; (800e194 <__libc_init_array+0x38>)
 800e160:	4c0d      	ldr	r4, [pc, #52]	; (800e198 <__libc_init_array+0x3c>)
 800e162:	1ba4      	subs	r4, r4, r6
 800e164:	10a4      	asrs	r4, r4, #2
 800e166:	2500      	movs	r5, #0
 800e168:	42a5      	cmp	r5, r4
 800e16a:	d109      	bne.n	800e180 <__libc_init_array+0x24>
 800e16c:	4e0b      	ldr	r6, [pc, #44]	; (800e19c <__libc_init_array+0x40>)
 800e16e:	4c0c      	ldr	r4, [pc, #48]	; (800e1a0 <__libc_init_array+0x44>)
 800e170:	f000 f83a 	bl	800e1e8 <_init>
 800e174:	1ba4      	subs	r4, r4, r6
 800e176:	10a4      	asrs	r4, r4, #2
 800e178:	2500      	movs	r5, #0
 800e17a:	42a5      	cmp	r5, r4
 800e17c:	d105      	bne.n	800e18a <__libc_init_array+0x2e>
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
 800e180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e184:	4798      	blx	r3
 800e186:	3501      	adds	r5, #1
 800e188:	e7ee      	b.n	800e168 <__libc_init_array+0xc>
 800e18a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e18e:	4798      	blx	r3
 800e190:	3501      	adds	r5, #1
 800e192:	e7f2      	b.n	800e17a <__libc_init_array+0x1e>
 800e194:	0800e4c4 	.word	0x0800e4c4
 800e198:	0800e4c4 	.word	0x0800e4c4
 800e19c:	0800e4c4 	.word	0x0800e4c4
 800e1a0:	0800e4c8 	.word	0x0800e4c8

0800e1a4 <memcmp>:
 800e1a4:	b530      	push	{r4, r5, lr}
 800e1a6:	2400      	movs	r4, #0
 800e1a8:	42a2      	cmp	r2, r4
 800e1aa:	d101      	bne.n	800e1b0 <memcmp+0xc>
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	e007      	b.n	800e1c0 <memcmp+0x1c>
 800e1b0:	5d03      	ldrb	r3, [r0, r4]
 800e1b2:	3401      	adds	r4, #1
 800e1b4:	190d      	adds	r5, r1, r4
 800e1b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e1ba:	42ab      	cmp	r3, r5
 800e1bc:	d0f4      	beq.n	800e1a8 <memcmp+0x4>
 800e1be:	1b58      	subs	r0, r3, r5
 800e1c0:	bd30      	pop	{r4, r5, pc}

0800e1c2 <memcpy>:
 800e1c2:	b510      	push	{r4, lr}
 800e1c4:	1e43      	subs	r3, r0, #1
 800e1c6:	440a      	add	r2, r1
 800e1c8:	4291      	cmp	r1, r2
 800e1ca:	d100      	bne.n	800e1ce <memcpy+0xc>
 800e1cc:	bd10      	pop	{r4, pc}
 800e1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1d6:	e7f7      	b.n	800e1c8 <memcpy+0x6>

0800e1d8 <memset>:
 800e1d8:	4402      	add	r2, r0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d100      	bne.n	800e1e2 <memset+0xa>
 800e1e0:	4770      	bx	lr
 800e1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e6:	e7f9      	b.n	800e1dc <memset+0x4>

0800e1e8 <_init>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	bf00      	nop
 800e1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ee:	bc08      	pop	{r3}
 800e1f0:	469e      	mov	lr, r3
 800e1f2:	4770      	bx	lr

0800e1f4 <_fini>:
 800e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f6:	bf00      	nop
 800e1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fa:	bc08      	pop	{r3}
 800e1fc:	469e      	mov	lr, r3
 800e1fe:	4770      	bx	lr
